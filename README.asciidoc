= GibiBot

== Team members

* *Robert Valge* (Programming)
* *Argo Aljand* (Programming)
* *Marc Ander Etti* (Mechanics)
* *Raimo Köidam* (Electronics)

== Links

*Fusion 360 link:* https://a360.co/3fKQEJi  

== Programming
=== Packages
* math - used for calculating different math equations for omni motion
* random - to make random choices
* enum - used to make a state machine for movement and colours
* time - for different timers, for example if robot is in FIND_BALL state for 3 seconds then it changes the state
* pyrealsense2 - camera's library
* threading - to make second thread for referee commands client
* json - string manipulation
* websockets - for client and referee server connection
* asyncio - for referee commands client 
* serial - needed for coding usb communication
* struct - for packing information that is sent to the motherboard
* serial.tools.list_ports - to check for available usb ports, so we don't have to find the correct port's name manually
* jit_functions - used it in image processing, jit makes for loops much faster so we can go through lists much faster
* numpy - for list manipulation
* cv2 - image processing
* tkinter - used it in the beginning to simulate omnimotion visually
* websockets - to make our testing server for referee commands

=== A brief description of your game logic and overall code structure.

Our code overall is section into files according to their usage (for example image_processing.py and movement.py) to make the code less cluttered then if it was all in the same file. The fails contain mainly different classes and then we can import them according to our needs. The main code is structured so that every situation has a State that we can refer to to make the robot move accordingly.

=== Block diagram of game logic
image::Images/diagramm2.JPG[1000,1000]

=== Good and bad

* One of our code's strong side is sigmoid controller. It eliminated most of the if else sentences and also made the robot's movement better.
* Ball detection and depth dedection could be improved by using better and more calculations.
* Timer that we used could be made into a function to make the code more compact.
* Line dedection is very reliable.
* Code was good enough to win DeltaX.


== Electronics

The electronics of the robot use the components that were recommended and provided by the instructors.
The mainboard can control 3 motors and 2 servos. The motor drivers are powered by a 4S LiPo battery and the microcontroller side is powered through the usb connector by the NUC computer. The USB connection is also used to communicate between the microcontroller and the computer. There is a connector for an IR sensor to detect the ball in the holder. The microcontroller will let the computer know when the IR sensor detects a ball.

=== Some problems that occurred and the final outcome
* After soldering all the components, there was a problem with the 5V on the battery side of the board. It turned out that one of the pins of the switching regulator was not connected.
* Some of the PWM and DIR pins connections were swapped. Needed to hack the board to fix it.
* Micro USB connector broke and had to be replaced.
* IR sensor wire broke during the robot assembly and it needed to be fixed.

* Everything worked in the end and we won Delta-X and the course competition.

image::Images/mainboard1.jpg[500,500]
image::Images/mainboard2.jpg[500,500]
image::Images/robot.jpg[500,500]
image::Images/mainboard_with_wires.jpg[950,500]

== Mechanics

=== Thrower design
* Ball grabbing ability 

image:Images/thrower1.png[] 

* Adjustable throwing angle 

image:Images/thrower2.png[] 


=== Wheels design
* Nudges to hold the rollers in place 
* Quite generic wheels 

=== Hull Design:
* Thrower moved close to centre of the robot to help with aiming accuracy 

image:Images/robot_model.png[] 

* Round design, all sides covered 
* Verical batteries 

image:Images/robot_batteries.png[] 

* PC mounted on camera holder 

image:Images/robot_pc.png[] 

* Main PCB under camera holder 

image:Images/mainboard_model.png[] 

* Empty area inside was filled with cables 

image:Images/robot_model_inside.png[] 

Overall on the mechanical side:
+ Thrower design was near perfect
+ Chassis had room for cables
+ Solid construction and easy to assemble
+ Good collaboration with programmers granted effective design choices
+ Wheels were covered with easily removable wheel covers
- wheels were not that good
- PCB should have been on the bottom plate
- A lot of 3d printed parts were used


== Personal comments

=== Robert:
==== On which parts of the robot did you work on?
I worked on robot's code. Mainly on the driving and calculations logic.

===== What did you learn?
I learned to be better code writer and also learned about different python packages. 

===== What would you do differently next time?
I would make a plan how I want to implement the code and how exactly the robot should work.

===== What did you like/did not like about the course/building a robot?
I liked the practical experience. Also enjoyed the competitive vibe. Maybe those presentations were kind of time wasters.

===== Suggestions for next year students.
Get the robot moving as soon as possible so you get motivation to improve it during the course.

===== Suggestions for instructors.
I don’t have any suggestions or reproaches for the instructors.

=== Argo:
==== On which parts of the robot did you work on?
I worked on robot's code. Mainly on image processing.

===== What did you learn? 
I learned a lot of different techniques to improve and optimise my code. Also bettered my coding habits to make code that is less prone to errors and keep my coding structure more clear.

===== What would you do differently next time?
Start earlier and make a structured plan going forward. Also follow the guide and requirements given to us on writing clear and structured code more precisely.

===== What did you like/did not like about the course/building a robot?
I liked building the robot from ground up and really enjoyed the programming process, trying to problem-solve and make our robot better.

===== Suggestions for next year students.
The given code by the instructors may be overwhelming at first but step by step you get the hang of it. Always ask questions and help from the instructors if you don't understand something.

===== Suggestions for instructors.
The instructors were helpful and for me every thing went smoothly so I don't have any suggestions.

=== Marc:

==== On which parts of the robot did you work on?
I worked on the mechanical design of the robot and manufacture

===== What did you learn? 
I learned to use Fusion 360 quite good

===== What would you do differently next time?
I would read the instructions/limitations more thorough

===== What did you like/did not like about the course/building a robot?
I liked the teamwork and the ability to do something that will really be used. I did not like the presentations.

===== Suggestions for next year students.
Read the timeline

===== Suggestions for instructors.
Information about the course (tasks table, rules etc) is really hard to read/follow. There should also be more instructors, because they are overwhelmed with work at when all the students are in school, and it can take over a week to mill or use some other tools because the instructors don't have enough time for everyone. Other than that, the instructors did their job really good.

=== Raimo:
==== On which parts of the robot did you work on?
I worked on the electronics and the firmware of the robot.

===== What did you learn?
I learned to use Altium Designer. I also learned more about electronics and pcb design. Also I learned how to use the STM32CubeIDE and to write firmware for the stm32 microcontroller.

===== What would you do differently next time?
I would try to design the electronics a little earlier so that there would be a bit more time to fix the issues that will pop up.

===== What did you like/did not like about the course/building a robot?
I liked the practical experience. I also liked that the instructors were always ready to help. I would have liked to have a bit more time to work on the robot before the competition.

===== Suggestions for next year students.
I recommend starting with the electronics design early.

===== Suggestions for instructors.
I don't have any suggestions for the instructors.

== Progress blog

=== 12.09.22
* Starting the designe of the thrower. - Marc 10h
* Configuration of the communication between the motherboard and the computer. - Argo, Robert 5h
* VNC setup. - Argo, Robert 2h
* Soldering wires and connectors. - Raimo 3h

=== 15.09.22
* Image processing, basic movement. - Argo, Robert 3h
* Soldering wires and connectors. - Raimo 3h
* Thrower designe. - Marc 8h

=== 19.09.22
* Thrower designe. - Marc 5h

=== 21.09.22
* Mainboard design started - Raimo 2h
* VNC setup vol2 - Argo, Robert 1h

=== 22.09.22
* Made code easier to understand, removed unnecessary parts of code - Robert 2h
* Battery and code test - Raimo, Robert 2h

=== 26.09.22
* Robot finds and centers ball, got robot moving - Raimo, Robert, Argo, 2.5h
* Worked on thrower - Marc 2.5h

=== 29.09.22
* Mainboard schematic - Raimo 2.5h
* secure_ball, omni funcktion implementation - Argo 3.5h
* code structure corrections - Argo 0.5h

=== 02.10.22
* Worked on thrower - Marc 2h

=== 03.10.22
* Worked on thrower - Marc 2h
* Mainboard schematic - Raimo 2h

=== 06.10.22
* Robot can find and follow the ball - Argo, Robert 2.5h
* Mainboard PCB design - Raimo 2h

=== 10.10.22
* Mainboard PCB design - Raimo 1.5h
* Worked on robot's movement - Argo, Robert 2h

=== 13.10.22
* Tested movement and fixed some bugs. Also implemented some functions related to speed- Argo, Robert 4h

=== 17.10.22
* Mainboard PCB design - Raimo 2h

=== 19.10.22
* Started to fix problems that instructors mentioned - Robert 1.5h

=== 20.10.22
* Orbit and throw functions and made following better - Robert 9.5h
* Made the robot wiring a bit better, Mainboard PCB design - Raimo 2.5h

=== 22.10.22
* Looked through the review summary and fixed some ofthe problems in the PCB design - Raimo 4h

=== 24.10.22
* Worked on thrower code - Robert 3h
* Looked through the review summary and fixed some ofthe problems in the PCB design - Raimo 2h

=== 26.11.22
* Mechanics - Marc, 1h

=== 27.10.22
* Linux setup vol2, nucleo replacement, new test to see that everything works again - Robert, Argo  7h
* Modded the new nucleo - Raimo 0.5h
* Looked through the review summary and fixed some ofthe problems in the PCB design - Raimo 2h

=== 28.10.22
* Thrower measurements and calculations code - Robert 2.5h

=== 29.10.22
* New thrower measurements, better aim, test runs on court - Robert 8h, Argo 4h
* Distance measuring function implementation - Robert, Argo 2h

=== 30.10.22
* Different enums, made code cleaner, removed issues  - Robert 1,5h
* Fixed some issues with the PCB design - Raimo 2h

=== 31.10.22
* Previous changes tested - Robert, Argo 5h
* Fixed some issues with the PCB design - Raimo 6h

=== 01.11.22
* Fixed some issues with the PCB design and made some changes - Raimo 5h

=== 02.11.22
* Fixed some issues with the PCB design and made some changes - Raimo 2h

=== 03.11.22
* Calibration state - Robert 5h

=== 04.11.22
* Mechanics problems - Marc, 2h

=== 06.11.22
* Line detection - Argo 2,5h
* Distance measuring from deapth frame with numpy - Argo, Robert 4h
* Fixed the final issues with the design and added gerber files - Raimo 2h

=== 07.11.22
* Fixed some issues and improved code  - Robert 3h
* Worked on mainboard documentation - Raimo 1.5h

=== 09.11.22
* Fixed thrower's mechanical issue and worked on main file- Robert, Argo 1h

=== 10.11.22
* Test competition and new measurements - Argo, Robert 7h

=== 12.11.22
* Base plate design - Marc, 3h

=== 14.11.22
* Bottom and top plate design - Marc, 3h
* Firmware - Raimo 2h

=== 17.11.22
* Firmware - Raimo 2h

=== 19.11.22
* Chassis and wheels design - Marc, 2h

=== 20.11.22
* Chassis design - Marc, 3h

=== 21.11.22
* Ref commands and other stuff - Robert 4h
* setting up line dedection with @jit - Argo 3h
* Thrower and chassis design - Marc 8h
* Soldering mainboard - Raimo 4.5h

=== 22.11.22
* line dedection using @jit - Argo 3h
* Soldering mainboard - Raimo 3h

=== 23.11.22
* Soldering mainboard - Raimo 3h

=== 24.11.22
* New thrower measurments, throwing calibration corrections, second test competition - Argo, Robert 6h

=== 25.11.22
* first sigmoid controller implementation - Argo 2h, Robert 1h

=== 27.11.22
* Sigmoid fully implemented and tested - Robert 3h, Argo 4.5h  
* Github Issues - Marc 5h 

=== 28.11.22
* Fixed some mainboard issues - Raimo 4h

=== 30.11.22
* Tested the mainboard and made some wires - Raimo 2h

=== 01.12.22
* Thrower and Electronics in Fusion - Marc 7h
* Mainboard firmware - Raimo 3h

=== 02.12.22
* Front guards and github issues - Marc 4h
* Front guards - Marc 3h  

=== 03.12.22
* Issues - Marc 3h  
* Mainboard firmware - Raimo 4h

=== 04.12.22
* Manufacturing - Marc 1h  

=== 05.12.22
* Manufacturing - Marc 4h  
* Firmware for the sensor and servos. Made the sensor - Raimo 6h

=== 07.12.22
* Tried to fix the problems with the motors. Improved the firmware - Raimo 9.5h
* New robot fabrication and code testing. - Robert, Argo 10h, Marc 9h

=== 08.12.22
* Tried to fix the problems with the motors - Raimo 10h, Robert 7h, Argo 5h

=== 09.12.22
* Fixed the mainboard, fixed the sensor wire - Raimo 5.5h

=== 10.12.22
* Changed the sensor feedback in the firmware, helped testing the robot - Raimo 4h
* Fully implemented code for new robot, also tested it - Robert, Argo 7h

=== 12.12.22
* Tested and improved new robot's code - Robert, Argo 7h

=== 13.12.22
* New measurements, changed some code - Robert, Argo 6h

=== 14.12.22
* Showed some programming tasks and did little modifications to code - Robert, Argo 8h

=== 15.12.22
* Final modifications, everything working, applied fur around the robot, new measurements - Robert, Argo 10h

=== 16.12.22
* DeltaX day - Robert, Argo, Raimo 6h

=== 17.12.22
* Course competition - Raimo, Argo 5h
