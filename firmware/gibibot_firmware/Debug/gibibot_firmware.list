
gibibot_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a288  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4b8  0800a4b8  000201c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4b8  0800a4b8  000201c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4b8  0800a4b8  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b8  0800a4b8  0001a4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4bc  0800a4bc  0001a4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0800a4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001488  200001c4  0800a684  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000164c  0800a684  0002164c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016749  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a4  00000000  00000000  0003693d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003b248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c3f  00000000  00000000  0003c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166a5  00000000  00000000  0005d06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c654b  00000000  00000000  00073714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139c5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005060  00000000  00000000  00139cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c4 	.word	0x200001c4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a448 	.word	0x0800a448

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c8 	.word	0x200001c8
 8000214:	0800a448 	.word	0x0800a448

08000218 <CDC_On_Receive>:
		.throwerGrab = 4800,
		.delimiter = 0};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0e      	cmp	r3, #14
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command));
 800022a:	220e      	movs	r2, #14
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f00a f8f4 	bl	800a41c <memcpy>

    if (command.delimiter == 0xAAAA) {
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	899b      	ldrh	r3, [r3, #12]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000030 	.word	0x20000030
 8000254:	2000048e 	.word	0x2000048e

08000258 <ClampValueI32>:

int32_t ClampValueI32(int32_t val, int32_t min, int32_t max) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (val < min) {
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	da01      	bge.n	8000270 <ClampValueI32+0x18>
		return min;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	e006      	b.n	800027e <ClampValueI32+0x26>
	}
	if (val > max) {
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	dd01      	ble.n	800027c <ClampValueI32+0x24>
		return max;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	e000      	b.n	800027e <ClampValueI32+0x26>
	}
	return val;
 800027c:	68fb      	ldr	r3, [r7, #12]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr

0800028a <ClampValueU16>:

uint16_t ClampValueU16(uint16_t val, uint16_t min, uint16_t max) {
 800028a:	b480      	push	{r7}
 800028c:	b083      	sub	sp, #12
 800028e:	af00      	add	r7, sp, #0
 8000290:	4603      	mov	r3, r0
 8000292:	80fb      	strh	r3, [r7, #6]
 8000294:	460b      	mov	r3, r1
 8000296:	80bb      	strh	r3, [r7, #4]
 8000298:	4613      	mov	r3, r2
 800029a:	807b      	strh	r3, [r7, #2]
	if (val < min) {
 800029c:	88fa      	ldrh	r2, [r7, #6]
 800029e:	88bb      	ldrh	r3, [r7, #4]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d201      	bcs.n	80002a8 <ClampValueU16+0x1e>
		return min;
 80002a4:	88bb      	ldrh	r3, [r7, #4]
 80002a6:	e006      	b.n	80002b6 <ClampValueU16+0x2c>
	}
	if (val > max) {
 80002a8:	88fa      	ldrh	r2, [r7, #6]
 80002aa:	887b      	ldrh	r3, [r7, #2]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d901      	bls.n	80002b4 <ClampValueU16+0x2a>
		return max;
 80002b0:	887b      	ldrh	r3, [r7, #2]
 80002b2:	e000      	b.n	80002b6 <ClampValueU16+0x2c>
	}
	return val;
 80002b4:	88fb      	ldrh	r3, [r7, #6]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
	...

080002c4 <ControlMotor>:

int32_t ControlMotor(MotorControl* motorControl, int16_t position, int16_t set_speed) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	807b      	strh	r3, [r7, #2]
 80002d0:	4613      	mov	r3, r2
 80002d2:	803b      	strh	r3, [r7, #0]
	motorControl->positionChange = (position-motorControl->position); //Calculates the position change
 80002d4:	887a      	ldrh	r2, [r7, #2]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	819a      	strh	r2, [r3, #12]
	int16_t error = (set_speed-motorControl->positionChange); //Calculates the error
 80002e8:	883a      	ldrh	r2, [r7, #0]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	1ad3      	subs	r3, r2, r3
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	81fb      	strh	r3, [r7, #14]
	motorControl->integral+=error;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000300:	441a      	add	r2, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	609a      	str	r2, [r3, #8]
	motorControl->integral=ClampValueI32(motorControl->integral, -65535/motorControl->gainI, 65535/motorControl->gainI); //Adds the errors together and clamps the value
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	6898      	ldr	r0, [r3, #8]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000310:	461a      	mov	r2, r3
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <ControlMotor+0xb4>)
 8000314:	fb93 f1f2 	sdiv	r1, r3, r2
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800031e:	461a      	mov	r2, r3
 8000320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000324:	fb93 f3f2 	sdiv	r3, r3, r2
 8000328:	461a      	mov	r2, r3
 800032a:	f7ff ff95 	bl	8000258 <ClampValueI32>
 800032e:	4602      	mov	r2, r0
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	609a      	str	r2, [r3, #8]
	motorControl->position = position; //Previous position is now the current position
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	887a      	ldrh	r2, [r7, #2]
 8000338:	81da      	strh	r2, [r3, #14]
	return (error*motorControl->gainP + motorControl->gainI*motorControl->integral + motorControl->positionChange*motorControl->gainD);
 800033a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000344:	fb03 f202 	mul.w	r2, r3, r2
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800034e:	4619      	mov	r1, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	fb01 f303 	mul.w	r3, r1, r3
 8000358:	441a      	add	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000360:	4619      	mov	r1, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000368:	fb01 f303 	mul.w	r3, r1, r3
 800036c:	4413      	add	r3, r2
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	ffff0001 	.word	0xffff0001

0800037c <EnableMotorDrivers>:

void EnableMotorDrivers() {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2102      	movs	r1, #2
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f001 fc01 	bl	8001b90 <HAL_GPIO_WritePin>
	for (int i = 0; i < 350; i++) {
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	e003      	b.n	800039c <EnableMotorDrivers+0x20>
	  __asm("nop");
 8000394:	bf00      	nop
	for (int i = 0; i < 350; i++) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80003a2:	dbf7      	blt.n	8000394 <EnableMotorDrivers+0x18>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2102      	movs	r1, #2
 80003a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ac:	f001 fbf0 	bl	8001b90 <HAL_GPIO_WritePin>
	for (int i = 0; i < 350; i++) {
 80003b0:	2300      	movs	r3, #0
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	e003      	b.n	80003be <EnableMotorDrivers+0x42>
	  __asm("nop");
 80003b6:	bf00      	nop
	for (int i = 0; i < 350; i++) {
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80003c4:	dbf7      	blt.n	80003b6 <EnableMotorDrivers+0x3a>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2102      	movs	r1, #2
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ce:	f001 fbdf 	bl	8001b90 <HAL_GPIO_WritePin>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <UpdateServosAndThrower>:

void UpdateServosAndThrower() {
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	//Start thrower speed < 3200
	//Thrower speed between 3200 and 6400
	TIM15->CCR2 = command.throwerSpeed+3150;
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <UpdateServosAndThrower+0x48>)
 80003e2:	88db      	ldrh	r3, [r3, #6]
 80003e4:	f603 424e 	addw	r2, r3, #3150	; 0xc4e
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <UpdateServosAndThrower+0x4c>)
 80003ea:	639a      	str	r2, [r3, #56]	; 0x38
	//Thrower angle
	TIM8->CCR2 = ClampValueU16(command.throwerAngle, 2700, 6900);
 80003ec:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <UpdateServosAndThrower+0x48>)
 80003ee:	891b      	ldrh	r3, [r3, #8]
 80003f0:	f641 22f4 	movw	r2, #6900	; 0x1af4
 80003f4:	f640 218c 	movw	r1, #2700	; 0xa8c
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff46 	bl	800028a <ClampValueU16>
 80003fe:	4603      	mov	r3, r0
 8000400:	461a      	mov	r2, r3
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <UpdateServosAndThrower+0x50>)
 8000404:	639a      	str	r2, [r3, #56]	; 0x38
	//Grabber
	TIM16->CCR1 = ClampValueU16(command.throwerGrab, 2700, 6900);
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <UpdateServosAndThrower+0x48>)
 8000408:	895b      	ldrh	r3, [r3, #10]
 800040a:	f641 22f4 	movw	r2, #6900	; 0x1af4
 800040e:	f640 218c 	movw	r1, #2700	; 0xa8c
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff39 	bl	800028a <ClampValueU16>
 8000418:	4603      	mov	r3, r0
 800041a:	461a      	mov	r2, r3
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <UpdateServosAndThrower+0x54>)
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000030 	.word	0x20000030
 8000428:	40014000 	.word	0x40014000
 800042c:	40013400 	.word	0x40013400
 8000430:	40014400 	.word	0x40014400

08000434 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	//Reading the motor encoders and calculating motor pwm
	int32_t motor1PWM = ClampValueI32(ControlMotor(&motorControl1, (int16_t)TIM2->CNT, command.speed1), -65535, 65535);
 800043c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000442:	b21b      	sxth	r3, r3
 8000444:	4a3d      	ldr	r2, [pc, #244]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000446:	f9b2 2000 	ldrsh.w	r2, [r2]
 800044a:	4619      	mov	r1, r3
 800044c:	483c      	ldr	r0, [pc, #240]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800044e:	f7ff ff39 	bl	80002c4 <ControlMotor>
 8000452:	4603      	mov	r3, r0
 8000454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000458:	493a      	ldr	r1, [pc, #232]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff fefc 	bl	8000258 <ClampValueI32>
 8000460:	6178      	str	r0, [r7, #20]
	//Direction M1
	if (motor1PWM < 0) {
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	2b00      	cmp	r3, #0
 8000466:	da07      	bge.n	8000478 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f001 fb8d 	bl	8001b90 <HAL_GPIO_WritePin>
 8000476:	e006      	b.n	8000486 <HAL_TIM_PeriodElapsedCallback+0x52>
	} else {
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f001 fb85 	bl	8001b90 <HAL_GPIO_WritePin>
	}
	int32_t motor2PWM = ClampValueI32(ControlMotor(&motorControl2, (int16_t)TIM3->CNT, command.speed2), -65535, 65535);
 8000486:	4b30      	ldr	r3, [pc, #192]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048a:	b21b      	sxth	r3, r3
 800048c:	4a2b      	ldr	r2, [pc, #172]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800048e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000492:	4619      	mov	r1, r3
 8000494:	482d      	ldr	r0, [pc, #180]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000496:	f7ff ff15 	bl	80002c4 <ControlMotor>
 800049a:	4603      	mov	r3, r0
 800049c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004a0:	4928      	ldr	r1, [pc, #160]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fed8 	bl	8000258 <ClampValueI32>
 80004a8:	6138      	str	r0, [r7, #16]
	//Direction M2
	if (motor2PWM < 0) {
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da05      	bge.n	80004bc <HAL_TIM_PeriodElapsedCallback+0x88>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2101      	movs	r1, #1
 80004b4:	4826      	ldr	r0, [pc, #152]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80004b6:	f001 fb6b 	bl	8001b90 <HAL_GPIO_WritePin>
 80004ba:	e004      	b.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x92>
	} else {
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2101      	movs	r1, #1
 80004c0:	4823      	ldr	r0, [pc, #140]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80004c2:	f001 fb65 	bl	8001b90 <HAL_GPIO_WritePin>
	}
	int32_t motor3PWM = ClampValueI32(ControlMotor(&motorControl3, (int16_t)TIM4->CNT, command.speed3), -65535, 65535);
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80004c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ca:	b21b      	sxth	r3, r3
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80004ce:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4820      	ldr	r0, [pc, #128]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80004d6:	f7ff fef5 	bl	80002c4 <ControlMotor>
 80004da:	4603      	mov	r3, r0
 80004dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e0:	4918      	ldr	r1, [pc, #96]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff feb8 	bl	8000258 <ClampValueI32>
 80004e8:	60f8      	str	r0, [r7, #12]
	//Direction M3
	if (motor3PWM < 0) {
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	da06      	bge.n	80004fe <HAL_TIM_PeriodElapsedCallback+0xca>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2104      	movs	r1, #4
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f001 fb4a 	bl	8001b90 <HAL_GPIO_WritePin>
 80004fc:	e005      	b.n	800050a <HAL_TIM_PeriodElapsedCallback+0xd6>
	} else {
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2104      	movs	r1, #4
 8000502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000506:	f001 fb43 	bl	8001b90 <HAL_GPIO_WritePin>
	}
	//Changing motor pwm
	TIM1->CCR2 = abs(motor1PWM);
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000510:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR1 = abs(motor2PWM);
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800051e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
	TIM17->CCR1 = abs(motor3PWM);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800052c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000030 	.word	0x20000030
 8000540:	20000000 	.word	0x20000000
 8000544:	ffff0001 	.word	0xffff0001
 8000548:	40000400 	.word	0x40000400
 800054c:	20000010 	.word	0x20000010
 8000550:	48000400 	.word	0x48000400
 8000554:	40000800 	.word	0x40000800
 8000558:	20000020 	.word	0x20000020
 800055c:	40012c00 	.word	0x40012c00
 8000560:	40014800 	.word	0x40014800

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fff6 	bl	800155a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f889 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 fcbb 	bl	8000eec <MX_GPIO_Init>
  MX_TIM1_Init();
 8000576:	f000 f8d3 	bl	8000720 <MX_TIM1_Init>
  MX_TIM2_Init();
 800057a:	f000 f971 	bl	8000860 <MX_TIM2_Init>
  MX_TIM3_Init();
 800057e:	f000 f9c3 	bl	8000908 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000582:	f000 fa17 	bl	80009b4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000586:	f000 fb37 	bl	8000bf8 <MX_TIM15_Init>
  MX_TIM16_Init();
 800058a:	f000 fbbb 	bl	8000d04 <MX_TIM16_Init>
  MX_TIM17_Init();
 800058e:	f000 fc33 	bl	8000df8 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000592:	f009 fa0f 	bl	80099b4 <MX_USB_Device_Init>
  MX_TIM8_Init();
 8000596:	f000 fa9b 	bl	8000ad0 <MX_TIM8_Init>
  MX_TIM6_Init();
 800059a:	f000 fa61 	bl	8000a60 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  Feedback feedback = {
 800059e:	2300      	movs	r3, #0
 80005a0:	80bb      	strh	r3, [r7, #4]
 80005a2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80005a6:	80fb      	strh	r3, [r7, #6]
		.ballDetected = 0,
        .delimiter = 0xAAAA
    };

  //ENCODERS
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2); //M1 encoder
 80005a8:	2104      	movs	r1, #4
 80005aa:	4829      	ldr	r0, [pc, #164]	; (8000650 <main+0xec>)
 80005ac:	f004 fa8c 	bl	8004ac8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); //M2 encoder
 80005b0:	2104      	movs	r1, #4
 80005b2:	4828      	ldr	r0, [pc, #160]	; (8000654 <main+0xf0>)
 80005b4:	f004 fa88 	bl	8004ac8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); //M3 encoder
 80005b8:	2104      	movs	r1, #4
 80005ba:	4827      	ldr	r0, [pc, #156]	; (8000658 <main+0xf4>)
 80005bc:	f004 fa84 	bl	8004ac8 <HAL_TIM_Encoder_Start>
  //PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //M2 PWM
 80005c0:	2100      	movs	r1, #0
 80005c2:	4826      	ldr	r0, [pc, #152]	; (800065c <main+0xf8>)
 80005c4:	f004 f8da 	bl	800477c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);    //M1 PWM
 80005c8:	2104      	movs	r1, #4
 80005ca:	4824      	ldr	r0, [pc, #144]	; (800065c <main+0xf8>)
 80005cc:	f004 f8d6 	bl	800477c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);   //M3 PWM
 80005d0:	2100      	movs	r1, #0
 80005d2:	4823      	ldr	r0, [pc, #140]	; (8000660 <main+0xfc>)
 80005d4:	f004 f8d2 	bl	800477c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);   //THROWER PWM
 80005d8:	2104      	movs	r1, #4
 80005da:	4822      	ldr	r0, [pc, #136]	; (8000664 <main+0x100>)
 80005dc:	f004 f8ce 	bl	800477c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);    //SERVO1
 80005e0:	2104      	movs	r1, #4
 80005e2:	4821      	ldr	r0, [pc, #132]	; (8000668 <main+0x104>)
 80005e4:	f004 f8ca 	bl	800477c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);   //SERVO2
 80005e8:	2100      	movs	r1, #0
 80005ea:	4820      	ldr	r0, [pc, #128]	; (800066c <main+0x108>)
 80005ec:	f004 f8c6 	bl	800477c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6); //Timer for motor speed
 80005f0:	481f      	ldr	r0, [pc, #124]	; (8000670 <main+0x10c>)
 80005f2:	f004 f801 	bl	80045f8 <HAL_TIM_Base_Start_IT>

  //Wakes up the thrower
  TIM15->CCR2 = 3150;
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <main+0x110>)
 80005f8:	f640 424e 	movw	r2, #3150	; 0xc4e
 80005fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	UpdateServosAndThrower();
 80005fe:	f7ff feed 	bl	80003dc <UpdateServosAndThrower>
	IRsensor = HAL_GPIO_ReadPin(IR_SENSOR_GPIO_Port, IR_SENSOR_Pin);
 8000602:	2101      	movs	r1, #1
 8000604:	481c      	ldr	r0, [pc, #112]	; (8000678 <main+0x114>)
 8000606:	f001 faab 	bl	8001b60 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	b21a      	sxth	r2, r3
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <main+0x118>)
 8000610:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, IRsensor);
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <main+0x118>)
 8000614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2101      	movs	r1, #1
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f001 fab5 	bl	8001b90 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (isCommandReceived) {
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <main+0x11c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e6      	beq.n	80005fe <main+0x9a>
		isCommandReceived = 0;
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <main+0x11c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]

		EnableMotorDrivers(); //Sends the nsleep signal to motor drivers
 8000636:	f7ff fea1 	bl	800037c <EnableMotorDrivers>
		feedback.ballDetected = IRsensor;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <main+0x118>)
 800063c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000640:	80bb      	strh	r3, [r7, #4]

		CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback));
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f009 fa76 	bl	8009b38 <CDC_Transmit_FS>
	UpdateServosAndThrower();
 800064c:	e7d7      	b.n	80005fe <main+0x9a>
 800064e:	bf00      	nop
 8000650:	2000022c 	.word	0x2000022c
 8000654:	20000278 	.word	0x20000278
 8000658:	200002c4 	.word	0x200002c4
 800065c:	200001e0 	.word	0x200001e0
 8000660:	20000440 	.word	0x20000440
 8000664:	200003a8 	.word	0x200003a8
 8000668:	2000035c 	.word	0x2000035c
 800066c:	200003f4 	.word	0x200003f4
 8000670:	20000310 	.word	0x20000310
 8000674:	40014000 	.word	0x40014000
 8000678:	48001400 	.word	0x48001400
 800067c:	2000048c 	.word	0x2000048c
 8000680:	2000048e 	.word	0x2000048e

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	2238      	movs	r2, #56	; 0x38
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f009 fed0 	bl	800a438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f002 ffbe 	bl	8003628 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80006ac:	2322      	movs	r3, #34	; 0x22
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	2340      	movs	r3, #64	; 0x40
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006ca:	2314      	movs	r3, #20
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f846 	bl	8003770 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006ea:	f000 fc6f 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fb4a 	bl	8003da0 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000712:	f000 fc5b 	bl	8000fcc <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b098      	sub	sp, #96	; 0x60
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000732:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
 8000742:	615a      	str	r2, [r3, #20]
 8000744:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2234      	movs	r2, #52	; 0x34
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f009 fe73 	bl	800a438 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <MX_TIM1_Init+0x138>)
 8000754:	4a41      	ldr	r2, [pc, #260]	; (800085c <MX_TIM1_Init+0x13c>)
 8000756:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000758:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <MX_TIM1_Init+0x138>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <MX_TIM1_Init+0x138>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000764:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <MX_TIM1_Init+0x138>)
 8000766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076c:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <MX_TIM1_Init+0x138>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000772:	4b39      	ldr	r3, [pc, #228]	; (8000858 <MX_TIM1_Init+0x138>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_TIM1_Init+0x138>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800077e:	4836      	ldr	r0, [pc, #216]	; (8000858 <MX_TIM1_Init+0x138>)
 8000780:	f003 ffa4 	bl	80046cc <HAL_TIM_PWM_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fc1f 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800079e:	4619      	mov	r1, r3
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <MX_TIM1_Init+0x138>)
 80007a2:	f005 f887 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007ac:	f000 fc0e 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b8:	2300      	movs	r3, #0
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	4820      	ldr	r0, [pc, #128]	; (8000858 <MX_TIM1_Init+0x138>)
 80007d6:	f004 fb85 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007e0:	f000 fbf4 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e8:	2204      	movs	r2, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	481a      	ldr	r0, [pc, #104]	; (8000858 <MX_TIM1_Init+0x138>)
 80007ee:	f004 fb79 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80007f8:	f000 fbe8 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <MX_TIM1_Init+0x138>)
 800083a:	f005 f8bd 	bl	80059b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000844:	f000 fbc2 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <MX_TIM1_Init+0x138>)
 800084a:	f000 fd3f 	bl	80012cc <HAL_TIM_MspPostInit>

}
 800084e:	bf00      	nop
 8000850:	3760      	adds	r7, #96	; 0x60
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001e0 	.word	0x200001e0
 800085c:	40012c00 	.word	0x40012c00

08000860 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2224      	movs	r2, #36	; 0x24
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f009 fde2 	bl	800a438 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_TIM2_Init+0xa4>)
 8000880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000884:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_TIM2_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_TIM2_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_TIM2_Init+0xa4>)
 8000894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000898:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_TIM2_Init+0xa4>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM2_Init+0xa4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008a6:	2303      	movs	r3, #3
 80008a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008ae:	2301      	movs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008be:	2301      	movs	r3, #1
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM2_Init+0xa4>)
 80008d2:	f004 f853 	bl	800497c <HAL_TIM_Encoder_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80008dc:	f000 fb76 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_TIM2_Init+0xa4>)
 80008ee:	f004 ffe1 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80008f8:	f000 fb68 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000022c 	.word	0x2000022c

08000908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2224      	movs	r2, #36	; 0x24
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f009 fd8e 	bl	800a438 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <MX_TIM3_Init+0xa8>)
 800092a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_TIM3_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_TIM3_Init+0xa4>)
 800093a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800094c:	2303      	movs	r3, #3
 800094e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000978:	f004 f800 	bl	800497c <HAL_TIM_Encoder_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000982:	f000 fb23 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_TIM3_Init+0xa4>)
 8000994:	f004 ff8e 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800099e:	f000 fb15 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3730      	adds	r7, #48	; 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000278 	.word	0x20000278
 80009b0:	40000400 	.word	0x40000400

080009b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2224      	movs	r2, #36	; 0x24
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 fd38 	bl	800a438 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_TIM4_Init+0xa4>)
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <MX_TIM4_Init+0xa8>)
 80009d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_TIM4_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_TIM4_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_TIM4_Init+0xa4>)
 80009e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_TIM4_Init+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM4_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009f8:	2303      	movs	r3, #3
 80009fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a00:	2301      	movs	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a10:	2301      	movs	r3, #1
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_TIM4_Init+0xa4>)
 8000a24:	f003 ffaa 	bl	800497c <HAL_TIM_Encoder_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a2e:	f000 facd 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_TIM4_Init+0xa4>)
 8000a40:	f004 ff38 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a4a:	f000 fabf 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	; 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200002c4 	.word	0x200002c4
 8000a5c:	40000800 	.word	0x40000800

08000a60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_TIM6_Init+0x68>)
 8000a72:	4a16      	ldr	r2, [pc, #88]	; (8000acc <MX_TIM6_Init+0x6c>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_TIM6_Init+0x68>)
 8000a78:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_TIM6_Init+0x68>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_TIM6_Init+0x68>)
 8000a86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_TIM6_Init+0x68>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_TIM6_Init+0x68>)
 8000a94:	f003 fd58 	bl	8004548 <HAL_TIM_Base_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000a9e:	f000 fa95 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_TIM6_Init+0x68>)
 8000ab0:	f004 ff00 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000aba:	f000 fa87 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000310 	.word	0x20000310
 8000acc:	40001000 	.word	0x40001000

08000ad0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b098      	sub	sp, #96	; 0x60
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
 8000af2:	615a      	str	r2, [r3, #20]
 8000af4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2234      	movs	r2, #52	; 0x34
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f009 fc9b 	bl	800a438 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b02:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b04:	4a3b      	ldr	r2, [pc, #236]	; (8000bf4 <MX_TIM8_Init+0x124>)
 8000b06:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 49;
 8000b08:	4b39      	ldr	r3, [pc, #228]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b0a:	2231      	movs	r2, #49	; 0x31
 8000b0c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 8000b14:	4b36      	ldr	r3, [pc, #216]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b16:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b1a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b22:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b28:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b2e:	4830      	ldr	r0, [pc, #192]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b30:	f003 fdcc 	bl	80046cc <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000b3a:	f000 fa47 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4827      	ldr	r0, [pc, #156]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b52:	f004 feaf 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000b5c:	f000 fa36 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b60:	2360      	movs	r3, #96	; 0x60
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b80:	2204      	movs	r2, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	481a      	ldr	r0, [pc, #104]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000b86:	f004 f9ad 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000b90:	f000 fa1c 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000bd2:	f004 fef1 	bl	80059b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000bdc:	f000 f9f6 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <MX_TIM8_Init+0x120>)
 8000be2:	f000 fb73 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000be6:	bf00      	nop
 8000be8:	3760      	adds	r7, #96	; 0x60
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000035c 	.word	0x2000035c
 8000bf4:	40013400 	.word	0x40013400

08000bf8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b098      	sub	sp, #96	; 0x60
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	615a      	str	r2, [r3, #20]
 8000c1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2234      	movs	r2, #52	; 0x34
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f009 fc07 	bl	800a438 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000c2c:	4a34      	ldr	r2, [pc, #208]	; (8000d00 <MX_TIM15_Init+0x108>)
 8000c2e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 49;
 8000c30:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000c32:	2231      	movs	r2, #49	; 0x31
 8000c34:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000c3e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c42:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000c56:	4829      	ldr	r0, [pc, #164]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000c58:	f003 fd38 	bl	80046cc <HAL_TIM_PWM_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 f9b3 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c72:	4619      	mov	r1, r3
 8000c74:	4821      	ldr	r0, [pc, #132]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000c76:	f004 fe1d 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000c80:	f000 f9a4 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c84:	2360      	movs	r3, #96	; 0x60
 8000c86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4814      	ldr	r0, [pc, #80]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000caa:	f004 f91b 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000cb4:	f000 f98a 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000ce0:	f004 fe6a 	bl	80059b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000cea:	f000 f96f 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <MX_TIM15_Init+0x104>)
 8000cf0:	f000 faec 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000cf4:	bf00      	nop
 8000cf6:	3760      	adds	r7, #96	; 0x60
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200003a8 	.word	0x200003a8
 8000d00:	40014000 	.word	0x40014000

08000d04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	; 0x50
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2234      	movs	r2, #52	; 0x34
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f009 fb87 	bl	800a438 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d2c:	4a31      	ldr	r2, [pc, #196]	; (8000df4 <MX_TIM16_Init+0xf0>)
 8000d2e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 49;
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d32:	2231      	movs	r2, #49	; 0x31
 8000d34:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8000d3c:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d3e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d42:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d4a:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d56:	4826      	ldr	r0, [pc, #152]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d58:	f003 fbf6 	bl	8004548 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000d62:	f000 f933 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000d66:	4822      	ldr	r0, [pc, #136]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d68:	f003 fcb0 	bl	80046cc <HAL_TIM_PWM_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000d72:	f000 f92b 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d76:	2360      	movs	r3, #96	; 0x60
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d82:	2300      	movs	r3, #0
 8000d84:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4815      	ldr	r0, [pc, #84]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000d9c:	f004 f8a2 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000da6:	f000 f911 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000dd2:	f004 fdf1 	bl	80059b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000ddc:	f000 f8f6 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <MX_TIM16_Init+0xec>)
 8000de2:	f000 fa73 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000de6:	bf00      	nop
 8000de8:	3750      	adds	r7, #80	; 0x50
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200003f4 	.word	0x200003f4
 8000df4:	40014400 	.word	0x40014400

08000df8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2234      	movs	r2, #52	; 0x34
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f009 fb0d 	bl	800a438 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e20:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <MX_TIM17_Init+0xf0>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e36:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e44:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e4c:	f003 fb7c 	bl	8004548 <HAL_TIM_Base_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000e56:	f000 f8b9 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000e5a:	4822      	ldr	r0, [pc, #136]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e5c:	f003 fc36 	bl	80046cc <HAL_TIM_PWM_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000e66:	f000 f8b1 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6a:	2360      	movs	r3, #96	; 0x60
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e76:	2300      	movs	r3, #0
 8000e78:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4815      	ldr	r0, [pc, #84]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000e90:	f004 f828 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000e9a:	f000 f897 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000ec6:	f004 fd77 	bl	80059b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000ed0:	f000 f87c 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM17_Init+0xec>)
 8000ed6:	f000 f9f9 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000eda:	bf00      	nop
 8000edc:	3750      	adds	r7, #80	; 0x50
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000440 	.word	0x20000440
 8000ee8:	40014800 	.word	0x40014800

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a2e      	ldr	r2, [pc, #184]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|GPIO_PIN_1|M3_DIR_Pin|M1_DIR_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f240 4107 	movw	r1, #1031	; 0x407
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f000 fe1c 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <MX_GPIO_Init+0xd8>)
 8000f5e:	f000 fe17 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IR_SENSOR_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_Pin;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4619      	mov	r1, r3
 8000f74:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <MX_GPIO_Init+0xdc>)
 8000f76:	f000 fc71 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_Pin PA1 M3_DIR_Pin M1_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|GPIO_PIN_1|M3_DIR_Pin|M1_DIR_Pin;
 8000f7a:	f240 4307 	movw	r3, #1031	; 0x407
 8000f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f000 fc61 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_GPIO_Init+0xd8>)
 8000fb2:	f000 fc53 	bl	800185c <HAL_GPIO_Init>

}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	48001400 	.word	0x48001400

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>
	...

08000fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <HAL_TIM_PWM_MspInit+0x80>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10c      	bne.n	800104c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_TIM_PWM_MspInit+0x84>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_TIM_PWM_MspInit+0x84>)
 8001038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800103c:	6613      	str	r3, [r2, #96]	; 0x60
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_TIM_PWM_MspInit+0x84>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800104a:	e022      	b.n	8001092 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <HAL_TIM_PWM_MspInit+0x88>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10c      	bne.n	8001070 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_TIM_PWM_MspInit+0x84>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_TIM_PWM_MspInit+0x84>)
 800105c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001060:	6613      	str	r3, [r2, #96]	; 0x60
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_TIM_PWM_MspInit+0x84>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
}
 800106e:	e010      	b.n	8001092 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_TIM_PWM_MspInit+0x8c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10b      	bne.n	8001092 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_TIM_PWM_MspInit+0x84>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <HAL_TIM_PWM_MspInit+0x84>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6613      	str	r3, [r2, #96]	; 0x60
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_TIM_PWM_MspInit+0x84>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
}
 8001092:	bf00      	nop
 8001094:	371c      	adds	r7, #28
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40012c00 	.word	0x40012c00
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40013400 	.word	0x40013400
 80010ac:	40014000 	.word	0x40014000

080010b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d0:	d146      	bne.n	8001160 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d2:	4b53      	ldr	r3, [pc, #332]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	4a52      	ldr	r2, [pc, #328]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6593      	str	r3, [r2, #88]	; 0x58
 80010de:	4b50      	ldr	r3, [pc, #320]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
 80010e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a46      	ldr	r2, [pc, #280]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC1_M1_Pin;
 800111a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800112c:	2301      	movs	r3, #1
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC1_M1_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f000 fb8f 	bl	800185c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC2_M1_Pin;
 800113e:	2308      	movs	r3, #8
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800114e:	2301      	movs	r3, #1
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC2_M1_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4832      	ldr	r0, [pc, #200]	; (8001224 <HAL_TIM_Encoder_MspInit+0x174>)
 800115a:	f000 fb7f 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800115e:	e05a      	b.n	8001216 <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM3)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a30      	ldr	r2, [pc, #192]	; (8001228 <HAL_TIM_Encoder_MspInit+0x178>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d128      	bne.n	80011bc <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6593      	str	r3, [r2, #88]	; 0x58
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1_M2_Pin|ENC2_M2_Pin;
 800119a:	2330      	movs	r3, #48	; 0x30
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011aa:	2302      	movs	r3, #2
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	4619      	mov	r1, r3
 80011b4:	481b      	ldr	r0, [pc, #108]	; (8001224 <HAL_TIM_Encoder_MspInit+0x174>)
 80011b6:	f000 fb51 	bl	800185c <HAL_GPIO_Init>
}
 80011ba:	e02c      	b.n	8001216 <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM4)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1a      	ldr	r2, [pc, #104]	; (800122c <HAL_TIM_Encoder_MspInit+0x17c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d127      	bne.n	8001216 <HAL_TIM_Encoder_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6593      	str	r3, [r2, #88]	; 0x58
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_TIM_Encoder_MspInit+0x170>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_M3_Pin|ENC2_M3_Pin;
 80011f6:	23c0      	movs	r3, #192	; 0xc0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001206:	2302      	movs	r3, #2
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <HAL_TIM_Encoder_MspInit+0x174>)
 8001212:	f000 fb23 	bl	800185c <HAL_GPIO_Init>
}
 8001216:	bf00      	nop
 8001218:	3738      	adds	r7, #56	; 0x38
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	48000400 	.word	0x48000400
 8001228:	40000400 	.word	0x40000400
 800122c:	40000800 	.word	0x40000800

08001230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_TIM_Base_MspInit+0x8c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d114      	bne.n	800126c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_TIM_Base_MspInit+0x90>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_TIM_Base_MspInit+0x90>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	6593      	str	r3, [r2, #88]	; 0x58
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <HAL_TIM_Base_MspInit+0x90>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2036      	movs	r0, #54	; 0x36
 8001260:	f000 fac7 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001264:	2036      	movs	r0, #54	; 0x36
 8001266:	f000 fade 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800126a:	e022      	b.n	80012b2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_TIM_Base_MspInit+0x94>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10c      	bne.n	8001290 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_TIM_Base_MspInit+0x90>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_TIM_Base_MspInit+0x90>)
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	6613      	str	r3, [r2, #96]	; 0x60
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_TIM_Base_MspInit+0x90>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
}
 800128e:	e010      	b.n	80012b2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <HAL_TIM_Base_MspInit+0x98>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10b      	bne.n	80012b2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_TIM_Base_MspInit+0x90>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_TIM_Base_MspInit+0x90>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6613      	str	r3, [r2, #96]	; 0x60
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_TIM_Base_MspInit+0x90>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40001000 	.word	0x40001000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40014400 	.word	0x40014400
 80012c8:	40014800 	.word	0x40014800

080012cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	; 0x30
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a58      	ldr	r2, [pc, #352]	; (800144c <HAL_TIM_MspPostInit+0x180>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11e      	bne.n	800132c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b58      	ldr	r3, [pc, #352]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a57      	ldr	r2, [pc, #348]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b55      	ldr	r3, [pc, #340]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin|M1_PWM_Pin;
 8001306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001318:	2306      	movs	r3, #6
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f000 fa99 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800132a:	e08a      	b.n	8001442 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM8)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_TIM_MspPostInit+0x188>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d11d      	bne.n	8001372 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a45      	ldr	r2, [pc, #276]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 800134e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001360:	230a      	movs	r3, #10
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	483b      	ldr	r0, [pc, #236]	; (8001458 <HAL_TIM_MspPostInit+0x18c>)
 800136c:	f000 fa76 	bl	800185c <HAL_GPIO_Init>
}
 8001370:	e067      	b.n	8001442 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM15)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a39      	ldr	r2, [pc, #228]	; (800145c <HAL_TIM_MspPostInit+0x190>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d11d      	bne.n	80013b8 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a33      	ldr	r2, [pc, #204]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = THRW_PWM_Pin;
 8001394:	2308      	movs	r3, #8
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80013a4:	2309      	movs	r3, #9
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THRW_PWM_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f000 fa53 	bl	800185c <HAL_GPIO_Init>
}
 80013b6:	e044      	b.n	8001442 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM16)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <HAL_TIM_MspPostInit+0x194>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d11d      	bne.n	80013fe <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f000 fa30 	bl	800185c <HAL_GPIO_Init>
}
 80013fc:	e021      	b.n	8001442 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM17)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_TIM_MspPostInit+0x198>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d11c      	bne.n	8001442 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_TIM_MspPostInit+0x184>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001430:	2301      	movs	r3, #1
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f000 fa0d 	bl	800185c <HAL_GPIO_Init>
}
 8001442:	bf00      	nop
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012c00 	.word	0x40012c00
 8001450:	40021000 	.word	0x40021000
 8001454:	40013400 	.word	0x40013400
 8001458:	48000400 	.word	0x48000400
 800145c:	40014000 	.word	0x40014000
 8001460:	40014400 	.word	0x40014400
 8001464:	40014800 	.word	0x40014800

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 f8a4 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <USB_LP_IRQHandler+0x10>)
 80014c2:	f000 fc84 	bl	8001dce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20001138 	.word	0x20001138

080014d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM6_DAC_IRQHandler+0x10>)
 80014d6:	f003 fb85 	bl	8004be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000310 	.word	0x20000310

080014e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800150a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <LoopForever+0x6>)
  ldr r1, =_edata
 800150e:	490e      	ldr	r1, [pc, #56]	; (8001548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <LoopForever+0xe>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001524:	4c0b      	ldr	r4, [pc, #44]	; (8001554 <LoopForever+0x16>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001532:	f7ff ffd7 	bl	80014e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f008 ff4d 	bl	800a3d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800153a:	f7ff f813 	bl	8000564 <main>

0800153e <LoopForever>:

LoopForever:
    b LoopForever
 800153e:	e7fe      	b.n	800153e <LoopForever>
  ldr   r0, =_estack
 8001540:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 800154c:	0800a4c0 	.word	0x0800a4c0
  ldr r2, =_sbss
 8001550:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8001554:	2000164c 	.word	0x2000164c

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>

0800155a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f939 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f80e 	bl	800158c <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	e001      	b.n	8001580 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800157c:	f7ff fd2c 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001580:	79fb      	ldrb	r3, [r7, #7]

}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_InitTick+0x68>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d022      	beq.n	80015e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_InitTick+0x6c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_InitTick+0x68>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f944 	bl	8001842 <HAL_SYSTICK_Config>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10f      	bne.n	80015e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	d809      	bhi.n	80015da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c6:	2200      	movs	r2, #0
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	f04f 30ff 	mov.w	r0, #4294967295
 80015ce:	f000 f910 	bl	80017f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_InitTick+0x70>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e007      	b.n	80015ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e004      	b.n	80015ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e001      	b.n	80015ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000048 	.word	0x20000048
 80015f8:	20000040 	.word	0x20000040
 80015fc:	20000044 	.word	0x20000044

08001600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_IncTick+0x1c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_IncTick+0x20>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4413      	add	r3, r2
 800160e:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_IncTick+0x1c>)
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	20000490 	.word	0x20000490
 8001620:	20000048 	.word	0x20000048

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000490 	.word	0x20000490

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff8e 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff29 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff40 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff90 	bl	8001730 <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5f 	bl	80016dc <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff33 	bl	80016a0 <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffa4 	bl	8001798 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800186a:	e15a      	b.n	8001b22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 814c 	beq.w	8001b1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d005      	beq.n	800189c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001898:	2b02      	cmp	r3, #2
 800189a:	d130      	bne.n	80018fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018d2:	2201      	movs	r2, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f003 0201 	and.w	r2, r3, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b03      	cmp	r3, #3
 8001908:	d017      	beq.n	800193a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d123      	bne.n	800198e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	6939      	ldr	r1, [r7, #16]
 800198a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0203 	and.w	r2, r3, #3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80a6 	beq.w	8001b1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d0:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <HAL_GPIO_Init+0x2e4>)
 80019d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d4:	4a5a      	ldr	r2, [pc, #360]	; (8001b40 <HAL_GPIO_Init+0x2e4>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6613      	str	r3, [r2, #96]	; 0x60
 80019dc:	4b58      	ldr	r3, [pc, #352]	; (8001b40 <HAL_GPIO_Init+0x2e4>)
 80019de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e8:	4a56      	ldr	r2, [pc, #344]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a12:	d01f      	beq.n	8001a54 <HAL_GPIO_Init+0x1f8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <HAL_GPIO_Init+0x2ec>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d019      	beq.n	8001a50 <HAL_GPIO_Init+0x1f4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4b      	ldr	r2, [pc, #300]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_GPIO_Init+0x1f0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <HAL_GPIO_Init+0x2f4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00d      	beq.n	8001a48 <HAL_GPIO_Init+0x1ec>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a49      	ldr	r2, [pc, #292]	; (8001b54 <HAL_GPIO_Init+0x2f8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d007      	beq.n	8001a44 <HAL_GPIO_Init+0x1e8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a48      	ldr	r2, [pc, #288]	; (8001b58 <HAL_GPIO_Init+0x2fc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_GPIO_Init+0x1e4>
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	e00a      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a40:	2306      	movs	r3, #6
 8001a42:	e008      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a44:	2304      	movs	r3, #4
 8001a46:	e006      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e004      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a54:	2300      	movs	r3, #0
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	4093      	lsls	r3, r2
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a66:	4937      	ldr	r1, [pc, #220]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a74:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a98:	4a30      	ldr	r2, [pc, #192]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ac2:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b16:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f ae9d 	bne.w	800186c <HAL_GPIO_Init+0x10>
  }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48001000 	.word	0x48001000
 8001b58:	48001400 	.word	0x48001400
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e001      	b.n	8001b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	af06      	add	r7, sp, #24
 8001bc6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0d7      	b.n	8001d82 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f008 f8ee 	bl	8009dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2203      	movs	r2, #3
 8001bf0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 ffda 	bl	8005bb2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e04c      	b.n	8001c9e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	3301      	adds	r3, #1
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	b298      	uxth	r0, r3
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	3336      	adds	r3, #54	; 0x36
 8001c42:	4602      	mov	r2, r0
 8001c44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	3303      	adds	r3, #3
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	3338      	adds	r3, #56	; 0x38
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	333c      	adds	r3, #60	; 0x3c
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3340      	adds	r3, #64	; 0x40
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3ad      	bcc.n	8001c04 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e044      	b.n	8001d38 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	3301      	adds	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3b5      	bcc.n	8001cae <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	687e      	ldr	r6, [r7, #4]
 8001d4a:	466d      	mov	r5, sp
 8001d4c:	f106 0410 	add.w	r4, r6, #16
 8001d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	602b      	str	r3, [r5, #0]
 8001d58:	1d33      	adds	r3, r6, #4
 8001d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	f003 ff43 	bl	8005be8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f001 fc29 	bl	80035d2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_PCD_Start+0x16>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e012      	b.n	8001dc6 <HAL_PCD_Start+0x3c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 fee9 	bl	8005b84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f006 f902 	bl	8007fc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f006 f907 	bl	8007fee <USB_ReadInterrupts>
 8001de0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fb26 	bl	800243e <PCD_EP_ISR_Handler>

    return;
 8001df2:	e110      	b.n	8002016 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d013      	beq.n	8001e26 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e10:	b292      	uxth	r2, r2
 8001e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f008 f867 	bl	8009eea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8fc 	bl	800201c <HAL_PCD_SetAddress>

    return;
 8001e24:	e0f7      	b.n	8002016 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00c      	beq.n	8001e4a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e42:	b292      	uxth	r2, r2
 8001e44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e48:	e0e5      	b.n	8002016 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00c      	beq.n	8001e6e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e66:	b292      	uxth	r2, r2
 8001e68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e6c:	e0d3      	b.n	8002016 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d034      	beq.n	8001ee2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0204 	bic.w	r2, r2, #4
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0208 	bic.w	r2, r2, #8
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f008 fa09 	bl	800a2d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f008 f84a 	bl	8009f5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eda:	b292      	uxth	r2, r2
 8001edc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ee0:	e099      	b.n	8002016 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d027      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0208 	orr.w	r2, r2, #8
 8001efe:	b292      	uxth	r2, r2
 8001f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f16:	b292      	uxth	r2, r2
 8001f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0204 	orr.w	r2, r2, #4
 8001f2e:	b292      	uxth	r2, r2
 8001f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f007 fff7 	bl	8009f28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f3a:	e06c      	b.n	8002016 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d040      	beq.n	8001fc8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f58:	b292      	uxth	r2, r2
 8001f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d12b      	bne.n	8001fc0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0204 	orr.w	r2, r2, #4
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0208 	orr.w	r2, r2, #8
 8001f92:	b292      	uxth	r2, r2
 8001f94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f008 f98b 	bl	800a2d4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001fbe:	e02a      	b.n	8002016 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f007 ffb1 	bl	8009f28 <HAL_PCD_SuspendCallback>
    return;
 8001fc6:	e026      	b.n	8002016 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00f      	beq.n	8001ff2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fe4:	b292      	uxth	r2, r2
 8001fe6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f007 ff6f 	bl	8009ece <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ff0:	e011      	b.n	8002016 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002004:	b29a      	uxth	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800200e:	b292      	uxth	r2, r2
 8002010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002014:	bf00      	nop
  }
}
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_PCD_SetAddress+0x1a>
 8002032:	2302      	movs	r3, #2
 8002034:	e013      	b.n	800205e <HAL_PCD_SetAddress+0x42>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f005 ffa2 	bl	8007f98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	4608      	mov	r0, r1
 8002070:	4611      	mov	r1, r2
 8002072:	461a      	mov	r2, r3
 8002074:	4603      	mov	r3, r0
 8002076:	70fb      	strb	r3, [r7, #3]
 8002078:	460b      	mov	r3, r1
 800207a:	803b      	strh	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da0e      	bge.n	80020aa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	705a      	strb	r2, [r3, #1]
 80020a8:	e00e      	b.n	80020c8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 0207 	and.w	r2, r3, #7
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020d4:	883a      	ldrh	r2, [r7, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	78ba      	ldrb	r2, [r7, #2]
 80020de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020f2:	78bb      	ldrb	r3, [r7, #2]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d102      	bne.n	80020fe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_PCD_EP_Open+0xa6>
 8002108:	2302      	movs	r3, #2
 800210a:	e00e      	b.n	800212a <HAL_PCD_EP_Open+0xc4>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	4618      	mov	r0, r3
 800211c:	f003 fd86 	bl	8005c2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002128:	7afb      	ldrb	r3, [r7, #11]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800213e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002142:	2b00      	cmp	r3, #0
 8002144:	da0e      	bge.n	8002164 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	705a      	strb	r2, [r3, #1]
 8002162:	e00e      	b.n	8002182 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	f003 0207 	and.w	r2, r3, #7
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	b2da      	uxtb	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_PCD_EP_Close+0x6a>
 8002198:	2302      	movs	r3, #2
 800219a:	e00e      	b.n	80021ba <HAL_PCD_EP_Close+0x88>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68f9      	ldr	r1, [r7, #12]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 f8d2 	bl	8006354 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	460b      	mov	r3, r1
 80021d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d2:	7afb      	ldrb	r3, [r7, #11]
 80021d4:	f003 0207 	and.w	r2, r3, #7
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2200      	movs	r2, #0
 8002200:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	b2da      	uxtb	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	2b00      	cmp	r3, #0
 8002216:	d106      	bne.n	8002226 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6979      	ldr	r1, [r7, #20]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fa85 	bl	800672e <USB_EPStartXfer>
 8002224:	e005      	b.n	8002232 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6979      	ldr	r1, [r7, #20]
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fa7e 	bl	800672e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	f003 0207 	and.w	r2, r3, #7
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	460b      	mov	r3, r1
 800227a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2201      	movs	r2, #1
 80022b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b8:	7afb      	ldrb	r3, [r7, #11]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6979      	ldr	r1, [r7, #20]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 fa2a 	bl	800672e <USB_EPStartXfer>
 80022da:	e005      	b.n	80022e8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6979      	ldr	r1, [r7, #20]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 fa23 	bl	800672e <USB_EPStartXfer>
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 0207 	and.w	r2, r3, #7
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d901      	bls.n	8002310 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e03e      	b.n	800238e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da0e      	bge.n	8002336 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	705a      	strb	r2, [r3, #1]
 8002334:	e00c      	b.n	8002350 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_PCD_EP_SetStall+0x7e>
 800236c:	2302      	movs	r3, #2
 800236e:	e00e      	b.n	800238e <HAL_PCD_EP_SetStall+0x9c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	4618      	mov	r0, r3
 8002380:	f005 fd0b 	bl	8007d9a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	f003 020f 	and.w	r2, r3, #15
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d901      	bls.n	80023b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e040      	b.n	8002436 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	da0e      	bge.n	80023da <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	705a      	strb	r2, [r3, #1]
 80023d8:	e00e      	b.n	80023f8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	f003 0207 	and.w	r2, r3, #7
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_PCD_EP_ClrStall+0x82>
 8002414:	2302      	movs	r3, #2
 8002416:	e00e      	b.n	8002436 <HAL_PCD_EP_ClrStall+0xa0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68f9      	ldr	r1, [r7, #12]
 8002426:	4618      	mov	r0, r3
 8002428:	f005 fd08 	bl	8007e3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b096      	sub	sp, #88	; 0x58
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002446:	e39c      	b.n	8002b82 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002450:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002454:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002462:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 815e 	bne.w	8002728 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800246c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d150      	bne.n	800251a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002488:	81fb      	strh	r3, [r7, #14]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002498:	b29b      	uxth	r3, r3
 800249a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3328      	adds	r3, #40	; 0x28
 80024a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	441a      	add	r2, r3
 80024d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024d8:	2100      	movs	r1, #0
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f007 fcdd 	bl	8009e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 834a 	beq.w	8002b82 <PCD_EP_ISR_Handler+0x744>
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8345 	bne.w	8002b82 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002504:	b2da      	uxtb	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b292      	uxth	r2, r2
 800250c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002518:	e333      	b.n	8002b82 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002520:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800252c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002534:	2b00      	cmp	r3, #0
 8002536:	d032      	beq.n	800259e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	4413      	add	r3, r2
 8002552:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800255c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800255e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800256a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800256c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800256e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002570:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002572:	b29b      	uxth	r3, r3
 8002574:	f005 fd8d 	bl	8008092 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29a      	uxth	r2, r3
 8002580:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002584:	4013      	ands	r3, r2
 8002586:	823b      	strh	r3, [r7, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	8a3a      	ldrh	r2, [r7, #16]
 800258e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002592:	b292      	uxth	r2, r2
 8002594:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f007 fc52 	bl	8009e40 <HAL_PCD_SetupStageCallback>
 800259c:	e2f1      	b.n	8002b82 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800259e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f280 82ed 	bge.w	8002b82 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025b4:	4013      	ands	r3, r2
 80025b6:	83fb      	strh	r3, [r7, #30]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	8bfa      	ldrh	r2, [r7, #30]
 80025be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025c2:	b292      	uxth	r2, r2
 80025c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d019      	beq.n	800262a <PCD_EP_ISR_Handler+0x1ec>
 80025f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002604:	6959      	ldr	r1, [r3, #20]
 8002606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002608:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800260a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800260e:	b29b      	uxth	r3, r3
 8002610:	f005 fd3f 	bl	8008092 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	441a      	add	r2, r3
 800261e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002620:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002622:	2100      	movs	r1, #0
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f007 fc1d 	bl	8009e64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 82a3 	bne.w	8002b82 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4413      	add	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b3e      	cmp	r3, #62	; 0x3e
 8002662:	d918      	bls.n	8002696 <PCD_EP_ISR_Handler+0x258>
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	647b      	str	r3, [r7, #68]	; 0x44
 800266c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <PCD_EP_ISR_Handler+0x240>
 8002678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267a:	3b01      	subs	r3, #1
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
 800267e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002680:	b29b      	uxth	r3, r3
 8002682:	029b      	lsls	r3, r3, #10
 8002684:	b29b      	uxth	r3, r3
 8002686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268e:	b29a      	uxth	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	e029      	b.n	80026ea <PCD_EP_ISR_Handler+0x2ac>
 8002696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d112      	bne.n	80026c4 <PCD_EP_ISR_Handler+0x286>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	801a      	strh	r2, [r3, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026bc:	b29a      	uxth	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	e012      	b.n	80026ea <PCD_EP_ISR_Handler+0x2ac>
 80026c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	647b      	str	r3, [r7, #68]	; 0x44
 80026cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <PCD_EP_ISR_Handler+0x2a0>
 80026d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026da:	3301      	adds	r3, #1
 80026dc:	647b      	str	r3, [r7, #68]	; 0x44
 80026de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fa:	827b      	strh	r3, [r7, #18]
 80026fc:	8a7b      	ldrh	r3, [r7, #18]
 80026fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002702:	827b      	strh	r3, [r7, #18]
 8002704:	8a7b      	ldrh	r3, [r7, #18]
 8002706:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800270a:	827b      	strh	r3, [r7, #18]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	8a7b      	ldrh	r3, [r7, #18]
 8002712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800271a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002722:	b29b      	uxth	r3, r3
 8002724:	8013      	strh	r3, [r2, #0]
 8002726:	e22c      	b.n	8002b82 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800273c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002740:	2b00      	cmp	r3, #0
 8002742:	f280 80f6 	bge.w	8002932 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29a      	uxth	r2, r3
 8002758:	f640 738f 	movw	r3, #3983	; 0xf8f
 800275c:	4013      	ands	r3, r2
 800275e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002774:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002778:	b292      	uxth	r2, r2
 800277a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800277c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002794:	7b1b      	ldrb	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d123      	bne.n	80027e2 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80027c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 808e 	beq.w	80028e8 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d2:	6959      	ldr	r1, [r3, #20]
 80027d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d6:	88da      	ldrh	r2, [r3, #6]
 80027d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027dc:	f005 fc59 	bl	8008092 <USB_ReadPMA>
 80027e0:	e082      	b.n	80028e8 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e4:	78db      	ldrb	r3, [r3, #3]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d10a      	bne.n	8002800 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027ee:	461a      	mov	r2, r3
 80027f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f9d3 	bl	8002b9e <HAL_PCD_EP_DB_Receive>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80027fe:	e073      	b.n	80028e8 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	441a      	add	r2, r3
 800282c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002840:	b29b      	uxth	r3, r3
 8002842:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d022      	beq.n	80028a4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	4413      	add	r3, r2
 8002878:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002882:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002886:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800288a:	2b00      	cmp	r3, #0
 800288c:	d02c      	beq.n	80028e8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002894:	6959      	ldr	r1, [r3, #20]
 8002896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002898:	891a      	ldrh	r2, [r3, #8]
 800289a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800289e:	f005 fbf8 	bl	8008092 <USB_ReadPMA>
 80028a2:	e021      	b.n	80028e8 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80028cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028da:	6959      	ldr	r1, [r3, #20]
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	895a      	ldrh	r2, [r3, #10]
 80028e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028e4:	f005 fbd5 	bl	8008092 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028f0:	441a      	add	r2, r3
 80028f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028fe:	441a      	add	r2, r3
 8002900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002902:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <PCD_EP_ISR_Handler+0x4da>
 800290c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	429a      	cmp	r2, r3
 8002916:	d206      	bcs.n	8002926 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	4619      	mov	r1, r3
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f007 faa0 	bl	8009e64 <HAL_PCD_DataOutStageCallback>
 8002924:	e005      	b.n	8002932 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800292c:	4618      	mov	r0, r3
 800292e:	f003 fefe 	bl	800672e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002932:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8121 	beq.w	8002b82 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002940:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	441a      	add	r2, r3
 8002980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298c:	b29b      	uxth	r3, r3
 800298e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002992:	78db      	ldrb	r3, [r3, #3]
 8002994:	2b02      	cmp	r3, #2
 8002996:	f000 80a2 	beq.w	8002ade <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80029a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a2:	7b1b      	ldrb	r3, [r3, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8093 	beq.w	8002ad0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d046      	beq.n	8002a44 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d126      	bne.n	8002a0c <PCD_EP_ISR_Handler+0x5ce>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	4413      	add	r3, r2
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
 80029d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	00da      	lsls	r2, r3, #3
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	4413      	add	r3, r2
 80029e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	801a      	strh	r2, [r3, #0]
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	e061      	b.n	8002ad0 <PCD_EP_ISR_Handler+0x692>
 8002a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d15d      	bne.n	8002ad0 <PCD_EP_ISR_Handler+0x692>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	4413      	add	r3, r2
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	00da      	lsls	r2, r3, #3
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	4413      	add	r3, r2
 8002a36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	e045      	b.n	8002ad0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d126      	bne.n	8002aa0 <PCD_EP_ISR_Handler+0x662>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a66:	4413      	add	r3, r2
 8002a68:	637b      	str	r3, [r7, #52]	; 0x34
 8002a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	00da      	lsls	r2, r3, #3
 8002a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a72:	4413      	add	r3, r2
 8002a74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	801a      	strh	r2, [r3, #0]
 8002a9e:	e017      	b.n	8002ad0 <PCD_EP_ISR_Handler+0x692>
 8002aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa2:	785b      	ldrb	r3, [r3, #1]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d113      	bne.n	8002ad0 <PCD_EP_ISR_Handler+0x692>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab6:	4413      	add	r3, r2
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	00da      	lsls	r2, r3, #3
 8002ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	2200      	movs	r2, #0
 8002ace:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f007 f9df 	bl	8009e9a <HAL_PCD_DataInStageCallback>
 8002adc:	e051      	b.n	8002b82 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ade:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d144      	bne.n	8002b74 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d907      	bls.n	8002b2e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b26:	1ad2      	subs	r2, r2, r3
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	619a      	str	r2, [r3, #24]
 8002b2c:	e002      	b.n	8002b34 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f007 f9a9 	bl	8009e9a <HAL_PCD_DataInStageCallback>
 8002b48:	e01b      	b.n	8002b82 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b52:	441a      	add	r2, r3
 8002b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b56:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b60:	441a      	add	r2, r3
 8002b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b64:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 fdde 	bl	800672e <USB_EPStartXfer>
 8002b72:	e006      	b.n	8002b82 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b74:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f917 	bl	8002db0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f6ff ac5a 	blt.w	8002448 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3758      	adds	r7, #88	; 0x58
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b088      	sub	sp, #32
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d07c      	beq.n	8002cb0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	8b7b      	ldrh	r3, [r7, #26]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d306      	bcc.n	8002bf4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	8b7b      	ldrh	r3, [r7, #26]
 8002bec:	1ad2      	subs	r2, r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	619a      	str	r2, [r3, #24]
 8002bf2:	e002      	b.n	8002bfa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d123      	bne.n	8002c4a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1c:	833b      	strh	r3, [r7, #24]
 8002c1e:	8b3b      	ldrh	r3, [r7, #24]
 8002c20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c24:	833b      	strh	r3, [r7, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	441a      	add	r2, r3
 8002c34:	8b3b      	ldrh	r3, [r7, #24]
 8002c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01f      	beq.n	8002c94 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	82fb      	strh	r3, [r7, #22]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	441a      	add	r2, r3
 8002c7e:	8afb      	ldrh	r3, [r7, #22]
 8002c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c94:	8b7b      	ldrh	r3, [r7, #26]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8085 	beq.w	8002da6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	6959      	ldr	r1, [r3, #20]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	891a      	ldrh	r2, [r3, #8]
 8002ca8:	8b7b      	ldrh	r3, [r7, #26]
 8002caa:	f005 f9f2 	bl	8008092 <USB_ReadPMA>
 8002cae:	e07a      	b.n	8002da6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	8b7b      	ldrh	r3, [r7, #26]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d306      	bcc.n	8002cee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	699a      	ldr	r2, [r3, #24]
 8002ce4:	8b7b      	ldrh	r3, [r7, #26]
 8002ce6:	1ad2      	subs	r2, r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	619a      	str	r2, [r3, #24]
 8002cec:	e002      	b.n	8002cf4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d123      	bne.n	8002d44 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	83fb      	strh	r3, [r7, #30]
 8002d18:	8bfb      	ldrh	r3, [r7, #30]
 8002d1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d1e:	83fb      	strh	r3, [r7, #30]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	441a      	add	r2, r3
 8002d2e:	8bfb      	ldrh	r3, [r7, #30]
 8002d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11f      	bne.n	8002d8e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d68:	83bb      	strh	r3, [r7, #28]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	441a      	add	r2, r3
 8002d78:	8bbb      	ldrh	r3, [r7, #28]
 8002d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d8e:	8b7b      	ldrh	r3, [r7, #26]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6959      	ldr	r1, [r3, #20]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	895a      	ldrh	r2, [r3, #10]
 8002da0:	8b7b      	ldrh	r3, [r7, #26]
 8002da2:	f005 f976 	bl	8008092 <USB_ReadPMA>
    }
  }

  return count;
 8002da6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b0a2      	sub	sp, #136	; 0x88
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 81c5 	beq.w	8003154 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d907      	bls.n	8002e0e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e06:	1ad2      	subs	r2, r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	619a      	str	r2, [r3, #24]
 8002e0c:	e002      	b.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f040 80b9 	bne.w	8002f90 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d126      	bne.n	8002e74 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	4413      	add	r3, r2
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	00da      	lsls	r2, r3, #3
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	4413      	add	r3, r2
 8002e48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	801a      	strh	r2, [r3, #0]
 8002e72:	e01a      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d116      	bne.n	8002eaa <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	4413      	add	r3, r2
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	00da      	lsls	r2, r3, #3
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	623b      	str	r3, [r7, #32]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d126      	bne.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x156>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4413      	add	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	00da      	lsls	r2, r3, #3
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	e017      	b.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	785b      	ldrb	r3, [r3, #1]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d113      	bne.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	623b      	str	r3, [r7, #32]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	00da      	lsls	r2, r3, #3
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2200      	movs	r2, #0
 8002f34:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f006 ffac 	bl	8009e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 82d2 	beq.w	80034f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f68:	827b      	strh	r3, [r7, #18]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	8a7b      	ldrh	r3, [r7, #18]
 8002f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	8013      	strh	r3, [r2, #0]
 8002f8e:	e2b0      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d021      	beq.n	8002fde <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 8284 	bne.w	80034f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ff2:	441a      	add	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003000:	441a      	add	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	429a      	cmp	r2, r3
 8003010:	d309      	bcc.n	8003026 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6a1a      	ldr	r2, [r3, #32]
 800301c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301e:	1ad2      	subs	r2, r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	621a      	str	r2, [r3, #32]
 8003024:	e015      	b.n	8003052 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800302e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800303c:	e009      	b.n	8003052 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d155      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x356>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	4413      	add	r3, r2
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	00da      	lsls	r2, r3, #3
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	4413      	add	r3, r2
 800307c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
 8003082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003084:	2b3e      	cmp	r3, #62	; 0x3e
 8003086:	d916      	bls.n	80030b6 <HAL_PCD_EP_DB_Transmit+0x306>
 8003088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	64bb      	str	r3, [r7, #72]	; 0x48
 800308e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309a:	3b01      	subs	r3, #1
 800309c:	64bb      	str	r3, [r7, #72]	; 0x48
 800309e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	e043      	b.n	800313e <HAL_PCD_EP_DB_Transmit+0x38e>
 80030b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d112      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x332>
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	801a      	strh	r2, [r3, #0]
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030da:	b29a      	uxth	r2, r3
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	e02d      	b.n	800313e <HAL_PCD_EP_DB_Transmit+0x38e>
 80030e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x348>
 80030f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f4:	3301      	adds	r3, #1
 80030f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	029b      	lsls	r3, r3, #10
 80030fe:	b29a      	uxth	r2, r3
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	801a      	strh	r2, [r3, #0]
 8003104:	e01b      	b.n	800313e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d117      	bne.n	800313e <HAL_PCD_EP_DB_Transmit+0x38e>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	643b      	str	r3, [r7, #64]	; 0x40
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311c:	b29b      	uxth	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	4413      	add	r3, r2
 8003124:	643b      	str	r3, [r7, #64]	; 0x40
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	00da      	lsls	r2, r3, #3
 800312c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312e:	4413      	add	r3, r2
 8003130:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003138:	b29a      	uxth	r2, r3
 800313a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6959      	ldr	r1, [r3, #20]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	891a      	ldrh	r2, [r3, #8]
 800314a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314c:	b29b      	uxth	r3, r3
 800314e:	f004 ff5e 	bl	800800e <USB_WritePMA>
 8003152:	e1ce      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800315c:	b29b      	uxth	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	4413      	add	r3, r2
 800316e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003178:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003184:	429a      	cmp	r2, r3
 8003186:	d307      	bcc.n	8003198 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003190:	1ad2      	subs	r2, r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	619a      	str	r2, [r3, #24]
 8003196:	e002      	b.n	800319e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 80c4 	bne.w	8003330 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d126      	bne.n	80031fe <HAL_PCD_EP_DB_Transmit+0x44e>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031c4:	4413      	add	r3, r2
 80031c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	00da      	lsls	r2, r3, #3
 80031ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031d6:	667b      	str	r3, [r7, #100]	; 0x64
 80031d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031fa:	801a      	strh	r2, [r3, #0]
 80031fc:	e01a      	b.n	8003234 <HAL_PCD_EP_DB_Transmit+0x484>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	785b      	ldrb	r3, [r3, #1]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d116      	bne.n	8003234 <HAL_PCD_EP_DB_Transmit+0x484>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	673b      	str	r3, [r7, #112]	; 0x70
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003214:	b29b      	uxth	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800321a:	4413      	add	r3, r2
 800321c:	673b      	str	r3, [r7, #112]	; 0x70
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	00da      	lsls	r2, r3, #3
 8003224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003226:	4413      	add	r3, r2
 8003228:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800322c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800322e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003230:	2200      	movs	r2, #0
 8003232:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	67fb      	str	r3, [r7, #124]	; 0x7c
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	785b      	ldrb	r3, [r3, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d12f      	bne.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800325a:	4413      	add	r3, r2
 800325c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	00da      	lsls	r2, r3, #3
 8003266:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800326a:	4413      	add	r3, r2
 800326c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003280:	b29a      	uxth	r2, r3
 8003282:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003298:	b29a      	uxth	r2, r3
 800329a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800329e:	801a      	strh	r2, [r3, #0]
 80032a0:	e017      	b.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x522>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d113      	bne.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x522>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032b8:	4413      	add	r3, r2
 80032ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	00da      	lsls	r2, r3, #3
 80032c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032c4:	4413      	add	r3, r2
 80032c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80032cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ce:	2200      	movs	r2, #0
 80032d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	4619      	mov	r1, r3
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f006 fdde 	bl	8009e9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 8104 	bne.w	80034f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800331a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800331e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003322:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332a:	b29b      	uxth	r3, r3
 800332c:	8013      	strh	r3, [r2, #0]
 800332e:	e0e0      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d121      	bne.n	800337e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003354:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	441a      	add	r2, r3
 8003366:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800336a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337a:	b29b      	uxth	r3, r3
 800337c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003384:	2b01      	cmp	r3, #1
 8003386:	f040 80b4 	bne.w	80034f2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003392:	441a      	add	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033a0:	441a      	add	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d309      	bcc.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033be:	1ad2      	subs	r2, r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	621a      	str	r2, [r3, #32]
 80033c4:	e015      	b.n	80033f2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80033ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033dc:	e009      	b.n	80033f2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	663b      	str	r3, [r7, #96]	; 0x60
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d155      	bne.n	80034ac <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	65bb      	str	r3, [r7, #88]	; 0x58
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003414:	4413      	add	r3, r2
 8003416:	65bb      	str	r3, [r7, #88]	; 0x58
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	00da      	lsls	r2, r3, #3
 800341e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003420:	4413      	add	r3, r2
 8003422:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003426:	657b      	str	r3, [r7, #84]	; 0x54
 8003428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342a:	2b3e      	cmp	r3, #62	; 0x3e
 800342c:	d916      	bls.n	800345c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800342e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	677b      	str	r3, [r7, #116]	; 0x74
 8003434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <HAL_PCD_EP_DB_Transmit+0x694>
 800343e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003440:	3b01      	subs	r3, #1
 8003442:	677b      	str	r3, [r7, #116]	; 0x74
 8003444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003446:	b29b      	uxth	r3, r3
 8003448:	029b      	lsls	r3, r3, #10
 800344a:	b29b      	uxth	r3, r3
 800344c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003454:	b29a      	uxth	r2, r3
 8003456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003458:	801a      	strh	r2, [r3, #0]
 800345a:	e040      	b.n	80034de <HAL_PCD_EP_DB_Transmit+0x72e>
 800345c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345e:	2b00      	cmp	r3, #0
 8003460:	d112      	bne.n	8003488 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800346c:	b29a      	uxth	r2, r3
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003480:	b29a      	uxth	r2, r3
 8003482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003484:	801a      	strh	r2, [r3, #0]
 8003486:	e02a      	b.n	80034de <HAL_PCD_EP_DB_Transmit+0x72e>
 8003488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	677b      	str	r3, [r7, #116]	; 0x74
 800348e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349a:	3301      	adds	r3, #1
 800349c:	677b      	str	r3, [r7, #116]	; 0x74
 800349e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	029b      	lsls	r3, r3, #10
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a8:	801a      	strh	r2, [r3, #0]
 80034aa:	e018      	b.n	80034de <HAL_PCD_EP_DB_Transmit+0x72e>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	785b      	ldrb	r3, [r3, #1]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d114      	bne.n	80034de <HAL_PCD_EP_DB_Transmit+0x72e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c2:	4413      	add	r3, r2
 80034c4:	663b      	str	r3, [r7, #96]	; 0x60
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00da      	lsls	r2, r3, #3
 80034cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ce:	4413      	add	r3, r2
 80034d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d8:	b29a      	uxth	r2, r3
 80034da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6959      	ldr	r1, [r3, #20]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	895a      	ldrh	r2, [r3, #10]
 80034ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f004 fd8e 	bl	800800e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350c:	823b      	strh	r3, [r7, #16]
 800350e:	8a3b      	ldrh	r3, [r7, #16]
 8003510:	f083 0310 	eor.w	r3, r3, #16
 8003514:	823b      	strh	r3, [r7, #16]
 8003516:	8a3b      	ldrh	r3, [r7, #16]
 8003518:	f083 0320 	eor.w	r3, r3, #32
 800351c:	823b      	strh	r3, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	8a3b      	ldrh	r3, [r7, #16]
 800352e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353e:	b29b      	uxth	r3, r3
 8003540:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3788      	adds	r7, #136	; 0x88
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	817b      	strh	r3, [r7, #10]
 800355a:	4613      	mov	r3, r2
 800355c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800355e:	897b      	ldrh	r3, [r7, #10]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e009      	b.n	8003596 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003582:	897a      	ldrh	r2, [r7, #10]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003596:	893b      	ldrh	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	80da      	strh	r2, [r3, #6]
 80035aa:	e00b      	b.n	80035c4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2201      	movs	r2, #1
 80035b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	b29a      	uxth	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800360a:	b29b      	uxth	r3, r3
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d141      	bne.n	80036ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003636:	4b4b      	ldr	r3, [pc, #300]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003642:	d131      	bne.n	80036a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003644:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364a:	4a46      	ldr	r2, [pc, #280]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003650:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003654:	4b43      	ldr	r3, [pc, #268]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800365c:	4a41      	ldr	r2, [pc, #260]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003662:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003664:	4b40      	ldr	r3, [pc, #256]	; (8003768 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2232      	movs	r2, #50	; 0x32
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	4a3f      	ldr	r2, [pc, #252]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	0c9b      	lsrs	r3, r3, #18
 8003676:	3301      	adds	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800367a:	e002      	b.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3b01      	subs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d102      	bne.n	8003696 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f2      	bne.n	800367c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003696:	4b33      	ldr	r3, [pc, #204]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d158      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e057      	b.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036a8:	4b2e      	ldr	r3, [pc, #184]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ae:	4a2d      	ldr	r2, [pc, #180]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036b8:	e04d      	b.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c0:	d141      	bne.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036c2:	4b28      	ldr	r3, [pc, #160]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ce:	d131      	bne.n	8003734 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036d6:	4a23      	ldr	r2, [pc, #140]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e0:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036e8:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2232      	movs	r2, #50	; 0x32
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	0c9b      	lsrs	r3, r3, #18
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003706:	e002      	b.n	800370e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3b01      	subs	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371a:	d102      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f2      	bne.n	8003708 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372e:	d112      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e011      	b.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003744:	e007      	b.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003754:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40007000 	.word	0x40007000
 8003768:	20000040 	.word	0x20000040
 800376c:	431bde83 	.word	0x431bde83

08003770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e306      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d075      	beq.n	800387a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378e:	4b97      	ldr	r3, [pc, #604]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003798:	4b94      	ldr	r3, [pc, #592]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	d102      	bne.n	80037ae <HAL_RCC_OscConfig+0x3e>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_OscConfig+0x44>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d10b      	bne.n	80037cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	4b8d      	ldr	r3, [pc, #564]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d05b      	beq.n	8003878 <HAL_RCC_OscConfig+0x108>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d157      	bne.n	8003878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e2e1      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_OscConfig+0x74>
 80037d6:	4b85      	ldr	r3, [pc, #532]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a84      	ldr	r2, [pc, #528]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e01d      	b.n	8003820 <HAL_RCC_OscConfig+0xb0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x98>
 80037ee:	4b7f      	ldr	r3, [pc, #508]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7e      	ldr	r2, [pc, #504]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7b      	ldr	r2, [pc, #492]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e00b      	b.n	8003820 <HAL_RCC_OscConfig+0xb0>
 8003808:	4b78      	ldr	r3, [pc, #480]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a77      	ldr	r2, [pc, #476]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 800380e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b75      	ldr	r3, [pc, #468]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a74      	ldr	r2, [pc, #464]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 800381a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd fefc 	bl	8001624 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fd fef8 	bl	8001624 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e2a6      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003842:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0xc0>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fd fee8 	bl	8001624 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003858:	f7fd fee4 	bl	8001624 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e292      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800386a:	4b60      	ldr	r3, [pc, #384]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0xe8>
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d075      	beq.n	8003972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003886:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003890:	4b56      	ldr	r3, [pc, #344]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b0c      	cmp	r3, #12
 800389e:	d102      	bne.n	80038a6 <HAL_RCC_OscConfig+0x136>
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_OscConfig+0x13c>
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d11f      	bne.n	80038ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ac:	4b4f      	ldr	r3, [pc, #316]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_OscConfig+0x154>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e265      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b49      	ldr	r3, [pc, #292]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	4946      	ldr	r1, [pc, #280]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038d8:	4b45      	ldr	r3, [pc, #276]	; (80039f0 <HAL_RCC_OscConfig+0x280>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd fe55 	bl	800158c <HAL_InitTick>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d043      	beq.n	8003970 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e251      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d023      	beq.n	800393c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f4:	4b3d      	ldr	r3, [pc, #244]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a3c      	ldr	r2, [pc, #240]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80038fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd fe90 	bl	8001624 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003908:	f7fd fe8c 	bl	8001624 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e23a      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	061b      	lsls	r3, r3, #24
 8003934:	492d      	ldr	r1, [pc, #180]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
 800393a:	e01a      	b.n	8003972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393c:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd fe6c 	bl	8001624 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003950:	f7fd fe68 	bl	8001624 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e216      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x1e0>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d041      	beq.n	8003a02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d01c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 8003988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398c:	4a17      	ldr	r2, [pc, #92]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003996:	f7fd fe45 	bl	8001624 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399e:	f7fd fe41 	bl	8001624 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e1ef      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80039b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ef      	beq.n	800399e <HAL_RCC_OscConfig+0x22e>
 80039be:	e020      	b.n	8003a02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80039c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <HAL_RCC_OscConfig+0x27c>)
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fd fe28 	bl	8001624 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d6:	e00d      	b.n	80039f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d8:	f7fd fe24 	bl	8001624 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d906      	bls.n	80039f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1d2      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f4:	4b8c      	ldr	r3, [pc, #560]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ea      	bne.n	80039d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80a6 	beq.w	8003b5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a14:	4b84      	ldr	r3, [pc, #528]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_OscConfig+0x2b4>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x2b6>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2a:	4b7f      	ldr	r3, [pc, #508]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	4a7e      	ldr	r2, [pc, #504]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a34:	6593      	str	r3, [r2, #88]	; 0x58
 8003a36:	4b7c      	ldr	r3, [pc, #496]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a42:	2301      	movs	r3, #1
 8003a44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a46:	4b79      	ldr	r3, [pc, #484]	; (8003c2c <HAL_RCC_OscConfig+0x4bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d118      	bne.n	8003a84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a52:	4b76      	ldr	r3, [pc, #472]	; (8003c2c <HAL_RCC_OscConfig+0x4bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a75      	ldr	r2, [pc, #468]	; (8003c2c <HAL_RCC_OscConfig+0x4bc>)
 8003a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fde1 	bl	8001624 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a66:	f7fd fddd 	bl	8001624 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e18b      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a78:	4b6c      	ldr	r3, [pc, #432]	; (8003c2c <HAL_RCC_OscConfig+0x4bc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d108      	bne.n	8003a9e <HAL_RCC_OscConfig+0x32e>
 8003a8c:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	4a65      	ldr	r2, [pc, #404]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a9c:	e024      	b.n	8003ae8 <HAL_RCC_OscConfig+0x378>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	d110      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x358>
 8003aa6:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	4a5e      	ldr	r2, [pc, #376]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003aae:	f043 0304 	orr.w	r3, r3, #4
 8003ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab6:	4b5c      	ldr	r3, [pc, #368]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	4a5a      	ldr	r2, [pc, #360]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac6:	e00f      	b.n	8003ae8 <HAL_RCC_OscConfig+0x378>
 8003ac8:	4b57      	ldr	r3, [pc, #348]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	4a56      	ldr	r2, [pc, #344]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a52      	ldr	r2, [pc, #328]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f023 0304 	bic.w	r3, r3, #4
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fd fd98 	bl	8001624 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af8:	f7fd fd94 	bl	8001624 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e140      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0e:	4b46      	ldr	r3, [pc, #280]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ed      	beq.n	8003af8 <HAL_RCC_OscConfig+0x388>
 8003b1c:	e015      	b.n	8003b4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fd81 	bl	8001624 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fd fd7d 	bl	8001624 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e129      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ed      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b35      	ldr	r3, [pc, #212]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b54:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d03c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01c      	beq.n	8003baa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b70:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b76:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fd fd50 	bl	8001624 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b88:	f7fd fd4c 	bl	8001624 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0fa      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b9a:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ef      	beq.n	8003b88 <HAL_RCC_OscConfig+0x418>
 8003ba8:	e01b      	b.n	8003be2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003baa:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bba:	f7fd fd33 	bl	8001624 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bc2:	f7fd fd2f 	bl	8001624 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e0dd      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1ef      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80d1 	beq.w	8003d8e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b0c      	cmp	r3, #12
 8003bf6:	f000 808b 	beq.w	8003d10 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d15e      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fd fd09 	bl	8001624 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	e00c      	b.n	8003c30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fd fd05 	bl	8001624 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d905      	bls.n	8003c30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e0b3      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	4b59      	ldr	r3, [pc, #356]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ec      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3c:	4b56      	ldr	r3, [pc, #344]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	4b56      	ldr	r3, [pc, #344]	; (8003d9c <HAL_RCC_OscConfig+0x62c>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6a11      	ldr	r1, [r2, #32]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c4c:	3a01      	subs	r2, #1
 8003c4e:	0112      	lsls	r2, r2, #4
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c56:	0212      	lsls	r2, r2, #8
 8003c58:	4311      	orrs	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c5e:	0852      	lsrs	r2, r2, #1
 8003c60:	3a01      	subs	r2, #1
 8003c62:	0552      	lsls	r2, r2, #21
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0652      	lsls	r2, r2, #25
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c76:	06d2      	lsls	r2, r2, #27
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	4947      	ldr	r1, [pc, #284]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c80:	4b45      	ldr	r3, [pc, #276]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a44      	ldr	r2, [pc, #272]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c8c:	4b42      	ldr	r3, [pc, #264]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a41      	ldr	r2, [pc, #260]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fd fcc4 	bl	8001624 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7fd fcc0 	bl	8001624 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e06e      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb2:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x530>
 8003cbe:	e066      	b.n	8003d8e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc0:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a34      	ldr	r2, [pc, #208]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ccc:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a31      	ldr	r2, [pc, #196]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cd8:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003cde:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fc9c 	bl	8001624 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fd fc98 	bl	8001624 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e046      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d02:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x580>
 8003d0e:	e03e      	b.n	8003d8e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e039      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <HAL_RCC_OscConfig+0x628>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0203 	and.w	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d12c      	bne.n	8003d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d123      	bne.n	8003d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d11b      	bne.n	8003d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d113      	bne.n	8003d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d109      	bne.n	8003d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	3b01      	subs	r3, #1
 8003d84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d001      	beq.n	8003d8e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	019f800c 	.word	0x019f800c

08003da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e11e      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b91      	ldr	r3, [pc, #580]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d910      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b8e      	ldr	r3, [pc, #568]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 020f 	bic.w	r2, r3, #15
 8003dce:	498c      	ldr	r1, [pc, #560]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b8a      	ldr	r3, [pc, #552]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e106      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d073      	beq.n	8003edc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d129      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfc:	4b81      	ldr	r3, [pc, #516]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0f4      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e0c:	f000 f966 	bl	80040dc <RCC_GetSysClockFreqFromPLLSource>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4a7c      	ldr	r2, [pc, #496]	; (8004008 <HAL_RCC_ClockConfig+0x268>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d93f      	bls.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e1a:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d033      	beq.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d12f      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e3a:	4b72      	ldr	r3, [pc, #456]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e42:	4a70      	ldr	r2, [pc, #448]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e024      	b.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0c6      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e68:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0be      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e78:	f000 f8ce 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4a61      	ldr	r2, [pc, #388]	; (8004008 <HAL_RCC_ClockConfig+0x268>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d909      	bls.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e86:	4b5f      	ldr	r3, [pc, #380]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e8e:	4a5d      	ldr	r2, [pc, #372]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b5a      	ldr	r3, [pc, #360]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4957      	ldr	r1, [pc, #348]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eac:	f7fd fbba 	bl	8001624 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb4:	f7fd fbb6 	bl	8001624 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e095      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	4b4e      	ldr	r3, [pc, #312]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 020c 	and.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1eb      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d023      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003efe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f14:	4a3b      	ldr	r2, [pc, #236]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4936      	ldr	r1, [pc, #216]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4a32      	ldr	r2, [pc, #200]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f42:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d21d      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 020f 	bic.w	r2, r3, #15
 8003f58:	4929      	ldr	r1, [pc, #164]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f60:	f7fd fb60 	bl	8001624 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f7fd fb5c 	bl	8001624 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e03b      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d1ed      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4917      	ldr	r1, [pc, #92]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490f      	ldr	r1, [pc, #60]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fca:	f000 f825 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490c      	ldr	r1, [pc, #48]	; (800400c <HAL_RCC_ClockConfig+0x26c>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x270>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_RCC_ClockConfig+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd facc 	bl	800158c <HAL_InitTick>
 8003ff4:	4603      	mov	r3, r0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40022000 	.word	0x40022000
 8004004:	40021000 	.word	0x40021000
 8004008:	04c4b400 	.word	0x04c4b400
 800400c:	0800a4a8 	.word	0x0800a4a8
 8004010:	20000040 	.word	0x20000040
 8004014:	20000044 	.word	0x20000044

08004018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800401e:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b04      	cmp	r3, #4
 8004028:	d102      	bne.n	8004030 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e047      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b08      	cmp	r3, #8
 800403a:	d102      	bne.n	8004042 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800403c:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	e03e      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d136      	bne.n	80040bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	3301      	adds	r3, #1
 8004064:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d10c      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800406c:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004076:	68d2      	ldr	r2, [r2, #12]
 8004078:	0a12      	lsrs	r2, r2, #8
 800407a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	617b      	str	r3, [r7, #20]
      break;
 8004084:	e00c      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004086:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	fbb2 f3f3 	udiv	r3, r2, r3
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004090:	68d2      	ldr	r2, [r2, #12]
 8004092:	0a12      	lsrs	r2, r2, #8
 8004094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
      break;
 800409e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	0e5b      	lsrs	r3, r3, #25
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	3301      	adds	r3, #1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	e001      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040c0:	693b      	ldr	r3, [r7, #16]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	007a1200 	.word	0x007a1200

080040dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	3301      	adds	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d10c      	bne.n	800411a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004100:	4a17      	ldr	r2, [pc, #92]	; (8004160 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800410a:	68d2      	ldr	r2, [r2, #12]
 800410c:	0a12      	lsrs	r2, r2, #8
 800410e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	617b      	str	r3, [r7, #20]
    break;
 8004118:	e00c      	b.n	8004134 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800411a:	4a12      	ldr	r2, [pc, #72]	; (8004164 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004122:	4a0e      	ldr	r2, [pc, #56]	; (800415c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004124:	68d2      	ldr	r2, [r2, #12]
 8004126:	0a12      	lsrs	r2, r2, #8
 8004128:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800412c:	fb02 f303 	mul.w	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]
    break;
 8004132:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	0e5b      	lsrs	r3, r3, #25
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	3301      	adds	r3, #1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800414e:	687b      	ldr	r3, [r7, #4]
}
 8004150:	4618      	mov	r0, r3
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40021000 	.word	0x40021000
 8004160:	007a1200 	.word	0x007a1200
 8004164:	00f42400 	.word	0x00f42400

08004168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004170:	2300      	movs	r3, #0
 8004172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004174:	2300      	movs	r3, #0
 8004176:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8098 	beq.w	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004186:	2300      	movs	r3, #0
 8004188:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418a:	4b43      	ldr	r3, [pc, #268]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10d      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004196:	4b40      	ldr	r3, [pc, #256]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419a:	4a3f      	ldr	r2, [pc, #252]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800419c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a0:	6593      	str	r3, [r2, #88]	; 0x58
 80041a2:	4b3d      	ldr	r3, [pc, #244]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ae:	2301      	movs	r3, #1
 80041b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b2:	4b3a      	ldr	r3, [pc, #232]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a39      	ldr	r2, [pc, #228]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041be:	f7fd fa31 	bl	8001624 <HAL_GetTick>
 80041c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c4:	e009      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c6:	f7fd fa2d 	bl	8001624 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d902      	bls.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	74fb      	strb	r3, [r7, #19]
        break;
 80041d8:	e005      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041da:	4b30      	ldr	r3, [pc, #192]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ef      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d159      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ec:	4b2a      	ldr	r3, [pc, #168]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01e      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	429a      	cmp	r2, r3
 8004206:	d019      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004208:	4b23      	ldr	r3, [pc, #140]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004212:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004214:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004224:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004234:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd f9ed 	bl	8001624 <HAL_GetTick>
 800424a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424c:	e00b      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fd f9e9 	bl	8001624 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d902      	bls.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	74fb      	strb	r3, [r7, #19]
            break;
 8004264:	e006      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ec      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004290:	e008      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004292:	7cfb      	ldrb	r3, [r7, #19]
 8004294:	74bb      	strb	r3, [r7, #18]
 8004296:	e005      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004298:	40021000 	.word	0x40021000
 800429c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042a4:	7c7b      	ldrb	r3, [r7, #17]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4ba6      	ldr	r3, [pc, #664]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	4aa5      	ldr	r2, [pc, #660]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c2:	4ba0      	ldr	r3, [pc, #640]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c8:	f023 0203 	bic.w	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	499c      	ldr	r1, [pc, #624]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042e4:	4b97      	ldr	r3, [pc, #604]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f023 020c 	bic.w	r2, r3, #12
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	4994      	ldr	r1, [pc, #592]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004306:	4b8f      	ldr	r3, [pc, #572]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	498b      	ldr	r1, [pc, #556]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004328:	4b86      	ldr	r3, [pc, #536]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	4983      	ldr	r1, [pc, #524]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800434a:	4b7e      	ldr	r3, [pc, #504]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	497a      	ldr	r1, [pc, #488]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800436c:	4b75      	ldr	r3, [pc, #468]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	4972      	ldr	r1, [pc, #456]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	4969      	ldr	r1, [pc, #420]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043b0:	4b64      	ldr	r3, [pc, #400]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4961      	ldr	r1, [pc, #388]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	4958      	ldr	r1, [pc, #352]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d015      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043f4:	4b53      	ldr	r3, [pc, #332]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	4950      	ldr	r1, [pc, #320]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004412:	d105      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004414:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a4a      	ldr	r2, [pc, #296]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004428:	2b00      	cmp	r3, #0
 800442a:	d015      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800442c:	4b45      	ldr	r3, [pc, #276]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	4942      	ldr	r1, [pc, #264]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444a:	d105      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444c:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a3c      	ldr	r2, [pc, #240]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004456:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d015      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004464:	4b37      	ldr	r3, [pc, #220]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4934      	ldr	r1, [pc, #208]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004482:	d105      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a2e      	ldr	r2, [pc, #184]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	4926      	ldr	r1, [pc, #152]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ba:	d105      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044bc:	4b21      	ldr	r3, [pc, #132]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a20      	ldr	r2, [pc, #128]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	4918      	ldr	r1, [pc, #96]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a12      	ldr	r2, [pc, #72]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	490a      	ldr	r1, [pc, #40]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800452a:	d105      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004536:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004538:	7cbb      	ldrb	r3, [r7, #18]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000

08004548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e049      	b.n	80045ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc fe5e 	bl	8001230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 fde8 	bl	800515c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d001      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e04a      	b.n	80046a6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a21      	ldr	r2, [pc, #132]	; (80046b4 <HAL_TIM_Base_Start_IT+0xbc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d018      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x6c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d013      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x6c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x6c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_TIM_Base_Start_IT+0xc4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x6c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x6c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d115      	bne.n	8004690 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800466c:	4013      	ands	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b06      	cmp	r3, #6
 8004674:	d015      	beq.n	80046a2 <HAL_TIM_Base_Start_IT+0xaa>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d011      	beq.n	80046a2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e008      	b.n	80046a2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e000      	b.n	80046a4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40013400 	.word	0x40013400
 80046c4:	40014000 	.word	0x40014000
 80046c8:	00010007 	.word	0x00010007

080046cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e049      	b.n	8004772 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc fc94 	bl	8001020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f000 fd26 	bl	800515c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <HAL_TIM_PWM_Start+0x24>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e03c      	b.n	800481a <HAL_TIM_PWM_Start+0x9e>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d109      	bne.n	80047ba <HAL_TIM_PWM_Start+0x3e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	e02f      	b.n	800481a <HAL_TIM_PWM_Start+0x9e>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d109      	bne.n	80047d4 <HAL_TIM_PWM_Start+0x58>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	e022      	b.n	800481a <HAL_TIM_PWM_Start+0x9e>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b0c      	cmp	r3, #12
 80047d8:	d109      	bne.n	80047ee <HAL_TIM_PWM_Start+0x72>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	bf14      	ite	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	2300      	moveq	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	e015      	b.n	800481a <HAL_TIM_PWM_Start+0x9e>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d109      	bne.n	8004808 <HAL_TIM_PWM_Start+0x8c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e008      	b.n	800481a <HAL_TIM_PWM_Start+0x9e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e097      	b.n	8004952 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start+0xb6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004830:	e023      	b.n	800487a <HAL_TIM_PWM_Start+0xfe>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b04      	cmp	r3, #4
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Start+0xc6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004840:	e01b      	b.n	800487a <HAL_TIM_PWM_Start+0xfe>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start+0xd6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004850:	e013      	b.n	800487a <HAL_TIM_PWM_Start+0xfe>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Start+0xe6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004860:	e00b      	b.n	800487a <HAL_TIM_PWM_Start+0xfe>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b10      	cmp	r3, #16
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Start+0xf6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004870:	e003      	b.n	800487a <HAL_TIM_PWM_Start+0xfe>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2201      	movs	r2, #1
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fff0 	bl	8005868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a33      	ldr	r2, [pc, #204]	; (800495c <HAL_TIM_PWM_Start+0x1e0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_TIM_PWM_Start+0x13e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a32      	ldr	r2, [pc, #200]	; (8004960 <HAL_TIM_PWM_Start+0x1e4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_TIM_PWM_Start+0x13e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <HAL_TIM_PWM_Start+0x1e8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_TIM_PWM_Start+0x13e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2f      	ldr	r2, [pc, #188]	; (8004968 <HAL_TIM_PWM_Start+0x1ec>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_TIM_PWM_Start+0x13e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2d      	ldr	r2, [pc, #180]	; (800496c <HAL_TIM_PWM_Start+0x1f0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <HAL_TIM_PWM_Start+0x142>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_TIM_PWM_Start+0x144>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a20      	ldr	r2, [pc, #128]	; (800495c <HAL_TIM_PWM_Start+0x1e0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_TIM_PWM_Start+0x194>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e6:	d013      	beq.n	8004910 <HAL_TIM_PWM_Start+0x194>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <HAL_TIM_PWM_Start+0x1f4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_TIM_PWM_Start+0x194>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <HAL_TIM_PWM_Start+0x1f8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_TIM_PWM_Start+0x194>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <HAL_TIM_PWM_Start+0x1e4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_PWM_Start+0x194>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a16      	ldr	r2, [pc, #88]	; (8004964 <HAL_TIM_PWM_Start+0x1e8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d115      	bne.n	800493c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	4b18      	ldr	r3, [pc, #96]	; (8004978 <HAL_TIM_PWM_Start+0x1fc>)
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d015      	beq.n	800494e <HAL_TIM_PWM_Start+0x1d2>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004928:	d011      	beq.n	800494e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	e008      	b.n	800494e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e000      	b.n	8004950 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40013400 	.word	0x40013400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800
 8004978:	00010007 	.word	0x00010007

0800497c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e097      	b.n	8004ac0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fc fb83 	bl	80010b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80049c0:	f023 0307 	bic.w	r3, r3, #7
 80049c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3304      	adds	r3, #4
 80049ce:	4619      	mov	r1, r3
 80049d0:	4610      	mov	r0, r2
 80049d2:	f000 fbc3 	bl	800515c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a1c:	f023 030c 	bic.w	r3, r3, #12
 8004a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	011a      	lsls	r2, r3, #4
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	031b      	lsls	r3, r3, #12
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ae0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d110      	bne.n	8004b1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d102      	bne.n	8004b04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004afe:	7b7b      	ldrb	r3, [r7, #13]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d001      	beq.n	8004b08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e069      	b.n	8004bdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b18:	e031      	b.n	8004b7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d110      	bne.n	8004b42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b20:	7bbb      	ldrb	r3, [r7, #14]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d102      	bne.n	8004b2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b26:	7b3b      	ldrb	r3, [r7, #12]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d001      	beq.n	8004b30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e055      	b.n	8004bdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b40:	e01d      	b.n	8004b7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d108      	bne.n	8004b5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b48:	7bbb      	ldrb	r3, [r7, #14]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d105      	bne.n	8004b5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b4e:	7b7b      	ldrb	r3, [r7, #13]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d102      	bne.n	8004b5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b54:	7b3b      	ldrb	r3, [r7, #12]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d001      	beq.n	8004b5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e03e      	b.n	8004bdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_TIM_Encoder_Start+0xc4>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d008      	beq.n	8004b9c <HAL_TIM_Encoder_Start+0xd4>
 8004b8a:	e00f      	b.n	8004bac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2201      	movs	r2, #1
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fe67 	bl	8005868 <TIM_CCxChannelCmd>
      break;
 8004b9a:	e016      	b.n	8004bca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	2104      	movs	r1, #4
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fe5f 	bl	8005868 <TIM_CCxChannelCmd>
      break;
 8004baa:	e00e      	b.n	8004bca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fe57 	bl	8005868 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2104      	movs	r1, #4
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fe50 	bl	8005868 <TIM_CCxChannelCmd>
      break;
 8004bc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d122      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0202 	mvn.w	r2, #2
 8004c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa7a 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa6c 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fa7d 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d122      	bne.n	8004c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d11b      	bne.n	8004c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0204 	mvn.w	r2, #4
 8004c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa50 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fa42 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fa53 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d122      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0208 	mvn.w	r2, #8
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa26 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa18 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa29 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d122      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d11b      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0210 	mvn.w	r2, #16
 8004d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2208      	movs	r2, #8
 8004d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9fc 	bl	8005120 <HAL_TIM_IC_CaptureCallback>
 8004d28:	e005      	b.n	8004d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f9ee 	bl	800510c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f9ff 	bl	8005134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d10e      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d107      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0201 	mvn.w	r2, #1
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fb fb66 	bl	8000434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d10e      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d80:	2b80      	cmp	r3, #128	; 0x80
 8004d82:	d107      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 febc 	bl	8005b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da2:	d10e      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b80      	cmp	r3, #128	; 0x80
 8004db0:	d107      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 feaf 	bl	8005b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d10e      	bne.n	8004dee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b40      	cmp	r3, #64	; 0x40
 8004ddc:	d107      	bne.n	8004dee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f9ad 	bl	8005148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d10e      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	d107      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f06f 0220 	mvn.w	r2, #32
 8004e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fe6f 	bl	8005af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e28:	d10f      	bne.n	8004e4a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e38:	d107      	bne.n	8004e4a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fe75 	bl	8005b34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e58:	d10f      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e68:	d107      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fe67 	bl	8005b48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e88:	d10f      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e98:	d107      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fe59 	bl	8005b5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb8:	d10f      	bne.n	8004eda <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ec8:	d107      	bne.n	8004eda <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fe4b 	bl	8005b70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e0ff      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b14      	cmp	r3, #20
 8004f0e:	f200 80f0 	bhi.w	80050f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f6d 	.word	0x08004f6d
 8004f1c:	080050f3 	.word	0x080050f3
 8004f20:	080050f3 	.word	0x080050f3
 8004f24:	080050f3 	.word	0x080050f3
 8004f28:	08004fad 	.word	0x08004fad
 8004f2c:	080050f3 	.word	0x080050f3
 8004f30:	080050f3 	.word	0x080050f3
 8004f34:	080050f3 	.word	0x080050f3
 8004f38:	08004fef 	.word	0x08004fef
 8004f3c:	080050f3 	.word	0x080050f3
 8004f40:	080050f3 	.word	0x080050f3
 8004f44:	080050f3 	.word	0x080050f3
 8004f48:	0800502f 	.word	0x0800502f
 8004f4c:	080050f3 	.word	0x080050f3
 8004f50:	080050f3 	.word	0x080050f3
 8004f54:	080050f3 	.word	0x080050f3
 8004f58:	08005071 	.word	0x08005071
 8004f5c:	080050f3 	.word	0x080050f3
 8004f60:	080050f3 	.word	0x080050f3
 8004f64:	080050f3 	.word	0x080050f3
 8004f68:	080050b1 	.word	0x080050b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f982 	bl	800527c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0208 	orr.w	r2, r2, #8
 8004f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0204 	bic.w	r2, r2, #4
 8004f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6999      	ldr	r1, [r3, #24]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	619a      	str	r2, [r3, #24]
      break;
 8004faa:	e0a5      	b.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f9f2 	bl	800539c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6999      	ldr	r1, [r3, #24]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	021a      	lsls	r2, r3, #8
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	619a      	str	r2, [r3, #24]
      break;
 8004fec:	e084      	b.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fa5b 	bl	80054b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0208 	orr.w	r2, r2, #8
 8005008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0204 	bic.w	r2, r2, #4
 8005018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69d9      	ldr	r1, [r3, #28]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	61da      	str	r2, [r3, #28]
      break;
 800502c:	e064      	b.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fac3 	bl	80055c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69d9      	ldr	r1, [r3, #28]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	021a      	lsls	r2, r3, #8
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	61da      	str	r2, [r3, #28]
      break;
 800506e:	e043      	b.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fb2c 	bl	80056d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0208 	orr.w	r2, r2, #8
 800508a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0204 	bic.w	r2, r2, #4
 800509a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050ae:	e023      	b.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fb70 	bl	800579c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	021a      	lsls	r2, r3, #8
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050f0:	e002      	b.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
      break;
 80050f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop

0800510c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a3c      	ldr	r2, [pc, #240]	; (8005260 <TIM_Base_SetConfig+0x104>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00f      	beq.n	8005194 <TIM_Base_SetConfig+0x38>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517a:	d00b      	beq.n	8005194 <TIM_Base_SetConfig+0x38>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a39      	ldr	r2, [pc, #228]	; (8005264 <TIM_Base_SetConfig+0x108>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d007      	beq.n	8005194 <TIM_Base_SetConfig+0x38>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a38      	ldr	r2, [pc, #224]	; (8005268 <TIM_Base_SetConfig+0x10c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0x38>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a37      	ldr	r2, [pc, #220]	; (800526c <TIM_Base_SetConfig+0x110>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d108      	bne.n	80051a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2d      	ldr	r2, [pc, #180]	; (8005260 <TIM_Base_SetConfig+0x104>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01b      	beq.n	80051e6 <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b4:	d017      	beq.n	80051e6 <TIM_Base_SetConfig+0x8a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a2a      	ldr	r2, [pc, #168]	; (8005264 <TIM_Base_SetConfig+0x108>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <TIM_Base_SetConfig+0x8a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a29      	ldr	r2, [pc, #164]	; (8005268 <TIM_Base_SetConfig+0x10c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00f      	beq.n	80051e6 <TIM_Base_SetConfig+0x8a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a28      	ldr	r2, [pc, #160]	; (800526c <TIM_Base_SetConfig+0x110>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00b      	beq.n	80051e6 <TIM_Base_SetConfig+0x8a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a27      	ldr	r2, [pc, #156]	; (8005270 <TIM_Base_SetConfig+0x114>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <TIM_Base_SetConfig+0x8a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a26      	ldr	r2, [pc, #152]	; (8005274 <TIM_Base_SetConfig+0x118>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_Base_SetConfig+0x8a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a25      	ldr	r2, [pc, #148]	; (8005278 <TIM_Base_SetConfig+0x11c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a10      	ldr	r2, [pc, #64]	; (8005260 <TIM_Base_SetConfig+0x104>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00f      	beq.n	8005244 <TIM_Base_SetConfig+0xe8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a11      	ldr	r2, [pc, #68]	; (800526c <TIM_Base_SetConfig+0x110>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00b      	beq.n	8005244 <TIM_Base_SetConfig+0xe8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a10      	ldr	r2, [pc, #64]	; (8005270 <TIM_Base_SetConfig+0x114>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_Base_SetConfig+0xe8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <TIM_Base_SetConfig+0x118>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_Base_SetConfig+0xe8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a0e      	ldr	r2, [pc, #56]	; (8005278 <TIM_Base_SetConfig+0x11c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d103      	bne.n	800524c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	615a      	str	r2, [r3, #20]
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40013400 	.word	0x40013400
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800

0800527c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f023 0201 	bic.w	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f023 0302 	bic.w	r3, r3, #2
 80052c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <TIM_OC1_SetConfig+0x10c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00f      	beq.n	80052fc <TIM_OC1_SetConfig+0x80>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a2b      	ldr	r2, [pc, #172]	; (800538c <TIM_OC1_SetConfig+0x110>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_OC1_SetConfig+0x80>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <TIM_OC1_SetConfig+0x114>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_OC1_SetConfig+0x80>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a29      	ldr	r2, [pc, #164]	; (8005394 <TIM_OC1_SetConfig+0x118>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC1_SetConfig+0x80>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a28      	ldr	r2, [pc, #160]	; (8005398 <TIM_OC1_SetConfig+0x11c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10c      	bne.n	8005316 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0308 	bic.w	r3, r3, #8
 8005302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f023 0304 	bic.w	r3, r3, #4
 8005314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <TIM_OC1_SetConfig+0x10c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_OC1_SetConfig+0xc2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1a      	ldr	r2, [pc, #104]	; (800538c <TIM_OC1_SetConfig+0x110>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_OC1_SetConfig+0xc2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a19      	ldr	r2, [pc, #100]	; (8005390 <TIM_OC1_SetConfig+0x114>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_OC1_SetConfig+0xc2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a18      	ldr	r2, [pc, #96]	; (8005394 <TIM_OC1_SetConfig+0x118>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_OC1_SetConfig+0xc2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <TIM_OC1_SetConfig+0x11c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d111      	bne.n	8005362 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	621a      	str	r2, [r3, #32]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40013400 	.word	0x40013400
 8005390:	40014000 	.word	0x40014000
 8005394:	40014400 	.word	0x40014400
 8005398:	40014800 	.word	0x40014800

0800539c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 0210 	bic.w	r2, r3, #16
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0320 	bic.w	r3, r3, #32
 80053ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a28      	ldr	r2, [pc, #160]	; (800549c <TIM_OC2_SetConfig+0x100>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_OC2_SetConfig+0x6c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <TIM_OC2_SetConfig+0x104>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d10d      	bne.n	8005424 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800540e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1d      	ldr	r2, [pc, #116]	; (800549c <TIM_OC2_SetConfig+0x100>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00f      	beq.n	800544c <TIM_OC2_SetConfig+0xb0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <TIM_OC2_SetConfig+0x104>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00b      	beq.n	800544c <TIM_OC2_SetConfig+0xb0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <TIM_OC2_SetConfig+0x108>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_OC2_SetConfig+0xb0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <TIM_OC2_SetConfig+0x10c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_OC2_SetConfig+0xb0>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a19      	ldr	r2, [pc, #100]	; (80054ac <TIM_OC2_SetConfig+0x110>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d113      	bne.n	8005474 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800545a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800

080054b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a27      	ldr	r2, [pc, #156]	; (80055ac <TIM_OC3_SetConfig+0xfc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_OC3_SetConfig+0x6a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a26      	ldr	r2, [pc, #152]	; (80055b0 <TIM_OC3_SetConfig+0x100>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d10d      	bne.n	8005536 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <TIM_OC3_SetConfig+0xfc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00f      	beq.n	800555e <TIM_OC3_SetConfig+0xae>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <TIM_OC3_SetConfig+0x100>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00b      	beq.n	800555e <TIM_OC3_SetConfig+0xae>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a1a      	ldr	r2, [pc, #104]	; (80055b4 <TIM_OC3_SetConfig+0x104>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <TIM_OC3_SetConfig+0xae>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <TIM_OC3_SetConfig+0x108>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_OC3_SetConfig+0xae>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <TIM_OC3_SetConfig+0x10c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d113      	bne.n	8005586 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800556c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	621a      	str	r2, [r3, #32]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40013400 	.word	0x40013400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800

080055c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800560e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	031b      	lsls	r3, r3, #12
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <TIM_OC4_SetConfig+0x100>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC4_SetConfig+0x6c>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <TIM_OC4_SetConfig+0x104>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d10d      	bne.n	8005648 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	031b      	lsls	r3, r3, #12
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005646:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <TIM_OC4_SetConfig+0x100>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00f      	beq.n	8005670 <TIM_OC4_SetConfig+0xb0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <TIM_OC4_SetConfig+0x104>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_OC4_SetConfig+0xb0>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <TIM_OC4_SetConfig+0x108>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_OC4_SetConfig+0xb0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <TIM_OC4_SetConfig+0x10c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC4_SetConfig+0xb0>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <TIM_OC4_SetConfig+0x110>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d113      	bne.n	8005698 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005676:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800567e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	019b      	lsls	r3, r3, #6
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40013400 	.word	0x40013400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	041b      	lsls	r3, r3, #16
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a17      	ldr	r2, [pc, #92]	; (8005788 <TIM_OC5_SetConfig+0xb4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00f      	beq.n	800574e <TIM_OC5_SetConfig+0x7a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a16      	ldr	r2, [pc, #88]	; (800578c <TIM_OC5_SetConfig+0xb8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00b      	beq.n	800574e <TIM_OC5_SetConfig+0x7a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a15      	ldr	r2, [pc, #84]	; (8005790 <TIM_OC5_SetConfig+0xbc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <TIM_OC5_SetConfig+0x7a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a14      	ldr	r2, [pc, #80]	; (8005794 <TIM_OC5_SetConfig+0xc0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_OC5_SetConfig+0x7a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a13      	ldr	r2, [pc, #76]	; (8005798 <TIM_OC5_SetConfig+0xc4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d109      	bne.n	8005762 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	621a      	str	r2, [r3, #32]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40013400 	.word	0x40013400
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800

0800579c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	051b      	lsls	r3, r3, #20
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a18      	ldr	r2, [pc, #96]	; (8005854 <TIM_OC6_SetConfig+0xb8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00f      	beq.n	8005818 <TIM_OC6_SetConfig+0x7c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <TIM_OC6_SetConfig+0xbc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00b      	beq.n	8005818 <TIM_OC6_SetConfig+0x7c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a16      	ldr	r2, [pc, #88]	; (800585c <TIM_OC6_SetConfig+0xc0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d007      	beq.n	8005818 <TIM_OC6_SetConfig+0x7c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a15      	ldr	r2, [pc, #84]	; (8005860 <TIM_OC6_SetConfig+0xc4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC6_SetConfig+0x7c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a14      	ldr	r2, [pc, #80]	; (8005864 <TIM_OC6_SetConfig+0xc8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d109      	bne.n	800582c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	029b      	lsls	r3, r3, #10
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	2201      	movs	r2, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	43db      	mvns	r3, r3
 800588a:	401a      	ands	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	431a      	orrs	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e065      	b.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2c      	ldr	r2, [pc, #176]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2b      	ldr	r2, [pc, #172]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d108      	bne.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005906:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d018      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d013      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a18      	ldr	r2, [pc, #96]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00e      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a13      	ldr	r2, [pc, #76]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	4313      	orrs	r3, r2
 800597c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40013400 	.word	0x40013400
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40014000 	.word	0x40014000

080059b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e087      	b.n	8005ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a27      	ldr	r2, [pc, #156]	; (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d106      	bne.n	8005a70 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d126      	bne.n	8005ad2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	051b      	lsls	r3, r3, #20
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a0e      	ldr	r2, [pc, #56]	; (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d106      	bne.n	8005ad2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40013400 	.word	0x40013400

08005af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b94:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005b98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bba:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005bbe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005be8:	b084      	sub	sp, #16
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	f107 0014 	add.w	r0, r7, #20
 8005bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	b004      	add	sp, #16
 8005c28:	4770      	bx	lr
	...

08005c2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b09d      	sub	sp, #116	; 0x74
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	78db      	ldrb	r3, [r3, #3]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d81f      	bhi.n	8005c9e <USB_ActivateEndpoint+0x72>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <USB_ActivateEndpoint+0x38>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005ca7 	.word	0x08005ca7
 8005c70:	08005c83 	.word	0x08005c83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005c80:	e012      	b.n	8005ca8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005c8a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005c8e:	e00b      	b.n	8005ca8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005c9c:	e004      	b.n	8005ca8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005ca4:	e000      	b.n	8005ca8 <USB_ActivateEndpoint+0x7c>
      break;
 8005ca6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	b21b      	sxth	r3, r3
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	b21a      	sxth	r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	b21b      	sxth	r3, r3
 8005cea:	4313      	orrs	r3, r2
 8005cec:	b21b      	sxth	r3, r3
 8005cee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	441a      	add	r2, r3
 8005cfc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	7b1b      	ldrb	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f040 8149 	bne.w	8005fb0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8084 	beq.w	8005e30 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	4413      	add	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	00da      	lsls	r2, r3, #3
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	88db      	ldrh	r3, [r3, #6]
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	827b      	strh	r3, [r7, #18]
 8005d6a:	8a7b      	ldrh	r3, [r7, #18]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01b      	beq.n	8005dac <USB_ActivateEndpoint+0x180>
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	823b      	strh	r3, [r7, #16]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	8a3b      	ldrh	r3, [r7, #16]
 8005d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	78db      	ldrb	r3, [r3, #3]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d020      	beq.n	8005df6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dca:	81bb      	strh	r3, [r7, #12]
 8005dcc:	89bb      	ldrh	r3, [r7, #12]
 8005dce:	f083 0320 	eor.w	r3, r3, #32
 8005dd2:	81bb      	strh	r3, [r7, #12]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	441a      	add	r2, r3
 8005dde:	89bb      	ldrh	r3, [r7, #12]
 8005de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	8013      	strh	r3, [r2, #0]
 8005df4:	e2a6      	b.n	8006344 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0c:	81fb      	strh	r3, [r7, #14]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	89fb      	ldrh	r3, [r7, #14]
 8005e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	8013      	strh	r3, [r2, #0]
 8005e2e:	e289      	b.n	8006344 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	633b      	str	r3, [r7, #48]	; 0x30
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	4413      	add	r3, r2
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	00da      	lsls	r2, r3, #3
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	88db      	ldrh	r3, [r3, #6]
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	4413      	add	r3, r2
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	00da      	lsls	r2, r3, #3
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	4413      	add	r3, r2
 8005e82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e8e:	d918      	bls.n	8005ec2 <USB_ActivateEndpoint+0x296>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <USB_ActivateEndpoint+0x27e>
 8005ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	e029      	b.n	8005f16 <USB_ActivateEndpoint+0x2ea>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d112      	bne.n	8005ef0 <USB_ActivateEndpoint+0x2c4>
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	801a      	strh	r2, [r3, #0]
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	801a      	strh	r2, [r3, #0]
 8005eee:	e012      	b.n	8005f16 <USB_ActivateEndpoint+0x2ea>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <USB_ActivateEndpoint+0x2de>
 8005f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f06:	3301      	adds	r3, #1
 8005f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01b      	beq.n	8005f66 <USB_ActivateEndpoint+0x33a>
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f44:	843b      	strh	r3, [r7, #32]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	441a      	add	r2, r3
 8005f50:	8c3b      	ldrh	r3, [r7, #32]
 8005f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7c:	83fb      	strh	r3, [r7, #30]
 8005f7e:	8bfb      	ldrh	r3, [r7, #30]
 8005f80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f84:	83fb      	strh	r3, [r7, #30]
 8005f86:	8bfb      	ldrh	r3, [r7, #30]
 8005f88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f8c:	83fb      	strh	r3, [r7, #30]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8bfb      	ldrh	r3, [r7, #30]
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
 8005fae:	e1c9      	b.n	8006344 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	78db      	ldrb	r3, [r3, #3]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d11e      	bne.n	8005ff6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	441a      	add	r2, r3
 8005fdc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8013      	strh	r3, [r2, #0]
 8005ff4:	e01d      	b.n	8006032 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	441a      	add	r2, r3
 800601a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603c:	b29b      	uxth	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006042:	4413      	add	r3, r2
 8006044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	00da      	lsls	r2, r3, #3
 800604c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800604e:	4413      	add	r3, r2
 8006050:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006054:	65bb      	str	r3, [r7, #88]	; 0x58
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	891b      	ldrh	r3, [r3, #8]
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	657b      	str	r3, [r7, #84]	; 0x54
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006070:	b29b      	uxth	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006076:	4413      	add	r3, r2
 8006078:	657b      	str	r3, [r7, #84]	; 0x54
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	00da      	lsls	r2, r3, #3
 8006080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006082:	4413      	add	r3, r2
 8006084:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006088:	653b      	str	r3, [r7, #80]	; 0x50
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	895b      	ldrh	r3, [r3, #10]
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	b29b      	uxth	r3, r3
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006098:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 8093 	bne.w	80061ca <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01b      	beq.n	80060f8 <USB_ActivateEndpoint+0x4cc>
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80060e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006106:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01b      	beq.n	8006148 <USB_ActivateEndpoint+0x51c>
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	441a      	add	r2, r3
 8006132:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006140:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006144:	b29b      	uxth	r3, r3
 8006146:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006160:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006162:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006166:	873b      	strh	r3, [r7, #56]	; 0x38
 8006168:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800616a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800616e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800617c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]
 80061c8:	e0bc      	b.n	8006344 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80061da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01d      	beq.n	8006222 <USB_ActivateEndpoint+0x5f6>
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800620e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800621a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621e:	b29b      	uxth	r3, r3
 8006220:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006232:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01d      	beq.n	800627a <USB_ActivateEndpoint+0x64e>
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006254:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	78db      	ldrb	r3, [r3, #3]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d024      	beq.n	80062cc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006298:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800629c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80062a0:	f083 0320 	eor.w	r3, r3, #32
 80062a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	441a      	add	r2, r3
 80062b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80062b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	8013      	strh	r3, [r2, #0]
 80062ca:	e01d      	b.n	8006308 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	441a      	add	r2, r3
 80062f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80062f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	441a      	add	r2, r3
 800632c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006340:	b29b      	uxth	r3, r3
 8006342:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006344:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006348:	4618      	mov	r0, r3
 800634a:	3774      	adds	r7, #116	; 0x74
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006354:	b480      	push	{r7}
 8006356:	b08d      	sub	sp, #52	; 0x34
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	7b1b      	ldrb	r3, [r3, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 808e 	bne.w	8006484 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d044      	beq.n	80063fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	81bb      	strh	r3, [r7, #12]
 800637e:	89bb      	ldrh	r3, [r7, #12]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01b      	beq.n	80063c0 <USB_DeactivateEndpoint+0x6c>
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	817b      	strh	r3, [r7, #10]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	897b      	ldrh	r3, [r7, #10]
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d6:	813b      	strh	r3, [r7, #8]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	893b      	ldrh	r3, [r7, #8]
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]
 80063f8:	e192      	b.n	8006720 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	827b      	strh	r3, [r7, #18]
 8006408:	8a7b      	ldrh	r3, [r7, #18]
 800640a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01b      	beq.n	800644a <USB_DeactivateEndpoint+0xf6>
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006428:	823b      	strh	r3, [r7, #16]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	441a      	add	r2, r3
 8006434:	8a3b      	ldrh	r3, [r7, #16]
 8006436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006446:	b29b      	uxth	r3, r3
 8006448:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	81fb      	strh	r3, [r7, #14]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	89fb      	ldrh	r3, [r7, #14]
 800646e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]
 8006482:	e14d      	b.n	8006720 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f040 80a5 	bne.w	80065d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	843b      	strh	r3, [r7, #32]
 800649c:	8c3b      	ldrh	r3, [r7, #32]
 800649e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d01b      	beq.n	80064de <USB_DeactivateEndpoint+0x18a>
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064bc:	83fb      	strh	r3, [r7, #30]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	441a      	add	r2, r3
 80064c8:	8bfb      	ldrh	r3, [r7, #30]
 80064ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064da:	b29b      	uxth	r3, r3
 80064dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	83bb      	strh	r3, [r7, #28]
 80064ec:	8bbb      	ldrh	r3, [r7, #28]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01b      	beq.n	800652e <USB_DeactivateEndpoint+0x1da>
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650c:	837b      	strh	r3, [r7, #26]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	8b7b      	ldrh	r3, [r7, #26]
 800651a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800652a:	b29b      	uxth	r3, r3
 800652c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006544:	833b      	strh	r3, [r7, #24]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	441a      	add	r2, r3
 8006550:	8b3b      	ldrh	r3, [r7, #24]
 8006552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006562:	b29b      	uxth	r3, r3
 8006564:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	82fb      	strh	r3, [r7, #22]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	441a      	add	r2, r3
 8006588:	8afb      	ldrh	r3, [r7, #22]
 800658a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659a:	b29b      	uxth	r3, r3
 800659c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b4:	82bb      	strh	r3, [r7, #20]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	441a      	add	r2, r3
 80065c0:	8abb      	ldrh	r3, [r7, #20]
 80065c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]
 80065d6:	e0a3      	b.n	8006720 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80065e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01b      	beq.n	8006628 <USB_DeactivateEndpoint+0x2d4>
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	441a      	add	r2, r3
 8006612:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006624:	b29b      	uxth	r3, r3
 8006626:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01b      	beq.n	8006678 <USB_DeactivateEndpoint+0x324>
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	853b      	strh	r3, [r7, #40]	; 0x28
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006674:	b29b      	uxth	r3, r3
 8006676:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	441a      	add	r2, r3
 800669a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800669c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800670c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671c:	b29b      	uxth	r3, r3
 800671e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3734      	adds	r7, #52	; 0x34
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b0c2      	sub	sp, #264	; 0x108
 8006732:	af00      	add	r7, sp, #0
 8006734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800673c:	6018      	str	r0, [r3, #0]
 800673e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006746:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b01      	cmp	r3, #1
 8006756:	f040 867b 	bne.w	8007450 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800675a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	429a      	cmp	r2, r3
 8006774:	d908      	bls.n	8006788 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006786:	e007      	b.n	8006798 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	7b1b      	ldrb	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d13a      	bne.n	800681e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80067a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6959      	ldr	r1, [r3, #20]
 80067b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	88da      	ldrh	r2, [r3, #6]
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067ce:	6800      	ldr	r0, [r0, #0]
 80067d0:	f001 fc1d 	bl	800800e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80067d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	00da      	lsls	r2, r3, #3
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4413      	add	r3, r2
 800680a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	f000 bde3 	b.w	80073e4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800681e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	78db      	ldrb	r3, [r3, #3]
 800682a:	2b02      	cmp	r3, #2
 800682c:	f040 843a 	bne.w	80070a4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a1a      	ldr	r2, [r3, #32]
 800683c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	429a      	cmp	r2, r3
 800684a:	f240 83b7 	bls.w	8006fbc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006874:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	441a      	add	r2, r3
 8006892:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80068aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6a1a      	ldr	r2, [r3, #32]
 80068b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ba:	1ad2      	subs	r2, r2, r3
 80068bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 81b3 	beq.w	8006c56 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	633b      	str	r3, [r7, #48]	; 0x30
 80068fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d16d      	bne.n	80069e8 <USB_EPStartXfer+0x2ba>
 800690c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006910:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006926:	b29b      	uxth	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	4413      	add	r3, r2
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	00da      	lsls	r2, r3, #3
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	4413      	add	r3, r2
 8006942:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694c:	2b3e      	cmp	r3, #62	; 0x3e
 800694e:	d91c      	bls.n	800698a <USB_EPStartXfer+0x25c>
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006954:	095b      	lsrs	r3, r3, #5
 8006956:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <USB_EPStartXfer+0x242>
 8006966:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800696a:	3b01      	subs	r3, #1
 800696c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006970:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006974:	b29b      	uxth	r3, r3
 8006976:	029b      	lsls	r3, r3, #10
 8006978:	b29b      	uxth	r3, r3
 800697a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006982:	b29a      	uxth	r2, r3
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	e053      	b.n	8006a32 <USB_EPStartXfer+0x304>
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698e:	2b00      	cmp	r3, #0
 8006990:	d112      	bne.n	80069b8 <USB_EPStartXfer+0x28a>
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800699c:	b29a      	uxth	r2, r3
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	801a      	strh	r2, [r3, #0]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	801a      	strh	r2, [r3, #0]
 80069b6:	e03c      	b.n	8006a32 <USB_EPStartXfer+0x304>
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069bc:	085b      	lsrs	r3, r3, #1
 80069be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <USB_EPStartXfer+0x2aa>
 80069ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069d2:	3301      	adds	r3, #1
 80069d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069dc:	b29b      	uxth	r3, r3
 80069de:	029b      	lsls	r3, r3, #10
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	e024      	b.n	8006a32 <USB_EPStartXfer+0x304>
 80069e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d11c      	bne.n	8006a32 <USB_EPStartXfer+0x304>
 80069f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	4413      	add	r3, r2
 8006a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	00da      	lsls	r2, r3, #3
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	4413      	add	r3, r2
 8006a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	895b      	ldrh	r3, [r3, #10]
 8006a3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6959      	ldr	r1, [r3, #20]
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a60:	6800      	ldr	r0, [r0, #0]
 8006a62:	f001 fad4 	bl	800800e <USB_WritePMA>
            ep->xfer_buff += len;
 8006a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	695a      	ldr	r2, [r3, #20]
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a76:	441a      	add	r2, r3
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d90f      	bls.n	8006ac0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6a1a      	ldr	r2, [r3, #32]
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab0:	1ad2      	subs	r2, r2, r3
 8006ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	621a      	str	r2, [r3, #32]
 8006abe:	e00e      	b.n	8006ade <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	785b      	ldrb	r3, [r3, #1]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d16d      	bne.n	8006bca <USB_EPStartXfer+0x49c>
 8006aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	4413      	add	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	00da      	lsls	r2, r3, #3
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	4413      	add	r3, r2
 8006b24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b30:	d91c      	bls.n	8006b6c <USB_EPStartXfer+0x43e>
 8006b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <USB_EPStartXfer+0x424>
 8006b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	801a      	strh	r2, [r3, #0]
 8006b6a:	e059      	b.n	8006c20 <USB_EPStartXfer+0x4f2>
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d112      	bne.n	8006b9a <USB_EPStartXfer+0x46c>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	e042      	b.n	8006c20 <USB_EPStartXfer+0x4f2>
 8006b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9e:	085b      	lsrs	r3, r3, #1
 8006ba0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <USB_EPStartXfer+0x48c>
 8006bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	029b      	lsls	r3, r3, #10
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e02a      	b.n	8006c20 <USB_EPStartXfer+0x4f2>
 8006bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	785b      	ldrb	r3, [r3, #1]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d122      	bne.n	8006c20 <USB_EPStartXfer+0x4f2>
 8006bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	00da      	lsls	r2, r3, #3
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c14:	61fb      	str	r3, [r7, #28]
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	891b      	ldrh	r3, [r3, #8]
 8006c2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6959      	ldr	r1, [r3, #20]
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c4e:	6800      	ldr	r0, [r0, #0]
 8006c50:	f001 f9dd 	bl	800800e <USB_WritePMA>
 8006c54:	e3c6      	b.n	80073e4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d16d      	bne.n	8006d42 <USB_EPStartXfer+0x614>
 8006c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c86:	4413      	add	r3, r2
 8006c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	00da      	lsls	r2, r3, #3
 8006c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca8:	d91c      	bls.n	8006ce4 <USB_EPStartXfer+0x5b6>
 8006caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <USB_EPStartXfer+0x59c>
 8006cc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	029b      	lsls	r3, r3, #10
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	e059      	b.n	8006d98 <USB_EPStartXfer+0x66a>
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d112      	bne.n	8006d12 <USB_EPStartXfer+0x5e4>
 8006cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	e042      	b.n	8006d98 <USB_EPStartXfer+0x66a>
 8006d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <USB_EPStartXfer+0x604>
 8006d28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	029b      	lsls	r3, r3, #10
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	e02a      	b.n	8006d98 <USB_EPStartXfer+0x66a>
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d122      	bne.n	8006d98 <USB_EPStartXfer+0x66a>
 8006d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	653b      	str	r3, [r7, #80]	; 0x50
 8006d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d72:	4413      	add	r3, r2
 8006d74:	653b      	str	r3, [r7, #80]	; 0x50
 8006d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	00da      	lsls	r2, r3, #3
 8006d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d86:	4413      	add	r3, r2
 8006d88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	891b      	ldrh	r3, [r3, #8]
 8006da4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6959      	ldr	r1, [r3, #20]
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006dc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006dc6:	6800      	ldr	r0, [r0, #0]
 8006dc8:	f001 f921 	bl	800800e <USB_WritePMA>
            ep->xfer_buff += len;
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695a      	ldr	r2, [r3, #20]
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ddc:	441a      	add	r2, r3
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a1a      	ldr	r2, [r3, #32]
 8006df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d90f      	bls.n	8006e26 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6a1a      	ldr	r2, [r3, #32]
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e16:	1ad2      	subs	r2, r2, r3
 8006e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	621a      	str	r2, [r3, #32]
 8006e24:	e00e      	b.n	8006e44 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2200      	movs	r2, #0
 8006e42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d16d      	bne.n	8006f3c <USB_EPStartXfer+0x80e>
 8006e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	4413      	add	r3, r2
 8006e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	00da      	lsls	r2, r3, #3
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	4413      	add	r3, r2
 8006e96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ea2:	d91c      	bls.n	8006ede <USB_EPStartXfer+0x7b0>
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <USB_EPStartXfer+0x796>
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	029b      	lsls	r3, r3, #10
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e053      	b.n	8006f86 <USB_EPStartXfer+0x858>
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d112      	bne.n	8006f0c <USB_EPStartXfer+0x7de>
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f08:	801a      	strh	r2, [r3, #0]
 8006f0a:	e03c      	b.n	8006f86 <USB_EPStartXfer+0x858>
 8006f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <USB_EPStartXfer+0x7fe>
 8006f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f26:	3301      	adds	r3, #1
 8006f28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	029b      	lsls	r3, r3, #10
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	e024      	b.n	8006f86 <USB_EPStartXfer+0x858>
 8006f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d11c      	bne.n	8006f86 <USB_EPStartXfer+0x858>
 8006f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f60:	4413      	add	r3, r2
 8006f62:	643b      	str	r3, [r7, #64]	; 0x40
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	00da      	lsls	r2, r3, #3
 8006f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f74:	4413      	add	r3, r2
 8006f76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	895b      	ldrh	r3, [r3, #10]
 8006f92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6959      	ldr	r1, [r3, #20]
 8006fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fb4:	6800      	ldr	r0, [r0, #0]
 8006fb6:	f001 f82a 	bl	800800e <USB_WritePMA>
 8006fba:	e213      	b.n	80073e4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	441a      	add	r2, r3
 8007010:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007024:	b29b      	uxth	r3, r3
 8007026:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007048:	4413      	add	r3, r2
 800704a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800704c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	00da      	lsls	r2, r3, #3
 800705a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800705c:	4413      	add	r3, r2
 800705e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007062:	65bb      	str	r3, [r7, #88]	; 0x58
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007068:	b29a      	uxth	r2, r3
 800706a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800706c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800706e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	891b      	ldrh	r3, [r3, #8]
 800707a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800707e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6959      	ldr	r1, [r3, #20]
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708e:	b29b      	uxth	r3, r3
 8007090:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007094:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007098:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f000 ffb6 	bl	800800e <USB_WritePMA>
 80070a2:	e19f      	b.n	80073e4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6a1a      	ldr	r2, [r3, #32]
 80070b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b4:	1ad2      	subs	r2, r2, r3
 80070b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80bc 	beq.w	8007262 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	673b      	str	r3, [r7, #112]	; 0x70
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d16d      	bne.n	80071e2 <USB_EPStartXfer+0xab4>
 8007106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	66bb      	str	r3, [r7, #104]	; 0x68
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007120:	b29b      	uxth	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007126:	4413      	add	r3, r2
 8007128:	66bb      	str	r3, [r7, #104]	; 0x68
 800712a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00da      	lsls	r2, r3, #3
 8007138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800713a:	4413      	add	r3, r2
 800713c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007140:	667b      	str	r3, [r7, #100]	; 0x64
 8007142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007146:	2b3e      	cmp	r3, #62	; 0x3e
 8007148:	d91c      	bls.n	8007184 <USB_EPStartXfer+0xa56>
 800714a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714e:	095b      	lsrs	r3, r3, #5
 8007150:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <USB_EPStartXfer+0xa3c>
 8007160:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007164:	3b01      	subs	r3, #1
 8007166:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800716a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800716e:	b29b      	uxth	r3, r3
 8007170:	029b      	lsls	r3, r3, #10
 8007172:	b29b      	uxth	r3, r3
 8007174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717c:	b29a      	uxth	r2, r3
 800717e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	e053      	b.n	800722c <USB_EPStartXfer+0xafe>
 8007184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007188:	2b00      	cmp	r3, #0
 800718a:	d112      	bne.n	80071b2 <USB_EPStartXfer+0xa84>
 800718c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007196:	b29a      	uxth	r2, r3
 8007198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	e03c      	b.n	800722c <USB_EPStartXfer+0xafe>
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b6:	085b      	lsrs	r3, r3, #1
 80071b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d004      	beq.n	80071d2 <USB_EPStartXfer+0xaa4>
 80071c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071cc:	3301      	adds	r3, #1
 80071ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	029b      	lsls	r3, r3, #10
 80071da:	b29a      	uxth	r2, r3
 80071dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071de:	801a      	strh	r2, [r3, #0]
 80071e0:	e024      	b.n	800722c <USB_EPStartXfer+0xafe>
 80071e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d11c      	bne.n	800722c <USB_EPStartXfer+0xafe>
 80071f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007200:	b29b      	uxth	r3, r3
 8007202:	461a      	mov	r2, r3
 8007204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007206:	4413      	add	r3, r2
 8007208:	673b      	str	r3, [r7, #112]	; 0x70
 800720a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	00da      	lsls	r2, r3, #3
 8007218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800721a:	4413      	add	r3, r2
 800721c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007226:	b29a      	uxth	r2, r3
 8007228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800722a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800722c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	895b      	ldrh	r3, [r3, #10]
 8007238:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800723c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6959      	ldr	r1, [r3, #20]
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724c:	b29b      	uxth	r3, r3
 800724e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007252:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007256:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	f000 fed7 	bl	800800e <USB_WritePMA>
 8007260:	e0c0      	b.n	80073e4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d16d      	bne.n	800734e <USB_EPStartXfer+0xc20>
 8007272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728c:	b29b      	uxth	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007292:	4413      	add	r3, r2
 8007294:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	00da      	lsls	r2, r3, #3
 80072a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072a6:	4413      	add	r3, r2
 80072a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b2:	2b3e      	cmp	r3, #62	; 0x3e
 80072b4:	d91c      	bls.n	80072f0 <USB_EPStartXfer+0xbc2>
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <USB_EPStartXfer+0xba8>
 80072cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80072d0:	3b01      	subs	r3, #1
 80072d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80072da:	b29b      	uxth	r3, r3
 80072dc:	029b      	lsls	r3, r3, #10
 80072de:	b29b      	uxth	r3, r3
 80072e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ec:	801a      	strh	r2, [r3, #0]
 80072ee:	e05f      	b.n	80073b0 <USB_EPStartXfer+0xc82>
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d112      	bne.n	800731e <USB_EPStartXfer+0xbf0>
 80072f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007302:	b29a      	uxth	r2, r3
 8007304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007316:	b29a      	uxth	r2, r3
 8007318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	e048      	b.n	80073b0 <USB_EPStartXfer+0xc82>
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <USB_EPStartXfer+0xc10>
 8007334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007338:	3301      	adds	r3, #1
 800733a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800733e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007342:	b29b      	uxth	r3, r3
 8007344:	029b      	lsls	r3, r3, #10
 8007346:	b29a      	uxth	r2, r3
 8007348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e030      	b.n	80073b0 <USB_EPStartXfer+0xc82>
 800734e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	785b      	ldrb	r3, [r3, #1]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d128      	bne.n	80073b0 <USB_EPStartXfer+0xc82>
 800735e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800736c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737a:	b29b      	uxth	r3, r3
 800737c:	461a      	mov	r2, r3
 800737e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007382:	4413      	add	r3, r2
 8007384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	00da      	lsls	r2, r3, #3
 8007396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800739a:	4413      	add	r3, r2
 800739c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80073b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	891b      	ldrh	r3, [r3, #8]
 80073bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6959      	ldr	r1, [r3, #20]
 80073cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073de:	6800      	ldr	r0, [r0, #0]
 80073e0:	f000 fe15 	bl	800800e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80073e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800740a:	817b      	strh	r3, [r7, #10]
 800740c:	897b      	ldrh	r3, [r7, #10]
 800740e:	f083 0310 	eor.w	r3, r3, #16
 8007412:	817b      	strh	r3, [r7, #10]
 8007414:	897b      	ldrh	r3, [r7, #10]
 8007416:	f083 0320 	eor.w	r3, r3, #32
 800741a:	817b      	strh	r3, [r7, #10]
 800741c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	897b      	ldrh	r3, [r7, #10]
 8007438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007448:	b29b      	uxth	r3, r3
 800744a:	8013      	strh	r3, [r2, #0]
 800744c:	f000 bc9f 	b.w	8007d8e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	7b1b      	ldrb	r3, [r3, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f040 80ae 	bne.w	80075be <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	429a      	cmp	r2, r3
 800747c:	d917      	bls.n	80074ae <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800747e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800748e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	619a      	str	r2, [r3, #24]
 80074ac:	e00e      	b.n	80074cc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80074ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2200      	movs	r2, #0
 80074ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80074cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074f0:	4413      	add	r3, r2
 80074f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	00da      	lsls	r2, r3, #3
 8007504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007508:	4413      	add	r3, r2
 800750a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800750e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007516:	2b3e      	cmp	r3, #62	; 0x3e
 8007518:	d91d      	bls.n	8007556 <USB_EPStartXfer+0xe28>
 800751a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007528:	f003 031f 	and.w	r3, r3, #31
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <USB_EPStartXfer+0xe0c>
 8007530:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007534:	3b01      	subs	r3, #1
 8007536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800753a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800753e:	b29b      	uxth	r3, r3
 8007540:	029b      	lsls	r3, r3, #10
 8007542:	b29b      	uxth	r3, r3
 8007544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754c:	b29a      	uxth	r2, r3
 800754e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	e3e1      	b.n	8007d1a <USB_EPStartXfer+0x15ec>
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755a:	2b00      	cmp	r3, #0
 800755c:	d116      	bne.n	800758c <USB_EPStartXfer+0xe5e>
 800755e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800756a:	b29a      	uxth	r2, r3
 800756c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007570:	801a      	strh	r2, [r3, #0]
 8007572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007582:	b29a      	uxth	r2, r3
 8007584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007588:	801a      	strh	r2, [r3, #0]
 800758a:	e3c6      	b.n	8007d1a <USB_EPStartXfer+0x15ec>
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007590:	085b      	lsrs	r3, r3, #1
 8007592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <USB_EPStartXfer+0xe7e>
 80075a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075a6:	3301      	adds	r3, #1
 80075a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	029b      	lsls	r3, r3, #10
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	e3ad      	b.n	8007d1a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	78db      	ldrb	r3, [r3, #3]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	f040 8200 	bne.w	80079d0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	785b      	ldrb	r3, [r3, #1]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8091 	bne.w	8007704 <USB_EPStartXfer+0xfd6>
 80075e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fe:	b29b      	uxth	r3, r3
 8007600:	461a      	mov	r2, r3
 8007602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007606:	4413      	add	r3, r2
 8007608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800760c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	00da      	lsls	r2, r3, #3
 800761a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800761e:	4413      	add	r3, r2
 8007620:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b3e      	cmp	r3, #62	; 0x3e
 8007636:	d925      	bls.n	8007684 <USB_EPStartXfer+0xf56>
 8007638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800764a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <USB_EPStartXfer+0xf3a>
 800765e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007662:	3b01      	subs	r3, #1
 8007664:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766c:	b29b      	uxth	r3, r3
 800766e:	029b      	lsls	r3, r3, #10
 8007670:	b29b      	uxth	r3, r3
 8007672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800767a:	b29a      	uxth	r2, r3
 800767c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007680:	801a      	strh	r2, [r3, #0]
 8007682:	e074      	b.n	800776e <USB_EPStartXfer+0x1040>
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d116      	bne.n	80076c2 <USB_EPStartXfer+0xf94>
 8007694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	e055      	b.n	800776e <USB_EPStartXfer+0x1040>
 80076c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <USB_EPStartXfer+0xfc4>
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ec:	3301      	adds	r3, #1
 80076ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007700:	801a      	strh	r2, [r3, #0]
 8007702:	e034      	b.n	800776e <USB_EPStartXfer+0x1040>
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d12c      	bne.n	800776e <USB_EPStartXfer+0x1040>
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007730:	b29b      	uxth	r3, r3
 8007732:	461a      	mov	r2, r3
 8007734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007738:	4413      	add	r3, r2
 800773a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800773e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	00da      	lsls	r2, r3, #3
 800774c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007750:	4413      	add	r3, r2
 8007752:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800775a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	785b      	ldrb	r3, [r3, #1]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 8091 	bne.w	80078b0 <USB_EPStartXfer+0x1182>
 800778e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800779c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	461a      	mov	r2, r3
 80077ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077b2:	4413      	add	r3, r2
 80077b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	00da      	lsls	r2, r3, #3
 80077c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077ca:	4413      	add	r3, r2
 80077cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b3e      	cmp	r3, #62	; 0x3e
 80077e2:	d925      	bls.n	8007830 <USB_EPStartXfer+0x1102>
 80077e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <USB_EPStartXfer+0x10e6>
 800780a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780e:	3b01      	subs	r3, #1
 8007810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007818:	b29b      	uxth	r3, r3
 800781a:	029b      	lsls	r3, r3, #10
 800781c:	b29b      	uxth	r3, r3
 800781e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007826:	b29a      	uxth	r2, r3
 8007828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	e06d      	b.n	800790c <USB_EPStartXfer+0x11de>
 8007830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d116      	bne.n	800786e <USB_EPStartXfer+0x1140>
 8007840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800784c:	b29a      	uxth	r2, r3
 800784e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	b29b      	uxth	r3, r3
 800785c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007864:	b29a      	uxth	r2, r3
 8007866:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800786a:	801a      	strh	r2, [r3, #0]
 800786c:	e04e      	b.n	800790c <USB_EPStartXfer+0x11de>
 800786e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <USB_EPStartXfer+0x1170>
 8007894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007898:	3301      	adds	r3, #1
 800789a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800789e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	029b      	lsls	r3, r3, #10
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e02d      	b.n	800790c <USB_EPStartXfer+0x11de>
 80078b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d125      	bne.n	800790c <USB_EPStartXfer+0x11de>
 80078c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	461a      	mov	r2, r3
 80078d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078d6:	4413      	add	r3, r2
 80078d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	00da      	lsls	r2, r3, #3
 80078ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078ee:	4413      	add	r3, r2
 80078f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	b29a      	uxth	r2, r3
 8007906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800790a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800790c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 81fe 	beq.w	8007d1a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800791e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800793e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <USB_EPStartXfer+0x1228>
 800794a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007956:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800795a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800795e:	2b00      	cmp	r3, #0
 8007960:	f040 81db 	bne.w	8007d1a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007964:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 81d4 	bne.w	8007d1a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007998:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800799c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	441a      	add	r2, r3
 80079b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80079ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	8013      	strh	r3, [r2, #0]
 80079ce:	e1a4      	b.n	8007d1a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80079d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	78db      	ldrb	r3, [r3, #3]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	f040 819a 	bne.w	8007d16 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d917      	bls.n	8007a2e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80079fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	619a      	str	r2, [r3, #24]
 8007a2c:	e00e      	b.n	8007a4c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d178      	bne.n	8007b4e <USB_EPStartXfer+0x1420>
 8007a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a80:	4413      	add	r3, r2
 8007a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	00da      	lsls	r2, r3, #3
 8007a94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a98:	4413      	add	r3, r2
 8007a9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8007aa8:	d91d      	bls.n	8007ae6 <USB_EPStartXfer+0x13b8>
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aae:	095b      	lsrs	r3, r3, #5
 8007ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <USB_EPStartXfer+0x139c>
 8007ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	029b      	lsls	r3, r3, #10
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ae2:	801a      	strh	r2, [r3, #0]
 8007ae4:	e064      	b.n	8007bb0 <USB_EPStartXfer+0x1482>
 8007ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d116      	bne.n	8007b1c <USB_EPStartXfer+0x13ee>
 8007aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b00:	801a      	strh	r2, [r3, #0]
 8007b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b18:	801a      	strh	r2, [r3, #0]
 8007b1a:	e049      	b.n	8007bb0 <USB_EPStartXfer+0x1482>
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b20:	085b      	lsrs	r3, r3, #1
 8007b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d004      	beq.n	8007b3c <USB_EPStartXfer+0x140e>
 8007b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b36:	3301      	adds	r3, #1
 8007b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	029b      	lsls	r3, r3, #10
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b4a:	801a      	strh	r2, [r3, #0]
 8007b4c:	e030      	b.n	8007bb0 <USB_EPStartXfer+0x1482>
 8007b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d128      	bne.n	8007bb0 <USB_EPStartXfer+0x1482>
 8007b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b82:	4413      	add	r3, r2
 8007b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	00da      	lsls	r2, r3, #3
 8007b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d178      	bne.n	8007cc0 <USB_EPStartXfer+0x1592>
 8007bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	00da      	lsls	r2, r3, #3
 8007c06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c18:	2b3e      	cmp	r3, #62	; 0x3e
 8007c1a:	d91d      	bls.n	8007c58 <USB_EPStartXfer+0x152a>
 8007c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c20:	095b      	lsrs	r3, r3, #5
 8007c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d104      	bne.n	8007c3c <USB_EPStartXfer+0x150e>
 8007c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c36:	3b01      	subs	r3, #1
 8007c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	029b      	lsls	r3, r3, #10
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c54:	801a      	strh	r2, [r3, #0]
 8007c56:	e060      	b.n	8007d1a <USB_EPStartXfer+0x15ec>
 8007c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d116      	bne.n	8007c8e <USB_EPStartXfer+0x1560>
 8007c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e045      	b.n	8007d1a <USB_EPStartXfer+0x15ec>
 8007c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d004      	beq.n	8007cae <USB_EPStartXfer+0x1580>
 8007ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ca8:	3301      	adds	r3, #1
 8007caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	029b      	lsls	r3, r3, #10
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	e02c      	b.n	8007d1a <USB_EPStartXfer+0x15ec>
 8007cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d124      	bne.n	8007d1a <USB_EPStartXfer+0x15ec>
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	00da      	lsls	r2, r3, #3
 8007cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007cfe:	4413      	add	r3, r2
 8007d00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	e001      	b.n	8007d1a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e03a      	b.n	8007d90 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007d44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007d48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007d50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007d54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	441a      	add	r2, r3
 8007d76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	785b      	ldrb	r3, [r3, #1]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d020      	beq.n	8007dee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc2:	81bb      	strh	r3, [r7, #12]
 8007dc4:	89bb      	ldrh	r3, [r7, #12]
 8007dc6:	f083 0310 	eor.w	r3, r3, #16
 8007dca:	81bb      	strh	r3, [r7, #12]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	441a      	add	r2, r3
 8007dd6:	89bb      	ldrh	r3, [r7, #12]
 8007dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	8013      	strh	r3, [r2, #0]
 8007dec:	e01f      	b.n	8007e2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e04:	81fb      	strh	r3, [r7, #14]
 8007e06:	89fb      	ldrh	r3, [r7, #14]
 8007e08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e0c:	81fb      	strh	r3, [r7, #14]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	441a      	add	r2, r3
 8007e18:	89fb      	ldrh	r3, [r7, #14]
 8007e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	7b1b      	ldrb	r3, [r3, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f040 809d 	bne.w	8007f8a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d04c      	beq.n	8007ef2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	823b      	strh	r3, [r7, #16]
 8007e66:	8a3b      	ldrh	r3, [r7, #16]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <USB_EPClearStall+0x6c>
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e86:	81fb      	strh	r3, [r7, #14]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	441a      	add	r2, r3
 8007e92:	89fb      	ldrh	r3, [r7, #14]
 8007e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	78db      	ldrb	r3, [r3, #3]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d06c      	beq.n	8007f8a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ec6:	81bb      	strh	r3, [r7, #12]
 8007ec8:	89bb      	ldrh	r3, [r7, #12]
 8007eca:	f083 0320 	eor.w	r3, r3, #32
 8007ece:	81bb      	strh	r3, [r7, #12]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	441a      	add	r2, r3
 8007eda:	89bb      	ldrh	r3, [r7, #12]
 8007edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	8013      	strh	r3, [r2, #0]
 8007ef0:	e04b      	b.n	8007f8a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	82fb      	strh	r3, [r7, #22]
 8007f00:	8afb      	ldrh	r3, [r7, #22]
 8007f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01b      	beq.n	8007f42 <USB_EPClearStall+0x106>
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f20:	82bb      	strh	r3, [r7, #20]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	441a      	add	r2, r3
 8007f2c:	8abb      	ldrh	r3, [r7, #20]
 8007f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f58:	827b      	strh	r3, [r7, #18]
 8007f5a:	8a7b      	ldrh	r3, [r7, #18]
 8007f5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f60:	827b      	strh	r3, [r7, #18]
 8007f62:	8a7b      	ldrh	r3, [r7, #18]
 8007f64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f68:	827b      	strh	r3, [r7, #18]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	441a      	add	r2, r3
 8007f74:	8a7b      	ldrh	r3, [r7, #18]
 8007f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	371c      	adds	r7, #28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d103      	bne.n	8007fb2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2280      	movs	r2, #128	; 0x80
 8007fae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008000:	68fb      	ldr	r3, [r7, #12]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800800e:	b480      	push	{r7}
 8008010:	b08d      	sub	sp, #52	; 0x34
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	4611      	mov	r1, r2
 800801a:	461a      	mov	r2, r3
 800801c:	460b      	mov	r3, r1
 800801e:	80fb      	strh	r3, [r7, #6]
 8008020:	4613      	mov	r3, r2
 8008022:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008024:	88bb      	ldrh	r3, [r7, #4]
 8008026:	3301      	adds	r3, #1
 8008028:	085b      	lsrs	r3, r3, #1
 800802a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008034:	88fa      	ldrh	r2, [r7, #6]
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008044:	e01b      	b.n	800807e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	3301      	adds	r3, #1
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	021b      	lsls	r3, r3, #8
 800805a:	b29b      	uxth	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	b29a      	uxth	r2, r3
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	3302      	adds	r3, #2
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	3301      	adds	r3, #1
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807a:	3b01      	subs	r3, #1
 800807c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e0      	bne.n	8008046 <USB_WritePMA+0x38>
  }
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	3734      	adds	r7, #52	; 0x34
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008092:	b480      	push	{r7}
 8008094:	b08b      	sub	sp, #44	; 0x2c
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	4611      	mov	r1, r2
 800809e:	461a      	mov	r2, r3
 80080a0:	460b      	mov	r3, r1
 80080a2:	80fb      	strh	r3, [r7, #6]
 80080a4:	4613      	mov	r3, r2
 80080a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80080a8:	88bb      	ldrh	r3, [r7, #4]
 80080aa:	085b      	lsrs	r3, r3, #1
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080b8:	88fa      	ldrh	r2, [r7, #6]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
 80080c8:	e018      	b.n	80080fc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	3302      	adds	r3, #2
 80080d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	3301      	adds	r3, #1
 80080e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	0a1b      	lsrs	r3, r3, #8
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	3301      	adds	r3, #1
 80080f4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	3b01      	subs	r3, #1
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e3      	bne.n	80080ca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008102:	88bb      	ldrh	r3, [r7, #4]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	b2da      	uxtb	r2, r3
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	701a      	strb	r2, [r3, #0]
  }
}
 800811e:	bf00      	nop
 8008120:	372c      	adds	r7, #44	; 0x2c
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008136:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800813a:	f002 f901 	bl	800a340 <USBD_static_malloc>
 800813e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d105      	bne.n	8008152 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800814e:	2302      	movs	r3, #2
 8008150:	e066      	b.n	8008220 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	7c1b      	ldrb	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d119      	bne.n	8008196 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008166:	2202      	movs	r2, #2
 8008168:	2181      	movs	r1, #129	; 0x81
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 ff8d 	bl	800a08a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800817a:	2202      	movs	r2, #2
 800817c:	2101      	movs	r1, #1
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 ff83 	bl	800a08a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2210      	movs	r2, #16
 8008190:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008194:	e016      	b.n	80081c4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008196:	2340      	movs	r3, #64	; 0x40
 8008198:	2202      	movs	r2, #2
 800819a:	2181      	movs	r1, #129	; 0x81
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 ff74 	bl	800a08a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081a8:	2340      	movs	r3, #64	; 0x40
 80081aa:	2202      	movs	r2, #2
 80081ac:	2101      	movs	r1, #1
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 ff6b 	bl	800a08a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2210      	movs	r2, #16
 80081c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081c4:	2308      	movs	r3, #8
 80081c6:	2203      	movs	r2, #3
 80081c8:	2182      	movs	r1, #130	; 0x82
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 ff5d 	bl	800a08a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7c1b      	ldrb	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d109      	bne.n	800820e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008204:	2101      	movs	r1, #1
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f002 f82f 	bl	800a26a <USBD_LL_PrepareReceive>
 800820c:	e007      	b.n	800821e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008214:	2340      	movs	r3, #64	; 0x40
 8008216:	2101      	movs	r1, #1
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f002 f826 	bl	800a26a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008234:	2181      	movs	r1, #129	; 0x81
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f001 ff4d 	bl	800a0d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008242:	2101      	movs	r1, #1
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 ff46 	bl	800a0d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008252:	2182      	movs	r1, #130	; 0x82
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 ff3e 	bl	800a0d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00e      	beq.n	8008292 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008284:	4618      	mov	r0, r3
 8008286:	f002 f869 	bl	800a35c <USBD_static_free>
    pdev->pClassData = NULL;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e0af      	b.n	8008424 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d03f      	beq.n	8008350 <USBD_CDC_Setup+0xb4>
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	f040 809f 	bne.w	8008414 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d02e      	beq.n	800833c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	b25b      	sxtb	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	da16      	bge.n	8008316 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80082f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	88d2      	ldrh	r2, [r2, #6]
 80082fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	88db      	ldrh	r3, [r3, #6]
 8008300:	2b07      	cmp	r3, #7
 8008302:	bf28      	it	cs
 8008304:	2307      	movcs	r3, #7
 8008306:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	89fa      	ldrh	r2, [r7, #14]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 facf 	bl	80098b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008314:	e085      	b.n	8008422 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	785a      	ldrb	r2, [r3, #1]
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	88db      	ldrh	r3, [r3, #6]
 8008324:	b2da      	uxtb	r2, r3
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800832c:	6939      	ldr	r1, [r7, #16]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	88db      	ldrh	r3, [r3, #6]
 8008332:	461a      	mov	r2, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fae8 	bl	800990a <USBD_CtlPrepareRx>
      break;
 800833a:	e072      	b.n	8008422 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	7850      	ldrb	r0, [r2, #1]
 8008348:	2200      	movs	r2, #0
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	4798      	blx	r3
      break;
 800834e:	e068      	b.n	8008422 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	785b      	ldrb	r3, [r3, #1]
 8008354:	2b0b      	cmp	r3, #11
 8008356:	d852      	bhi.n	80083fe <USBD_CDC_Setup+0x162>
 8008358:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <USBD_CDC_Setup+0xc4>)
 800835a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835e:	bf00      	nop
 8008360:	08008391 	.word	0x08008391
 8008364:	0800840d 	.word	0x0800840d
 8008368:	080083ff 	.word	0x080083ff
 800836c:	080083ff 	.word	0x080083ff
 8008370:	080083ff 	.word	0x080083ff
 8008374:	080083ff 	.word	0x080083ff
 8008378:	080083ff 	.word	0x080083ff
 800837c:	080083ff 	.word	0x080083ff
 8008380:	080083ff 	.word	0x080083ff
 8008384:	080083ff 	.word	0x080083ff
 8008388:	080083bb 	.word	0x080083bb
 800838c:	080083e5 	.word	0x080083e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b03      	cmp	r3, #3
 800839a:	d107      	bne.n	80083ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800839c:	f107 030a 	add.w	r3, r7, #10
 80083a0:	2202      	movs	r2, #2
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fa84 	bl	80098b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083aa:	e032      	b.n	8008412 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fa0e 	bl	80097d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80083b4:	2303      	movs	r3, #3
 80083b6:	75fb      	strb	r3, [r7, #23]
          break;
 80083b8:	e02b      	b.n	8008412 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d107      	bne.n	80083d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083c6:	f107 030d 	add.w	r3, r7, #13
 80083ca:	2201      	movs	r2, #1
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fa6f 	bl	80098b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083d4:	e01d      	b.n	8008412 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 f9f9 	bl	80097d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80083de:	2303      	movs	r3, #3
 80083e0:	75fb      	strb	r3, [r7, #23]
          break;
 80083e2:	e016      	b.n	8008412 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d00f      	beq.n	8008410 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 f9ec 	bl	80097d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80083f8:	2303      	movs	r3, #3
 80083fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083fc:	e008      	b.n	8008410 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 f9e5 	bl	80097d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008406:	2303      	movs	r3, #3
 8008408:	75fb      	strb	r3, [r7, #23]
          break;
 800840a:	e002      	b.n	8008412 <USBD_CDC_Setup+0x176>
          break;
 800840c:	bf00      	nop
 800840e:	e008      	b.n	8008422 <USBD_CDC_Setup+0x186>
          break;
 8008410:	bf00      	nop
      }
      break;
 8008412:	e006      	b.n	8008422 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 f9da 	bl	80097d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800841c:	2303      	movs	r3, #3
 800841e:	75fb      	strb	r3, [r7, #23]
      break;
 8008420:	bf00      	nop
  }

  return (uint8_t)ret;
 8008422:	7dfb      	ldrb	r3, [r7, #23]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800843e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800844a:	2303      	movs	r3, #3
 800844c:	e04f      	b.n	80084ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008454:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	4613      	mov	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	440b      	add	r3, r1
 8008464:	3318      	adds	r3, #24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d029      	beq.n	80084c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800846c:	78fa      	ldrb	r2, [r7, #3]
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	440b      	add	r3, r1
 800847a:	3318      	adds	r3, #24
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	78f9      	ldrb	r1, [r7, #3]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	460b      	mov	r3, r1
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	440b      	add	r3, r1
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	4403      	add	r3, r0
 800848c:	3338      	adds	r3, #56	; 0x38
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	fbb2 f1f3 	udiv	r1, r2, r3
 8008494:	fb01 f303 	mul.w	r3, r1, r3
 8008498:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800849a:	2b00      	cmp	r3, #0
 800849c:	d110      	bne.n	80084c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800849e:	78fa      	ldrb	r2, [r7, #3]
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	440b      	add	r3, r1
 80084ac:	3318      	adds	r3, #24
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084b2:	78f9      	ldrb	r1, [r7, #3]
 80084b4:	2300      	movs	r3, #0
 80084b6:	2200      	movs	r2, #0
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 feb5 	bl	800a228 <USBD_LL_Transmit>
 80084be:	e015      	b.n	80084ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008508:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008514:	2303      	movs	r3, #3
 8008516:	e015      	b.n	8008544 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fec5 	bl	800a2ac <USBD_LL_GetRxDataSize>
 8008522:	4602      	mov	r2, r0
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800853e:	4611      	mov	r1, r2
 8008540:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800855a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008562:	2303      	movs	r3, #3
 8008564:	e01b      	b.n	800859e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d015      	beq.n	800859c <USBD_CDC_EP0_RxReady+0x50>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008576:	2bff      	cmp	r3, #255	; 0xff
 8008578:	d010      	beq.n	800859c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008588:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008590:	b292      	uxth	r2, r2
 8008592:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	22ff      	movs	r2, #255	; 0xff
 8008598:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2243      	movs	r2, #67	; 0x43
 80085b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80085b6:	4b03      	ldr	r3, [pc, #12]	; (80085c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	200000d4 	.word	0x200000d4

080085c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2243      	movs	r2, #67	; 0x43
 80085d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80085d6:	4b03      	ldr	r3, [pc, #12]	; (80085e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80085d8:	4618      	mov	r0, r3
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	20000090 	.word	0x20000090

080085e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2243      	movs	r2, #67	; 0x43
 80085f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80085f6:	4b03      	ldr	r3, [pc, #12]	; (8008604 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	20000118 	.word	0x20000118

08008608 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	220a      	movs	r2, #10
 8008614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008616:	4b03      	ldr	r3, [pc, #12]	; (8008624 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	2000004c 	.word	0x2000004c

08008628 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008638:	2303      	movs	r3, #3
 800863a:	e004      	b.n	8008646 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008652:	b480      	push	{r7}
 8008654:	b087      	sub	sp, #28
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008664:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800866c:	2303      	movs	r3, #3
 800866e:	e008      	b.n	8008682 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	371c      	adds	r7, #28
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800869e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e004      	b.n	80086b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80086d0:	2301      	movs	r3, #1
 80086d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086de:	2303      	movs	r3, #3
 80086e0:	e01a      	b.n	8008718 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d114      	bne.n	8008716 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800870a:	2181      	movs	r1, #129	; 0x81
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 fd8b 	bl	800a228 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800872e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	e016      	b.n	800876c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	7c1b      	ldrb	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800874c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008750:	2101      	movs	r1, #1
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fd89 	bl	800a26a <USBD_LL_PrepareReceive>
 8008758:	e007      	b.n	800876a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	2101      	movs	r1, #1
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 fd80 	bl	800a26a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008788:	2303      	movs	r3, #3
 800878a:	e01f      	b.n	80087cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	79fa      	ldrb	r2, [r7, #7]
 80087be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f001 fbe7 	bl	8009f94 <USBD_LL_Init>
 80087c6:	4603      	mov	r3, r0
 80087c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e016      	b.n	800881a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	f107 020e 	add.w	r2, r7, #14
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3
 8008810:	4602      	mov	r2, r0
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fc12 	bl	800a054 <USBD_LL_Start>
 8008830:	4603      	mov	r3, r0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800885c:	2303      	movs	r3, #3
 800885e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d009      	beq.n	800887e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	4611      	mov	r1, r2
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	4611      	mov	r1, r2
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
  }

  return USBD_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 ff46 	bl	800975c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80088de:	461a      	mov	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088ec:	f003 031f 	and.w	r3, r3, #31
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d01a      	beq.n	800892a <USBD_LL_SetupStage+0x72>
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d822      	bhi.n	800893e <USBD_LL_SetupStage+0x86>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <USBD_LL_SetupStage+0x4a>
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d00a      	beq.n	8008916 <USBD_LL_SetupStage+0x5e>
 8008900:	e01d      	b.n	800893e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f9ee 	bl	8008cec <USBD_StdDevReq>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]
      break;
 8008914:	e020      	b.n	8008958 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa52 	bl	8008dc8 <USBD_StdItfReq>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
      break;
 8008928:	e016      	b.n	8008958 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fa91 	bl	8008e5a <USBD_StdEPReq>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
      break;
 800893c:	e00c      	b.n	8008958 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008944:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008948:	b2db      	uxtb	r3, r3
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 fbe1 	bl	800a114 <USBD_LL_StallEP>
 8008952:	4603      	mov	r3, r0
 8008954:	73fb      	strb	r3, [r7, #15]
      break;
 8008956:	bf00      	nop
  }

  return ret;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b086      	sub	sp, #24
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	460b      	mov	r3, r1
 800896c:	607a      	str	r2, [r7, #4]
 800896e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008970:	7afb      	ldrb	r3, [r7, #11]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d138      	bne.n	80089e8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800897c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008984:	2b03      	cmp	r3, #3
 8008986:	d14a      	bne.n	8008a1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	429a      	cmp	r2, r3
 8008992:	d913      	bls.n	80089bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	1ad2      	subs	r2, r2, r3
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	4293      	cmp	r3, r2
 80089ac:	bf28      	it	cs
 80089ae:	4613      	movcs	r3, r2
 80089b0:	461a      	mov	r2, r3
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 ffc5 	bl	8009944 <USBD_CtlContinueRx>
 80089ba:	e030      	b.n	8008a1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d10b      	bne.n	80089e0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 ffc0 	bl	8009966 <USBD_CtlSendStatus>
 80089e6:	e01a      	b.n	8008a1e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d114      	bne.n	8008a1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00e      	beq.n	8008a1e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	7afa      	ldrb	r2, [r7, #11]
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	4798      	blx	r3
 8008a10:	4603      	mov	r3, r0
 8008a12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	e000      	b.n	8008a20 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	460b      	mov	r3, r1
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d16b      	bne.n	8008b14 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3314      	adds	r3, #20
 8008a40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d156      	bne.n	8008afa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d914      	bls.n	8008a82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	1ad2      	subs	r2, r2, r3
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 ff3a 	bl	80098e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a74:	2300      	movs	r3, #0
 8008a76:	2200      	movs	r2, #0
 8008a78:	2100      	movs	r1, #0
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f001 fbf5 	bl	800a26a <USBD_LL_PrepareReceive>
 8008a80:	e03b      	b.n	8008afa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d11c      	bne.n	8008ac8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d316      	bcc.n	8008ac8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d20f      	bcs.n	8008ac8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2100      	movs	r1, #0
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 ff1b 	bl	80098e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aba:	2300      	movs	r3, #0
 8008abc:	2200      	movs	r2, #0
 8008abe:	2100      	movs	r1, #0
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f001 fbd2 	bl	800a26a <USBD_LL_PrepareReceive>
 8008ac6:	e018      	b.n	8008afa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d10b      	bne.n	8008aec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d005      	beq.n	8008aec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aec:	2180      	movs	r1, #128	; 0x80
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f001 fb10 	bl	800a114 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 ff49 	bl	800998c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d122      	bne.n	8008b4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f7ff fe98 	bl	800883a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b12:	e01a      	b.n	8008b4a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d114      	bne.n	8008b4a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00e      	beq.n	8008b4a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	7afa      	ldrb	r2, [r7, #11]
 8008b36:	4611      	mov	r1, r2
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	4798      	blx	r3
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	e000      	b.n	8008b4c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e02f      	b.n	8008be8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00f      	beq.n	8008bb2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d009      	beq.n	8008bb2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6852      	ldr	r2, [r2, #4]
 8008baa:	b2d2      	uxtb	r2, r2
 8008bac:	4611      	mov	r1, r2
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bb2:	2340      	movs	r3, #64	; 0x40
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 fa66 	bl	800a08a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2240      	movs	r2, #64	; 0x40
 8008bca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bce:	2340      	movs	r3, #64	; 0x40
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2180      	movs	r1, #128	; 0x80
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 fa58 	bl	800a08a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2240      	movs	r2, #64	; 0x40
 8008be4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2204      	movs	r2, #4
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	d106      	bne.n	8008c5e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e012      	b.n	8008ca8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d10b      	bne.n	8008ca6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d005      	beq.n	8008ca6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cce:	8a3b      	ldrh	r3, [r7, #16]
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	b21a      	sxth	r2, r3
 8008cd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	b21b      	sxth	r3, r3
 8008cdc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cde:	89fb      	ldrh	r3, [r7, #14]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d02:	2b40      	cmp	r3, #64	; 0x40
 8008d04:	d005      	beq.n	8008d12 <USBD_StdDevReq+0x26>
 8008d06:	2b40      	cmp	r3, #64	; 0x40
 8008d08:	d853      	bhi.n	8008db2 <USBD_StdDevReq+0xc6>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00b      	beq.n	8008d26 <USBD_StdDevReq+0x3a>
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d14f      	bne.n	8008db2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	4798      	blx	r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
      break;
 8008d24:	e04a      	b.n	8008dbc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b09      	cmp	r3, #9
 8008d2c:	d83b      	bhi.n	8008da6 <USBD_StdDevReq+0xba>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <USBD_StdDevReq+0x48>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d89 	.word	0x08008d89
 8008d38:	08008d9d 	.word	0x08008d9d
 8008d3c:	08008da7 	.word	0x08008da7
 8008d40:	08008d93 	.word	0x08008d93
 8008d44:	08008da7 	.word	0x08008da7
 8008d48:	08008d67 	.word	0x08008d67
 8008d4c:	08008d5d 	.word	0x08008d5d
 8008d50:	08008da7 	.word	0x08008da7
 8008d54:	08008d7f 	.word	0x08008d7f
 8008d58:	08008d71 	.word	0x08008d71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f9de 	bl	8009120 <USBD_GetDescriptor>
          break;
 8008d64:	e024      	b.n	8008db0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fb6d 	bl	8009448 <USBD_SetAddress>
          break;
 8008d6e:	e01f      	b.n	8008db0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fbac 	bl	80094d0 <USBD_SetConfig>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73fb      	strb	r3, [r7, #15]
          break;
 8008d7c:	e018      	b.n	8008db0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fc4b 	bl	800961c <USBD_GetConfig>
          break;
 8008d86:	e013      	b.n	8008db0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fc7c 	bl	8009688 <USBD_GetStatus>
          break;
 8008d90:	e00e      	b.n	8008db0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fcab 	bl	80096f0 <USBD_SetFeature>
          break;
 8008d9a:	e009      	b.n	8008db0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fcba 	bl	8009718 <USBD_ClrFeature>
          break;
 8008da4:	e004      	b.n	8008db0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fd11 	bl	80097d0 <USBD_CtlError>
          break;
 8008dae:	bf00      	nop
      }
      break;
 8008db0:	e004      	b.n	8008dbc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fd0b 	bl	80097d0 <USBD_CtlError>
      break;
 8008dba:	bf00      	nop
  }

  return ret;
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop

08008dc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dde:	2b40      	cmp	r3, #64	; 0x40
 8008de0:	d005      	beq.n	8008dee <USBD_StdItfReq+0x26>
 8008de2:	2b40      	cmp	r3, #64	; 0x40
 8008de4:	d82f      	bhi.n	8008e46 <USBD_StdItfReq+0x7e>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <USBD_StdItfReq+0x26>
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d12b      	bne.n	8008e46 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	3b01      	subs	r3, #1
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d81d      	bhi.n	8008e38 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	889b      	ldrh	r3, [r3, #4]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d813      	bhi.n	8008e2e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
 8008e14:	4603      	mov	r3, r0
 8008e16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	88db      	ldrh	r3, [r3, #6]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d110      	bne.n	8008e42 <USBD_StdItfReq+0x7a>
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10d      	bne.n	8008e42 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fd9d 	bl	8009966 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e2c:	e009      	b.n	8008e42 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fccd 	bl	80097d0 <USBD_CtlError>
          break;
 8008e36:	e004      	b.n	8008e42 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fcc8 	bl	80097d0 <USBD_CtlError>
          break;
 8008e40:	e000      	b.n	8008e44 <USBD_StdItfReq+0x7c>
          break;
 8008e42:	bf00      	nop
      }
      break;
 8008e44:	e004      	b.n	8008e50 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fcc1 	bl	80097d0 <USBD_CtlError>
      break;
 8008e4e:	bf00      	nop
  }

  return ret;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	889b      	ldrh	r3, [r3, #4]
 8008e6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e76:	2b40      	cmp	r3, #64	; 0x40
 8008e78:	d007      	beq.n	8008e8a <USBD_StdEPReq+0x30>
 8008e7a:	2b40      	cmp	r3, #64	; 0x40
 8008e7c:	f200 8145 	bhi.w	800910a <USBD_StdEPReq+0x2b0>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00c      	beq.n	8008e9e <USBD_StdEPReq+0x44>
 8008e84:	2b20      	cmp	r3, #32
 8008e86:	f040 8140 	bne.w	800910a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	4798      	blx	r3
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e9c:	e13a      	b.n	8009114 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d007      	beq.n	8008eb6 <USBD_StdEPReq+0x5c>
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	f300 8129 	bgt.w	80090fe <USBD_StdEPReq+0x2a4>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d07f      	beq.n	8008fb0 <USBD_StdEPReq+0x156>
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d03c      	beq.n	8008f2e <USBD_StdEPReq+0xd4>
 8008eb4:	e123      	b.n	80090fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d002      	beq.n	8008ec8 <USBD_StdEPReq+0x6e>
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d016      	beq.n	8008ef4 <USBD_StdEPReq+0x9a>
 8008ec6:	e02c      	b.n	8008f22 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00d      	beq.n	8008eea <USBD_StdEPReq+0x90>
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	2b80      	cmp	r3, #128	; 0x80
 8008ed2:	d00a      	beq.n	8008eea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 f91b 	bl	800a114 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ede:	2180      	movs	r1, #128	; 0x80
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 f917 	bl	800a114 <USBD_LL_StallEP>
 8008ee6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ee8:	e020      	b.n	8008f2c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fc6f 	bl	80097d0 <USBD_CtlError>
              break;
 8008ef2:	e01b      	b.n	8008f2c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	885b      	ldrh	r3, [r3, #2]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10e      	bne.n	8008f1a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00b      	beq.n	8008f1a <USBD_StdEPReq+0xc0>
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b80      	cmp	r3, #128	; 0x80
 8008f06:	d008      	beq.n	8008f1a <USBD_StdEPReq+0xc0>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	88db      	ldrh	r3, [r3, #6]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 f8fd 	bl	800a114 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fd23 	bl	8009966 <USBD_CtlSendStatus>

              break;
 8008f20:	e004      	b.n	8008f2c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fc53 	bl	80097d0 <USBD_CtlError>
              break;
 8008f2a:	bf00      	nop
          }
          break;
 8008f2c:	e0ec      	b.n	8009108 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d002      	beq.n	8008f40 <USBD_StdEPReq+0xe6>
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d016      	beq.n	8008f6c <USBD_StdEPReq+0x112>
 8008f3e:	e030      	b.n	8008fa2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00d      	beq.n	8008f62 <USBD_StdEPReq+0x108>
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b80      	cmp	r3, #128	; 0x80
 8008f4a:	d00a      	beq.n	8008f62 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 f8df 	bl	800a114 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f56:	2180      	movs	r1, #128	; 0x80
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f8db 	bl	800a114 <USBD_LL_StallEP>
 8008f5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f60:	e025      	b.n	8008fae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008f62:	6839      	ldr	r1, [r7, #0]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fc33 	bl	80097d0 <USBD_CtlError>
              break;
 8008f6a:	e020      	b.n	8008fae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	885b      	ldrh	r3, [r3, #2]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d11b      	bne.n	8008fac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d004      	beq.n	8008f88 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 f8e5 	bl	800a152 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fcec 	bl	8009966 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008fa0:	e004      	b.n	8008fac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fc13 	bl	80097d0 <USBD_CtlError>
              break;
 8008faa:	e000      	b.n	8008fae <USBD_StdEPReq+0x154>
              break;
 8008fac:	bf00      	nop
          }
          break;
 8008fae:	e0ab      	b.n	8009108 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d002      	beq.n	8008fc2 <USBD_StdEPReq+0x168>
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d032      	beq.n	8009026 <USBD_StdEPReq+0x1cc>
 8008fc0:	e097      	b.n	80090f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d007      	beq.n	8008fd8 <USBD_StdEPReq+0x17e>
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	2b80      	cmp	r3, #128	; 0x80
 8008fcc:	d004      	beq.n	8008fd8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fbfd 	bl	80097d0 <USBD_CtlError>
                break;
 8008fd6:	e091      	b.n	80090fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	da0b      	bge.n	8008ff8 <USBD_StdEPReq+0x19e>
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	3310      	adds	r3, #16
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	e00b      	b.n	8009010 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ffe:	4613      	mov	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	4413      	add	r3, r2
 800900e:	3304      	adds	r3, #4
 8009010:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2200      	movs	r2, #0
 8009016:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2202      	movs	r2, #2
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fc47 	bl	80098b2 <USBD_CtlSendData>
              break;
 8009024:	e06a      	b.n	80090fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009026:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800902a:	2b00      	cmp	r3, #0
 800902c:	da11      	bge.n	8009052 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	f003 020f 	and.w	r2, r3, #15
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	440b      	add	r3, r1
 8009040:	3324      	adds	r3, #36	; 0x24
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d117      	bne.n	8009078 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fbc0 	bl	80097d0 <USBD_CtlError>
                  break;
 8009050:	e054      	b.n	80090fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	f003 020f 	and.w	r2, r3, #15
 8009058:	6879      	ldr	r1, [r7, #4]
 800905a:	4613      	mov	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	440b      	add	r3, r1
 8009064:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d104      	bne.n	8009078 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fbad 	bl	80097d0 <USBD_CtlError>
                  break;
 8009076:	e041      	b.n	80090fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800907c:	2b00      	cmp	r3, #0
 800907e:	da0b      	bge.n	8009098 <USBD_StdEPReq+0x23e>
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	3310      	adds	r3, #16
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	4413      	add	r3, r2
 8009094:	3304      	adds	r3, #4
 8009096:	e00b      	b.n	80090b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	4413      	add	r3, r2
 80090ae:	3304      	adds	r3, #4
 80090b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <USBD_StdEPReq+0x264>
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	2b80      	cmp	r3, #128	; 0x80
 80090bc:	d103      	bne.n	80090c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2200      	movs	r2, #0
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e00e      	b.n	80090e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f001 f860 	bl	800a190 <USBD_LL_IsStallEP>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2201      	movs	r2, #1
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	e002      	b.n	80090e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2202      	movs	r2, #2
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fbe1 	bl	80098b2 <USBD_CtlSendData>
              break;
 80090f0:	e004      	b.n	80090fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fb6b 	bl	80097d0 <USBD_CtlError>
              break;
 80090fa:	bf00      	nop
          }
          break;
 80090fc:	e004      	b.n	8009108 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fb65 	bl	80097d0 <USBD_CtlError>
          break;
 8009106:	bf00      	nop
      }
      break;
 8009108:	e004      	b.n	8009114 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fb5f 	bl	80097d0 <USBD_CtlError>
      break;
 8009112:	bf00      	nop
  }

  return ret;
 8009114:	7bfb      	ldrb	r3, [r7, #15]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	885b      	ldrh	r3, [r3, #2]
 800913a:	0a1b      	lsrs	r3, r3, #8
 800913c:	b29b      	uxth	r3, r3
 800913e:	3b01      	subs	r3, #1
 8009140:	2b0e      	cmp	r3, #14
 8009142:	f200 8152 	bhi.w	80093ea <USBD_GetDescriptor+0x2ca>
 8009146:	a201      	add	r2, pc, #4	; (adr r2, 800914c <USBD_GetDescriptor+0x2c>)
 8009148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914c:	080091bd 	.word	0x080091bd
 8009150:	080091d5 	.word	0x080091d5
 8009154:	08009215 	.word	0x08009215
 8009158:	080093eb 	.word	0x080093eb
 800915c:	080093eb 	.word	0x080093eb
 8009160:	0800938b 	.word	0x0800938b
 8009164:	080093b7 	.word	0x080093b7
 8009168:	080093eb 	.word	0x080093eb
 800916c:	080093eb 	.word	0x080093eb
 8009170:	080093eb 	.word	0x080093eb
 8009174:	080093eb 	.word	0x080093eb
 8009178:	080093eb 	.word	0x080093eb
 800917c:	080093eb 	.word	0x080093eb
 8009180:	080093eb 	.word	0x080093eb
 8009184:	08009189 	.word	0x08009189
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	7c12      	ldrb	r2, [r2, #16]
 80091a0:	f107 0108 	add.w	r1, r7, #8
 80091a4:	4610      	mov	r0, r2
 80091a6:	4798      	blx	r3
 80091a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091aa:	e126      	b.n	80093fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fb0e 	bl	80097d0 <USBD_CtlError>
        err++;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	3301      	adds	r3, #1
 80091b8:	72fb      	strb	r3, [r7, #11]
      break;
 80091ba:	e11e      	b.n	80093fa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	7c12      	ldrb	r2, [r2, #16]
 80091c8:	f107 0108 	add.w	r1, r7, #8
 80091cc:	4610      	mov	r0, r2
 80091ce:	4798      	blx	r3
 80091d0:	60f8      	str	r0, [r7, #12]
      break;
 80091d2:	e112      	b.n	80093fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	7c1b      	ldrb	r3, [r3, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10d      	bne.n	80091f8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	f107 0208 	add.w	r2, r7, #8
 80091e8:	4610      	mov	r0, r2
 80091ea:	4798      	blx	r3
 80091ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3301      	adds	r3, #1
 80091f2:	2202      	movs	r2, #2
 80091f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091f6:	e100      	b.n	80093fa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	f107 0208 	add.w	r2, r7, #8
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
 8009208:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3301      	adds	r3, #1
 800920e:	2202      	movs	r2, #2
 8009210:	701a      	strb	r2, [r3, #0]
      break;
 8009212:	e0f2      	b.n	80093fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	885b      	ldrh	r3, [r3, #2]
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b05      	cmp	r3, #5
 800921c:	f200 80ac 	bhi.w	8009378 <USBD_GetDescriptor+0x258>
 8009220:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <USBD_GetDescriptor+0x108>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	08009241 	.word	0x08009241
 800922c:	08009275 	.word	0x08009275
 8009230:	080092a9 	.word	0x080092a9
 8009234:	080092dd 	.word	0x080092dd
 8009238:	08009311 	.word	0x08009311
 800923c:	08009345 	.word	0x08009345
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	7c12      	ldrb	r2, [r2, #16]
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009262:	e091      	b.n	8009388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fab2 	bl	80097d0 <USBD_CtlError>
            err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
          break;
 8009272:	e089      	b.n	8009388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009296:	e077      	b.n	8009388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa98 	bl	80097d0 <USBD_CtlError>
            err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
          break;
 80092a6:	e06f      	b.n	8009388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00b      	beq.n	80092cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7c12      	ldrb	r2, [r2, #16]
 80092c0:	f107 0108 	add.w	r1, r7, #8
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ca:	e05d      	b.n	8009388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa7e 	bl	80097d0 <USBD_CtlError>
            err++;
 80092d4:	7afb      	ldrb	r3, [r7, #11]
 80092d6:	3301      	adds	r3, #1
 80092d8:	72fb      	strb	r3, [r7, #11]
          break;
 80092da:	e055      	b.n	8009388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	7c12      	ldrb	r2, [r2, #16]
 80092f4:	f107 0108 	add.w	r1, r7, #8
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fe:	e043      	b.n	8009388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa64 	bl	80097d0 <USBD_CtlError>
            err++;
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	3301      	adds	r3, #1
 800930c:	72fb      	strb	r3, [r7, #11]
          break;
 800930e:	e03b      	b.n	8009388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	7c12      	ldrb	r2, [r2, #16]
 8009328:	f107 0108 	add.w	r1, r7, #8
 800932c:	4610      	mov	r0, r2
 800932e:	4798      	blx	r3
 8009330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009332:	e029      	b.n	8009388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa4a 	bl	80097d0 <USBD_CtlError>
            err++;
 800933c:	7afb      	ldrb	r3, [r7, #11]
 800933e:	3301      	adds	r3, #1
 8009340:	72fb      	strb	r3, [r7, #11]
          break;
 8009342:	e021      	b.n	8009388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00b      	beq.n	8009368 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	7c12      	ldrb	r2, [r2, #16]
 800935c:	f107 0108 	add.w	r1, r7, #8
 8009360:	4610      	mov	r0, r2
 8009362:	4798      	blx	r3
 8009364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009366:	e00f      	b.n	8009388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fa30 	bl	80097d0 <USBD_CtlError>
            err++;
 8009370:	7afb      	ldrb	r3, [r7, #11]
 8009372:	3301      	adds	r3, #1
 8009374:	72fb      	strb	r3, [r7, #11]
          break;
 8009376:	e007      	b.n	8009388 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fa28 	bl	80097d0 <USBD_CtlError>
          err++;
 8009380:	7afb      	ldrb	r3, [r7, #11]
 8009382:	3301      	adds	r3, #1
 8009384:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009386:	bf00      	nop
      }
      break;
 8009388:	e037      	b.n	80093fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	7c1b      	ldrb	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d109      	bne.n	80093a6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939a:	f107 0208 	add.w	r2, r7, #8
 800939e:	4610      	mov	r0, r2
 80093a0:	4798      	blx	r3
 80093a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093a4:	e029      	b.n	80093fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fa11 	bl	80097d0 <USBD_CtlError>
        err++;
 80093ae:	7afb      	ldrb	r3, [r7, #11]
 80093b0:	3301      	adds	r3, #1
 80093b2:	72fb      	strb	r3, [r7, #11]
      break;
 80093b4:	e021      	b.n	80093fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7c1b      	ldrb	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10d      	bne.n	80093da <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c6:	f107 0208 	add.w	r2, r7, #8
 80093ca:	4610      	mov	r0, r2
 80093cc:	4798      	blx	r3
 80093ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	2207      	movs	r2, #7
 80093d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093d8:	e00f      	b.n	80093fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f9f7 	bl	80097d0 <USBD_CtlError>
        err++;
 80093e2:	7afb      	ldrb	r3, [r7, #11]
 80093e4:	3301      	adds	r3, #1
 80093e6:	72fb      	strb	r3, [r7, #11]
      break;
 80093e8:	e007      	b.n	80093fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f9ef 	bl	80097d0 <USBD_CtlError>
      err++;
 80093f2:	7afb      	ldrb	r3, [r7, #11]
 80093f4:	3301      	adds	r3, #1
 80093f6:	72fb      	strb	r3, [r7, #11]
      break;
 80093f8:	bf00      	nop
  }

  if (err != 0U)
 80093fa:	7afb      	ldrb	r3, [r7, #11]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d11e      	bne.n	800943e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	88db      	ldrh	r3, [r3, #6]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d016      	beq.n	8009436 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009408:	893b      	ldrh	r3, [r7, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	88da      	ldrh	r2, [r3, #6]
 8009412:	893b      	ldrh	r3, [r7, #8]
 8009414:	4293      	cmp	r3, r2
 8009416:	bf28      	it	cs
 8009418:	4613      	movcs	r3, r2
 800941a:	b29b      	uxth	r3, r3
 800941c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800941e:	893b      	ldrh	r3, [r7, #8]
 8009420:	461a      	mov	r2, r3
 8009422:	68f9      	ldr	r1, [r7, #12]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fa44 	bl	80098b2 <USBD_CtlSendData>
 800942a:	e009      	b.n	8009440 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f9ce 	bl	80097d0 <USBD_CtlError>
 8009434:	e004      	b.n	8009440 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa95 	bl	8009966 <USBD_CtlSendStatus>
 800943c:	e000      	b.n	8009440 <USBD_GetDescriptor+0x320>
    return;
 800943e:	bf00      	nop
  }
}
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop

08009448 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	889b      	ldrh	r3, [r3, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d131      	bne.n	80094be <USBD_SetAddress+0x76>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	88db      	ldrh	r3, [r3, #6]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d12d      	bne.n	80094be <USBD_SetAddress+0x76>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	885b      	ldrh	r3, [r3, #2]
 8009466:	2b7f      	cmp	r3, #127	; 0x7f
 8009468:	d829      	bhi.n	80094be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	885b      	ldrh	r3, [r3, #2]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009474:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b03      	cmp	r3, #3
 8009480:	d104      	bne.n	800948c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f9a3 	bl	80097d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948a:	e01d      	b.n	80094c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	7bfa      	ldrb	r2, [r7, #15]
 8009490:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fea6 	bl	800a1ea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fa61 	bl	8009966 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2202      	movs	r2, #2
 80094ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b2:	e009      	b.n	80094c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094bc:	e004      	b.n	80094c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f985 	bl	80097d0 <USBD_CtlError>
  }
}
 80094c6:	bf00      	nop
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	885b      	ldrh	r3, [r3, #2]
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	4b4c      	ldr	r3, [pc, #304]	; (8009618 <USBD_SetConfig+0x148>)
 80094e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094e8:	4b4b      	ldr	r3, [pc, #300]	; (8009618 <USBD_SetConfig+0x148>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d905      	bls.n	80094fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f96c 	bl	80097d0 <USBD_CtlError>
    return USBD_FAIL;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e088      	b.n	800960e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d002      	beq.n	800950e <USBD_SetConfig+0x3e>
 8009508:	2b03      	cmp	r3, #3
 800950a:	d025      	beq.n	8009558 <USBD_SetConfig+0x88>
 800950c:	e071      	b.n	80095f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800950e:	4b42      	ldr	r3, [pc, #264]	; (8009618 <USBD_SetConfig+0x148>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d01c      	beq.n	8009550 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009516:	4b40      	ldr	r3, [pc, #256]	; (8009618 <USBD_SetConfig+0x148>)
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009520:	4b3d      	ldr	r3, [pc, #244]	; (8009618 <USBD_SetConfig+0x148>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7ff f992 	bl	8008850 <USBD_SetClassConfig>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f949 	bl	80097d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800953e:	e065      	b.n	800960c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa10 	bl	8009966 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2203      	movs	r2, #3
 800954a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800954e:	e05d      	b.n	800960c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fa08 	bl	8009966 <USBD_CtlSendStatus>
      break;
 8009556:	e059      	b.n	800960c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009558:	4b2f      	ldr	r3, [pc, #188]	; (8009618 <USBD_SetConfig+0x148>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d112      	bne.n	8009586 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009568:	4b2b      	ldr	r3, [pc, #172]	; (8009618 <USBD_SetConfig+0x148>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009572:	4b29      	ldr	r3, [pc, #164]	; (8009618 <USBD_SetConfig+0x148>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff f985 	bl	8008888 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f9f1 	bl	8009966 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009584:	e042      	b.n	800960c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009586:	4b24      	ldr	r3, [pc, #144]	; (8009618 <USBD_SetConfig+0x148>)
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d02a      	beq.n	80095ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff f973 	bl	8008888 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095a2:	4b1d      	ldr	r3, [pc, #116]	; (8009618 <USBD_SetConfig+0x148>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095ac:	4b1a      	ldr	r3, [pc, #104]	; (8009618 <USBD_SetConfig+0x148>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff f94c 	bl	8008850 <USBD_SetClassConfig>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00f      	beq.n	80095e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f903 	bl	80097d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7ff f958 	bl	8008888 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095e0:	e014      	b.n	800960c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f9bf 	bl	8009966 <USBD_CtlSendStatus>
      break;
 80095e8:	e010      	b.n	800960c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f9bb 	bl	8009966 <USBD_CtlSendStatus>
      break;
 80095f0:	e00c      	b.n	800960c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f8eb 	bl	80097d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095fa:	4b07      	ldr	r3, [pc, #28]	; (8009618 <USBD_SetConfig+0x148>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff f941 	bl	8008888 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009606:	2303      	movs	r3, #3
 8009608:	73fb      	strb	r3, [r7, #15]
      break;
 800960a:	bf00      	nop
  }

  return ret;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20000494 	.word	0x20000494

0800961c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	88db      	ldrh	r3, [r3, #6]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d004      	beq.n	8009638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8cd 	bl	80097d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009636:	e023      	b.n	8009680 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b02      	cmp	r3, #2
 8009642:	dc02      	bgt.n	800964a <USBD_GetConfig+0x2e>
 8009644:	2b00      	cmp	r3, #0
 8009646:	dc03      	bgt.n	8009650 <USBD_GetConfig+0x34>
 8009648:	e015      	b.n	8009676 <USBD_GetConfig+0x5a>
 800964a:	2b03      	cmp	r3, #3
 800964c:	d00b      	beq.n	8009666 <USBD_GetConfig+0x4a>
 800964e:	e012      	b.n	8009676 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3308      	adds	r3, #8
 800965a:	2201      	movs	r2, #1
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f927 	bl	80098b2 <USBD_CtlSendData>
        break;
 8009664:	e00c      	b.n	8009680 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3304      	adds	r3, #4
 800966a:	2201      	movs	r2, #1
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f91f 	bl	80098b2 <USBD_CtlSendData>
        break;
 8009674:	e004      	b.n	8009680 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f8a9 	bl	80097d0 <USBD_CtlError>
        break;
 800967e:	bf00      	nop
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	3b01      	subs	r3, #1
 800969c:	2b02      	cmp	r3, #2
 800969e:	d81e      	bhi.n	80096de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	88db      	ldrh	r3, [r3, #6]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d004      	beq.n	80096b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f890 	bl	80097d0 <USBD_CtlError>
        break;
 80096b0:	e01a      	b.n	80096e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d005      	beq.n	80096ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f043 0202 	orr.w	r2, r3, #2
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	330c      	adds	r3, #12
 80096d2:	2202      	movs	r2, #2
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f8eb 	bl	80098b2 <USBD_CtlSendData>
      break;
 80096dc:	e004      	b.n	80096e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f875 	bl	80097d0 <USBD_CtlError>
      break;
 80096e6:	bf00      	nop
  }
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	885b      	ldrh	r3, [r3, #2]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d106      	bne.n	8009710 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f92b 	bl	8009966 <USBD_CtlSendStatus>
  }
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009728:	b2db      	uxtb	r3, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	2b02      	cmp	r3, #2
 800972e:	d80b      	bhi.n	8009748 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	885b      	ldrh	r3, [r3, #2]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d10c      	bne.n	8009752 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f910 	bl	8009966 <USBD_CtlSendStatus>
      }
      break;
 8009746:	e004      	b.n	8009752 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f840 	bl	80097d0 <USBD_CtlError>
      break;
 8009750:	e000      	b.n	8009754 <USBD_ClrFeature+0x3c>
      break;
 8009752:	bf00      	nop
  }
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	781a      	ldrb	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3301      	adds	r3, #1
 8009776:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	781a      	ldrb	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3301      	adds	r3, #1
 8009784:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f7ff fa92 	bl	8008cb0 <SWAPBYTE>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3301      	adds	r3, #1
 8009798:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3301      	adds	r3, #1
 800979e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff fa85 	bl	8008cb0 <SWAPBYTE>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461a      	mov	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f7ff fa78 	bl	8008cb0 <SWAPBYTE>
 80097c0:	4603      	mov	r3, r0
 80097c2:	461a      	mov	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	80da      	strh	r2, [r3, #6]
}
 80097c8:	bf00      	nop
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80097da:	2180      	movs	r1, #128	; 0x80
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fc99 	bl	800a114 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80097e2:	2100      	movs	r1, #0
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fc95 	bl	800a114 <USBD_LL_StallEP>
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b086      	sub	sp, #24
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d036      	beq.n	8009876 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800980c:	6938      	ldr	r0, [r7, #16]
 800980e:	f000 f836 	bl	800987e <USBD_GetLen>
 8009812:	4603      	mov	r3, r0
 8009814:	3301      	adds	r3, #1
 8009816:	b29b      	uxth	r3, r3
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	b29a      	uxth	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	4413      	add	r3, r2
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	7812      	ldrb	r2, [r2, #0]
 800982a:	701a      	strb	r2, [r3, #0]
  idx++;
 800982c:	7dfb      	ldrb	r3, [r7, #23]
 800982e:	3301      	adds	r3, #1
 8009830:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	4413      	add	r3, r2
 8009838:	2203      	movs	r2, #3
 800983a:	701a      	strb	r2, [r3, #0]
  idx++;
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	3301      	adds	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009842:	e013      	b.n	800986c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	4413      	add	r3, r2
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	7812      	ldrb	r2, [r2, #0]
 800984e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	3301      	adds	r3, #1
 8009854:	613b      	str	r3, [r7, #16]
    idx++;
 8009856:	7dfb      	ldrb	r3, [r7, #23]
 8009858:	3301      	adds	r3, #1
 800985a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	4413      	add	r3, r2
 8009862:	2200      	movs	r2, #0
 8009864:	701a      	strb	r2, [r3, #0]
    idx++;
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	3301      	adds	r3, #1
 800986a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e7      	bne.n	8009844 <USBD_GetString+0x52>
 8009874:	e000      	b.n	8009878 <USBD_GetString+0x86>
    return;
 8009876:	bf00      	nop
  }
}
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800987e:	b480      	push	{r7}
 8009880:	b085      	sub	sp, #20
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800988e:	e005      	b.n	800989c <USBD_GetLen+0x1e>
  {
    len++;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	3301      	adds	r3, #1
 8009894:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	3301      	adds	r3, #1
 800989a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1f5      	bne.n	8009890 <USBD_GetLen+0x12>
  }

  return len;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2202      	movs	r2, #2
 80098c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	2100      	movs	r1, #0
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fca5 	bl	800a228 <USBD_LL_Transmit>

  return USBD_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	2100      	movs	r1, #0
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 fc94 	bl	800a228 <USBD_LL_Transmit>

  return USBD_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b084      	sub	sp, #16
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2203      	movs	r2, #3
 800991a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	2100      	movs	r1, #0
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fc98 	bl	800a26a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	2100      	movs	r1, #0
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 fc87 	bl	800a26a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2204      	movs	r2, #4
 8009972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009976:	2300      	movs	r3, #0
 8009978:	2200      	movs	r2, #0
 800997a:	2100      	movs	r1, #0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fc53 	bl	800a228 <USBD_LL_Transmit>

  return USBD_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2205      	movs	r2, #5
 8009998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800999c:	2300      	movs	r3, #0
 800999e:	2200      	movs	r2, #0
 80099a0:	2100      	movs	r1, #0
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fc61 	bl	800a26a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80099b8:	2200      	movs	r2, #0
 80099ba:	4912      	ldr	r1, [pc, #72]	; (8009a04 <MX_USB_Device_Init+0x50>)
 80099bc:	4812      	ldr	r0, [pc, #72]	; (8009a08 <MX_USB_Device_Init+0x54>)
 80099be:	f7fe fed9 	bl	8008774 <USBD_Init>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80099c8:	f7f7 fb00 	bl	8000fcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80099cc:	490f      	ldr	r1, [pc, #60]	; (8009a0c <MX_USB_Device_Init+0x58>)
 80099ce:	480e      	ldr	r0, [pc, #56]	; (8009a08 <MX_USB_Device_Init+0x54>)
 80099d0:	f7fe ff00 	bl	80087d4 <USBD_RegisterClass>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80099da:	f7f7 faf7 	bl	8000fcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80099de:	490c      	ldr	r1, [pc, #48]	; (8009a10 <MX_USB_Device_Init+0x5c>)
 80099e0:	4809      	ldr	r0, [pc, #36]	; (8009a08 <MX_USB_Device_Init+0x54>)
 80099e2:	f7fe fe21 	bl	8008628 <USBD_CDC_RegisterInterface>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80099ec:	f7f7 faee 	bl	8000fcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80099f0:	4805      	ldr	r0, [pc, #20]	; (8009a08 <MX_USB_Device_Init+0x54>)
 80099f2:	f7fe ff16 	bl	8008822 <USBD_Start>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80099fc:	f7f7 fae6 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009a00:	bf00      	nop
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20000170 	.word	0x20000170
 8009a08:	20000498 	.word	0x20000498
 8009a0c:	20000058 	.word	0x20000058
 8009a10:	2000015c 	.word	0x2000015c

08009a14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4905      	ldr	r1, [pc, #20]	; (8009a30 <CDC_Init_FS+0x1c>)
 8009a1c:	4805      	ldr	r0, [pc, #20]	; (8009a34 <CDC_Init_FS+0x20>)
 8009a1e:	f7fe fe18 	bl	8008652 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a22:	4905      	ldr	r1, [pc, #20]	; (8009a38 <CDC_Init_FS+0x24>)
 8009a24:	4803      	ldr	r0, [pc, #12]	; (8009a34 <CDC_Init_FS+0x20>)
 8009a26:	f7fe fe32 	bl	800868e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20000b50 	.word	0x20000b50
 8009a34:	20000498 	.word	0x20000498
 8009a38:	20000768 	.word	0x20000768

08009a3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	4603      	mov	r3, r0
 8009a54:	6039      	str	r1, [r7, #0]
 8009a56:	71fb      	strb	r3, [r7, #7]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	2b23      	cmp	r3, #35	; 0x23
 8009a60:	d84a      	bhi.n	8009af8 <CDC_Control_FS+0xac>
 8009a62:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <CDC_Control_FS+0x1c>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009af9 	.word	0x08009af9
 8009a6c:	08009af9 	.word	0x08009af9
 8009a70:	08009af9 	.word	0x08009af9
 8009a74:	08009af9 	.word	0x08009af9
 8009a78:	08009af9 	.word	0x08009af9
 8009a7c:	08009af9 	.word	0x08009af9
 8009a80:	08009af9 	.word	0x08009af9
 8009a84:	08009af9 	.word	0x08009af9
 8009a88:	08009af9 	.word	0x08009af9
 8009a8c:	08009af9 	.word	0x08009af9
 8009a90:	08009af9 	.word	0x08009af9
 8009a94:	08009af9 	.word	0x08009af9
 8009a98:	08009af9 	.word	0x08009af9
 8009a9c:	08009af9 	.word	0x08009af9
 8009aa0:	08009af9 	.word	0x08009af9
 8009aa4:	08009af9 	.word	0x08009af9
 8009aa8:	08009af9 	.word	0x08009af9
 8009aac:	08009af9 	.word	0x08009af9
 8009ab0:	08009af9 	.word	0x08009af9
 8009ab4:	08009af9 	.word	0x08009af9
 8009ab8:	08009af9 	.word	0x08009af9
 8009abc:	08009af9 	.word	0x08009af9
 8009ac0:	08009af9 	.word	0x08009af9
 8009ac4:	08009af9 	.word	0x08009af9
 8009ac8:	08009af9 	.word	0x08009af9
 8009acc:	08009af9 	.word	0x08009af9
 8009ad0:	08009af9 	.word	0x08009af9
 8009ad4:	08009af9 	.word	0x08009af9
 8009ad8:	08009af9 	.word	0x08009af9
 8009adc:	08009af9 	.word	0x08009af9
 8009ae0:	08009af9 	.word	0x08009af9
 8009ae4:	08009af9 	.word	0x08009af9
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009af9 	.word	0x08009af9
 8009af0:	08009af9 	.word	0x08009af9
 8009af4:	08009af9 	.word	0x08009af9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009af8:	bf00      	nop
  }

  return (USBD_OK);
 8009afa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7f6 fb7f 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	4805      	ldr	r0, [pc, #20]	; (8009b34 <CDC_Receive_FS+0x2c>)
 8009b1e:	f7fe fdb6 	bl	800868e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b22:	4804      	ldr	r0, [pc, #16]	; (8009b34 <CDC_Receive_FS+0x2c>)
 8009b24:	f7fe fdfc 	bl	8008720 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20000498 	.word	0x20000498

08009b38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	460b      	mov	r3, r1
 8009b42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b48:	4b0d      	ldr	r3, [pc, #52]	; (8009b80 <CDC_Transmit_FS+0x48>)
 8009b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e00b      	b.n	8009b76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b5e:	887b      	ldrh	r3, [r7, #2]
 8009b60:	461a      	mov	r2, r3
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	4806      	ldr	r0, [pc, #24]	; (8009b80 <CDC_Transmit_FS+0x48>)
 8009b66:	f7fe fd74 	bl	8008652 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b6a:	4805      	ldr	r0, [pc, #20]	; (8009b80 <CDC_Transmit_FS+0x48>)
 8009b6c:	f7fe fda8 	bl	80086c0 <USBD_CDC_TransmitPacket>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20000498 	.word	0x20000498

08009b84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
	...

08009ba8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	6039      	str	r1, [r7, #0]
 8009bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2212      	movs	r2, #18
 8009bb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009bba:	4b03      	ldr	r3, [pc, #12]	; (8009bc8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	20000190 	.word	0x20000190

08009bcc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	6039      	str	r1, [r7, #0]
 8009bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2204      	movs	r2, #4
 8009bdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bde:	4b03      	ldr	r3, [pc, #12]	; (8009bec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	200001a4 	.word	0x200001a4

08009bf0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4907      	ldr	r1, [pc, #28]	; (8009c24 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009c06:	4808      	ldr	r0, [pc, #32]	; (8009c28 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009c08:	f7ff fdf3 	bl	80097f2 <USBD_GetString>
 8009c0c:	e004      	b.n	8009c18 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4904      	ldr	r1, [pc, #16]	; (8009c24 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009c12:	4805      	ldr	r0, [pc, #20]	; (8009c28 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009c14:	f7ff fded 	bl	80097f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000f38 	.word	0x20000f38
 8009c28:	0800a460 	.word	0x0800a460

08009c2c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	6039      	str	r1, [r7, #0]
 8009c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	4904      	ldr	r1, [pc, #16]	; (8009c4c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009c3c:	4804      	ldr	r0, [pc, #16]	; (8009c50 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009c3e:	f7ff fdd8 	bl	80097f2 <USBD_GetString>
  return USBD_StrDesc;
 8009c42:	4b02      	ldr	r3, [pc, #8]	; (8009c4c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20000f38 	.word	0x20000f38
 8009c50:	0800a478 	.word	0x0800a478

08009c54 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	221a      	movs	r2, #26
 8009c64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c66:	f000 f843 	bl	8009cf0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009c6a:	4b02      	ldr	r3, [pc, #8]	; (8009c74 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	200001a8 	.word	0x200001a8

08009c78 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	6039      	str	r1, [r7, #0]
 8009c82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c84:	79fb      	ldrb	r3, [r7, #7]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d105      	bne.n	8009c96 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	4907      	ldr	r1, [pc, #28]	; (8009cac <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009c8e:	4808      	ldr	r0, [pc, #32]	; (8009cb0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009c90:	f7ff fdaf 	bl	80097f2 <USBD_GetString>
 8009c94:	e004      	b.n	8009ca0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	4904      	ldr	r1, [pc, #16]	; (8009cac <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009c9a:	4805      	ldr	r0, [pc, #20]	; (8009cb0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009c9c:	f7ff fda9 	bl	80097f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ca0:	4b02      	ldr	r3, [pc, #8]	; (8009cac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	20000f38 	.word	0x20000f38
 8009cb0:	0800a48c 	.word	0x0800a48c

08009cb4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d105      	bne.n	8009cd2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	4907      	ldr	r1, [pc, #28]	; (8009ce8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009cca:	4808      	ldr	r0, [pc, #32]	; (8009cec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009ccc:	f7ff fd91 	bl	80097f2 <USBD_GetString>
 8009cd0:	e004      	b.n	8009cdc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4904      	ldr	r1, [pc, #16]	; (8009ce8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009cd6:	4805      	ldr	r0, [pc, #20]	; (8009cec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009cd8:	f7ff fd8b 	bl	80097f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cdc:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000f38 	.word	0x20000f38
 8009cec:	0800a498 	.word	0x0800a498

08009cf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cf6:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <Get_SerialNum+0x44>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cfc:	4b0e      	ldr	r3, [pc, #56]	; (8009d38 <Get_SerialNum+0x48>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d02:	4b0e      	ldr	r3, [pc, #56]	; (8009d3c <Get_SerialNum+0x4c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d009      	beq.n	8009d2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d16:	2208      	movs	r2, #8
 8009d18:	4909      	ldr	r1, [pc, #36]	; (8009d40 <Get_SerialNum+0x50>)
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 f814 	bl	8009d48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d20:	2204      	movs	r2, #4
 8009d22:	4908      	ldr	r1, [pc, #32]	; (8009d44 <Get_SerialNum+0x54>)
 8009d24:	68b8      	ldr	r0, [r7, #8]
 8009d26:	f000 f80f 	bl	8009d48 <IntToUnicode>
  }
}
 8009d2a:	bf00      	nop
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	1fff7590 	.word	0x1fff7590
 8009d38:	1fff7594 	.word	0x1fff7594
 8009d3c:	1fff7598 	.word	0x1fff7598
 8009d40:	200001aa 	.word	0x200001aa
 8009d44:	200001ba 	.word	0x200001ba

08009d48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	4613      	mov	r3, r2
 8009d54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]
 8009d5e:	e027      	b.n	8009db0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	0f1b      	lsrs	r3, r3, #28
 8009d64:	2b09      	cmp	r3, #9
 8009d66:	d80b      	bhi.n	8009d80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	0f1b      	lsrs	r3, r3, #28
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	4619      	mov	r1, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	440b      	add	r3, r1
 8009d78:	3230      	adds	r2, #48	; 0x30
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	701a      	strb	r2, [r3, #0]
 8009d7e:	e00a      	b.n	8009d96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	0f1b      	lsrs	r3, r3, #28
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	440b      	add	r3, r1
 8009d90:	3237      	adds	r2, #55	; 0x37
 8009d92:	b2d2      	uxtb	r2, r2
 8009d94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	3301      	adds	r3, #1
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	4413      	add	r3, r2
 8009da6:	2200      	movs	r2, #0
 8009da8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	3301      	adds	r3, #1
 8009dae:	75fb      	strb	r3, [r7, #23]
 8009db0:	7dfa      	ldrb	r2, [r7, #23]
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d3d3      	bcc.n	8009d60 <IntToUnicode+0x18>
  }
}
 8009db8:	bf00      	nop
 8009dba:	bf00      	nop
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
	...

08009dc8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b094      	sub	sp, #80	; 0x50
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009dd0:	f107 030c 	add.w	r3, r7, #12
 8009dd4:	2244      	movs	r2, #68	; 0x44
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fb2d 	bl	800a438 <memset>
  if(pcdHandle->Instance==USB)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a15      	ldr	r2, [pc, #84]	; (8009e38 <HAL_PCD_MspInit+0x70>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d122      	bne.n	8009e2e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009dec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009dee:	2300      	movs	r3, #0
 8009df0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fa f9b6 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009e02:	f7f7 f8e3 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e06:	4b0d      	ldr	r3, [pc, #52]	; (8009e3c <HAL_PCD_MspInit+0x74>)
 8009e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e0a:	4a0c      	ldr	r2, [pc, #48]	; (8009e3c <HAL_PCD_MspInit+0x74>)
 8009e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e10:	6593      	str	r3, [r2, #88]	; 0x58
 8009e12:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <HAL_PCD_MspInit+0x74>)
 8009e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e1a:	60bb      	str	r3, [r7, #8]
 8009e1c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2100      	movs	r1, #0
 8009e22:	2014      	movs	r0, #20
 8009e24:	f7f7 fce5 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009e28:	2014      	movs	r0, #20
 8009e2a:	f7f7 fcfc 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e2e:	bf00      	nop
 8009e30:	3750      	adds	r7, #80	; 0x50
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	40005c00 	.word	0x40005c00
 8009e3c:	40021000 	.word	0x40021000

08009e40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e54:	4619      	mov	r1, r3
 8009e56:	4610      	mov	r0, r2
 8009e58:	f7fe fd2e 	bl	80088b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009e5c:	bf00      	nop
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009e76:	78fa      	ldrb	r2, [r7, #3]
 8009e78:	6879      	ldr	r1, [r7, #4]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	440b      	add	r3, r1
 8009e84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	78fb      	ldrb	r3, [r7, #3]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	f7fe fd68 	bl	8008962 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009e92:	bf00      	nop
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b082      	sub	sp, #8
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009eac:	78fa      	ldrb	r2, [r7, #3]
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	00db      	lsls	r3, r3, #3
 8009eb8:	440b      	add	r3, r1
 8009eba:	333c      	adds	r3, #60	; 0x3c
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	78fb      	ldrb	r3, [r7, #3]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	f7fe fdb1 	bl	8008a28 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe fec5 	bl	8008c6c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d001      	beq.n	8009f02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009efe:	f7f7 f865 	bl	8000fcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f08:	7bfa      	ldrb	r2, [r7, #15]
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe fe6f 	bl	8008bf0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe fe1b 	bl	8008b54 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009f1e:	bf00      	nop
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fe6a 	bl	8008c10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d005      	beq.n	8009f50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f44:	4b04      	ldr	r3, [pc, #16]	; (8009f58 <HAL_PCD_SuspendCallback+0x30>)
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	4a03      	ldr	r2, [pc, #12]	; (8009f58 <HAL_PCD_SuspendCallback+0x30>)
 8009f4a:	f043 0306 	orr.w	r3, r3, #6
 8009f4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	e000ed00 	.word	0xe000ed00

08009f5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d007      	beq.n	8009f7c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f6c:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <HAL_PCD_ResumeCallback+0x34>)
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	4a07      	ldr	r2, [pc, #28]	; (8009f90 <HAL_PCD_ResumeCallback+0x34>)
 8009f72:	f023 0306 	bic.w	r3, r3, #6
 8009f76:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009f78:	f000 f9fa 	bl	800a370 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fe5a 	bl	8008c3c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	e000ed00 	.word	0xe000ed00

08009f94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009f9c:	4a2b      	ldr	r2, [pc, #172]	; (800a04c <USBD_LL_Init+0xb8>)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a29      	ldr	r2, [pc, #164]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fa8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009fac:	4b27      	ldr	r3, [pc, #156]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fae:	4a28      	ldr	r2, [pc, #160]	; (800a050 <USBD_LL_Init+0xbc>)
 8009fb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fb2:	4b26      	ldr	r3, [pc, #152]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fb8:	4b24      	ldr	r3, [pc, #144]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fba:	2202      	movs	r2, #2
 8009fbc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fbe:	4b23      	ldr	r3, [pc, #140]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009fc4:	4b21      	ldr	r3, [pc, #132]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009fca:	4b20      	ldr	r3, [pc, #128]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009fd0:	4b1e      	ldr	r3, [pc, #120]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009fd6:	4b1d      	ldr	r3, [pc, #116]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009fdc:	481b      	ldr	r0, [pc, #108]	; (800a04c <USBD_LL_Init+0xb8>)
 8009fde:	f7f7 fdef 	bl	8001bc0 <HAL_PCD_Init>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009fe8:	f7f6 fff0 	bl	8000fcc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ff2:	2318      	movs	r3, #24
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	f7f9 faa8 	bl	800354c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a002:	2358      	movs	r3, #88	; 0x58
 800a004:	2200      	movs	r2, #0
 800a006:	2180      	movs	r1, #128	; 0x80
 800a008:	f7f9 faa0 	bl	800354c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a012:	23c0      	movs	r3, #192	; 0xc0
 800a014:	2200      	movs	r2, #0
 800a016:	2181      	movs	r1, #129	; 0x81
 800a018:	f7f9 fa98 	bl	800354c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a022:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a026:	2200      	movs	r2, #0
 800a028:	2101      	movs	r1, #1
 800a02a:	f7f9 fa8f 	bl	800354c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a034:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a038:	2200      	movs	r2, #0
 800a03a:	2182      	movs	r1, #130	; 0x82
 800a03c:	f7f9 fa86 	bl	800354c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20001138 	.word	0x20001138
 800a050:	40005c00 	.word	0x40005c00

0800a054 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7f7 fe8d 	bl	8001d8a <HAL_PCD_Start>
 800a070:	4603      	mov	r3, r0
 800a072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	4618      	mov	r0, r3
 800a078:	f000 f980 	bl	800a37c <USBD_Get_USB_Status>
 800a07c:	4603      	mov	r3, r0
 800a07e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a080:	7bbb      	ldrb	r3, [r7, #14]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	4608      	mov	r0, r1
 800a094:	4611      	mov	r1, r2
 800a096:	461a      	mov	r2, r3
 800a098:	4603      	mov	r3, r0
 800a09a:	70fb      	strb	r3, [r7, #3]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70bb      	strb	r3, [r7, #2]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0b2:	78bb      	ldrb	r3, [r7, #2]
 800a0b4:	883a      	ldrh	r2, [r7, #0]
 800a0b6:	78f9      	ldrb	r1, [r7, #3]
 800a0b8:	f7f7 ffd5 	bl	8002066 <HAL_PCD_EP_Open>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 f95a 	bl	800a37c <USBD_Get_USB_Status>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0f0:	78fa      	ldrb	r2, [r7, #3]
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7f8 f81c 	bl	8002132 <HAL_PCD_EP_Close>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	4618      	mov	r0, r3
 800a102:	f000 f93b 	bl	800a37c <USBD_Get_USB_Status>
 800a106:	4603      	mov	r3, r0
 800a108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	460b      	mov	r3, r1
 800a11e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a12e:	78fa      	ldrb	r2, [r7, #3]
 800a130:	4611      	mov	r1, r2
 800a132:	4618      	mov	r0, r3
 800a134:	f7f8 f8dd 	bl	80022f2 <HAL_PCD_EP_SetStall>
 800a138:	4603      	mov	r3, r0
 800a13a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 f91c 	bl	800a37c <USBD_Get_USB_Status>
 800a144:	4603      	mov	r3, r0
 800a146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a148:	7bbb      	ldrb	r3, [r7, #14]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	460b      	mov	r3, r1
 800a15c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a16c:	78fa      	ldrb	r2, [r7, #3]
 800a16e:	4611      	mov	r1, r2
 800a170:	4618      	mov	r0, r3
 800a172:	f7f8 f910 	bl	8002396 <HAL_PCD_EP_ClrStall>
 800a176:	4603      	mov	r3, r0
 800a178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 f8fd 	bl	800a37c <USBD_Get_USB_Status>
 800a182:	4603      	mov	r3, r0
 800a184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a186:	7bbb      	ldrb	r3, [r7, #14]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	da0c      	bge.n	800a1c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1ac:	78fb      	ldrb	r3, [r7, #3]
 800a1ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b2:	68f9      	ldr	r1, [r7, #12]
 800a1b4:	1c5a      	adds	r2, r3, #1
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	00db      	lsls	r3, r3, #3
 800a1be:	440b      	add	r3, r1
 800a1c0:	3302      	adds	r3, #2
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	e00b      	b.n	800a1de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1c6:	78fb      	ldrb	r3, [r7, #3]
 800a1c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1cc:	68f9      	ldr	r1, [r7, #12]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	440b      	add	r3, r1
 800a1d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a1dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a204:	78fa      	ldrb	r2, [r7, #3]
 800a206:	4611      	mov	r1, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f7f7 ff07 	bl	800201c <HAL_PCD_SetAddress>
 800a20e:	4603      	mov	r3, r0
 800a210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	4618      	mov	r0, r3
 800a216:	f000 f8b1 	bl	800a37c <USBD_Get_USB_Status>
 800a21a:	4603      	mov	r3, r0
 800a21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	607a      	str	r2, [r7, #4]
 800a232:	603b      	str	r3, [r7, #0]
 800a234:	460b      	mov	r3, r1
 800a236:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a246:	7af9      	ldrb	r1, [r7, #11]
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	f7f8 f80e 	bl	800226c <HAL_PCD_EP_Transmit>
 800a250:	4603      	mov	r3, r0
 800a252:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a254:	7dfb      	ldrb	r3, [r7, #23]
 800a256:	4618      	mov	r0, r3
 800a258:	f000 f890 	bl	800a37c <USBD_Get_USB_Status>
 800a25c:	4603      	mov	r3, r0
 800a25e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a260:	7dbb      	ldrb	r3, [r7, #22]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b086      	sub	sp, #24
 800a26e:	af00      	add	r7, sp, #0
 800a270:	60f8      	str	r0, [r7, #12]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
 800a276:	460b      	mov	r3, r1
 800a278:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a288:	7af9      	ldrb	r1, [r7, #11]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	f7f7 ff98 	bl	80021c2 <HAL_PCD_EP_Receive>
 800a292:	4603      	mov	r3, r0
 800a294:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a296:	7dfb      	ldrb	r3, [r7, #23]
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 f86f 	bl	800a37c <USBD_Get_USB_Status>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2be:	78fa      	ldrb	r2, [r7, #3]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7f7 ffba 	bl	800223c <HAL_PCD_EP_GetRxCount>
 800a2c8:	4603      	mov	r3, r0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a2e0:	78fb      	ldrb	r3, [r7, #3]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d002      	beq.n	800a2ec <HAL_PCDEx_LPM_Callback+0x18>
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d013      	beq.n	800a312 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a2ea:	e023      	b.n	800a334 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d007      	beq.n	800a304 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a2f4:	f000 f83c 	bl	800a370 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2f8:	4b10      	ldr	r3, [pc, #64]	; (800a33c <HAL_PCDEx_LPM_Callback+0x68>)
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	4a0f      	ldr	r2, [pc, #60]	; (800a33c <HAL_PCDEx_LPM_Callback+0x68>)
 800a2fe:	f023 0306 	bic.w	r3, r3, #6
 800a302:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fc96 	bl	8008c3c <USBD_LL_Resume>
    break;
 800a310:	e010      	b.n	800a334 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fe fc79 	bl	8008c10 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d005      	beq.n	800a332 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a326:	4b05      	ldr	r3, [pc, #20]	; (800a33c <HAL_PCDEx_LPM_Callback+0x68>)
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	4a04      	ldr	r2, [pc, #16]	; (800a33c <HAL_PCDEx_LPM_Callback+0x68>)
 800a32c:	f043 0306 	orr.w	r3, r3, #6
 800a330:	6113      	str	r3, [r2, #16]
    break;
 800a332:	bf00      	nop
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	e000ed00 	.word	0xe000ed00

0800a340 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a348:	4b03      	ldr	r3, [pc, #12]	; (800a358 <USBD_static_malloc+0x18>)
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	2000142c 	.word	0x2000142c

0800a35c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]

}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a374:	f7f6 f986 	bl	8000684 <SystemClock_Config>
}
 800a378:	bf00      	nop
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d817      	bhi.n	800a3c0 <USBD_Get_USB_Status+0x44>
 800a390:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <USBD_Get_USB_Status+0x1c>)
 800a392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a396:	bf00      	nop
 800a398:	0800a3a9 	.word	0x0800a3a9
 800a39c:	0800a3af 	.word	0x0800a3af
 800a3a0:	0800a3b5 	.word	0x0800a3b5
 800a3a4:	0800a3bb 	.word	0x0800a3bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ac:	e00b      	b.n	800a3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b2:	e008      	b.n	800a3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b8:	e005      	b.n	800a3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3be:	e002      	b.n	800a3c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c4:	bf00      	nop
  }
  return usb_status;
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <__libc_init_array>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	4d0d      	ldr	r5, [pc, #52]	; (800a40c <__libc_init_array+0x38>)
 800a3d8:	4c0d      	ldr	r4, [pc, #52]	; (800a410 <__libc_init_array+0x3c>)
 800a3da:	1b64      	subs	r4, r4, r5
 800a3dc:	10a4      	asrs	r4, r4, #2
 800a3de:	2600      	movs	r6, #0
 800a3e0:	42a6      	cmp	r6, r4
 800a3e2:	d109      	bne.n	800a3f8 <__libc_init_array+0x24>
 800a3e4:	4d0b      	ldr	r5, [pc, #44]	; (800a414 <__libc_init_array+0x40>)
 800a3e6:	4c0c      	ldr	r4, [pc, #48]	; (800a418 <__libc_init_array+0x44>)
 800a3e8:	f000 f82e 	bl	800a448 <_init>
 800a3ec:	1b64      	subs	r4, r4, r5
 800a3ee:	10a4      	asrs	r4, r4, #2
 800a3f0:	2600      	movs	r6, #0
 800a3f2:	42a6      	cmp	r6, r4
 800a3f4:	d105      	bne.n	800a402 <__libc_init_array+0x2e>
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3fc:	4798      	blx	r3
 800a3fe:	3601      	adds	r6, #1
 800a400:	e7ee      	b.n	800a3e0 <__libc_init_array+0xc>
 800a402:	f855 3b04 	ldr.w	r3, [r5], #4
 800a406:	4798      	blx	r3
 800a408:	3601      	adds	r6, #1
 800a40a:	e7f2      	b.n	800a3f2 <__libc_init_array+0x1e>
 800a40c:	0800a4b8 	.word	0x0800a4b8
 800a410:	0800a4b8 	.word	0x0800a4b8
 800a414:	0800a4b8 	.word	0x0800a4b8
 800a418:	0800a4bc 	.word	0x0800a4bc

0800a41c <memcpy>:
 800a41c:	440a      	add	r2, r1
 800a41e:	4291      	cmp	r1, r2
 800a420:	f100 33ff 	add.w	r3, r0, #4294967295
 800a424:	d100      	bne.n	800a428 <memcpy+0xc>
 800a426:	4770      	bx	lr
 800a428:	b510      	push	{r4, lr}
 800a42a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a42e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a432:	4291      	cmp	r1, r2
 800a434:	d1f9      	bne.n	800a42a <memcpy+0xe>
 800a436:	bd10      	pop	{r4, pc}

0800a438 <memset>:
 800a438:	4402      	add	r2, r0
 800a43a:	4603      	mov	r3, r0
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d100      	bne.n	800a442 <memset+0xa>
 800a440:	4770      	bx	lr
 800a442:	f803 1b01 	strb.w	r1, [r3], #1
 800a446:	e7f9      	b.n	800a43c <memset+0x4>

0800a448 <_init>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	bf00      	nop
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr

0800a454 <_fini>:
 800a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a456:	bf00      	nop
 800a458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45a:	bc08      	pop	{r3}
 800a45c:	469e      	mov	lr, r3
 800a45e:	4770      	bx	lr
