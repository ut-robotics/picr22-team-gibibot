
gibibot_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a4b8  0800a4b8  0001a4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a510  0800a510  000201c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a510  0800a510  000201c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a510  0800a510  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a510  0800a510  0001a510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a514  0800a514  0001a514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0800a518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001488  200001c4  0800a6dc  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000164c  0800a6dc  0002164c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016788  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a4  00000000  00000000  0003697c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c3f  00000000  00000000  0003c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166da  00000000  00000000  0005d0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6551  00000000  00000000  00073781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139cd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005060  00000000  00000000  00139d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c4 	.word	0x200001c4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a4a0 	.word	0x0800a4a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c8 	.word	0x200001c8
 8000214:	0800a4a0 	.word	0x0800a4a0

08000218 <CDC_On_Receive>:
		.throwerGrab = 4800,
		.delimiter = 0};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0e      	cmp	r3, #14
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command));
 800022a:	220e      	movs	r2, #14
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f00a f920 	bl	800a474 <memcpy>

    if (command.delimiter == 0xAAAA) {
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	899b      	ldrh	r3, [r3, #12]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000030 	.word	0x20000030
 8000254:	2000048c 	.word	0x2000048c

08000258 <ClampValue>:

int32_t ClampValue(int32_t val, int32_t min, int32_t max) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (val < min) {
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	da01      	bge.n	8000270 <ClampValue+0x18>
		return min;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	e006      	b.n	800027e <ClampValue+0x26>
	}
	if (val > max) {
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	dd01      	ble.n	800027c <ClampValue+0x24>
		return max;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	e000      	b.n	800027e <ClampValue+0x26>
	}
	return val;
 800027c:	68fb      	ldr	r3, [r7, #12]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr

0800028a <ClampValue2>:

uint16_t ClampValue2(uint16_t val, uint16_t min, uint16_t max) {
 800028a:	b480      	push	{r7}
 800028c:	b083      	sub	sp, #12
 800028e:	af00      	add	r7, sp, #0
 8000290:	4603      	mov	r3, r0
 8000292:	80fb      	strh	r3, [r7, #6]
 8000294:	460b      	mov	r3, r1
 8000296:	80bb      	strh	r3, [r7, #4]
 8000298:	4613      	mov	r3, r2
 800029a:	807b      	strh	r3, [r7, #2]
	if (val < min) {
 800029c:	88fa      	ldrh	r2, [r7, #6]
 800029e:	88bb      	ldrh	r3, [r7, #4]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d201      	bcs.n	80002a8 <ClampValue2+0x1e>
		return min;
 80002a4:	88bb      	ldrh	r3, [r7, #4]
 80002a6:	e006      	b.n	80002b6 <ClampValue2+0x2c>
	}
	if (val > max) {
 80002a8:	88fa      	ldrh	r2, [r7, #6]
 80002aa:	887b      	ldrh	r3, [r7, #2]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d901      	bls.n	80002b4 <ClampValue2+0x2a>
		return max;
 80002b0:	887b      	ldrh	r3, [r7, #2]
 80002b2:	e000      	b.n	80002b6 <ClampValue2+0x2c>
	}
	return val;
 80002b4:	88fb      	ldrh	r3, [r7, #6]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
	...

080002c4 <ControlMotor>:

int32_t ControlMotor(MotorControl* motorControl, int16_t position, int16_t set_speed) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	807b      	strh	r3, [r7, #2]
 80002d0:	4613      	mov	r3, r2
 80002d2:	803b      	strh	r3, [r7, #0]
	motorControl->positionChange = (position-motorControl->position); //Calculates the position change
 80002d4:	887a      	ldrh	r2, [r7, #2]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	819a      	strh	r2, [r3, #12]
	int16_t error = (set_speed-motorControl->positionChange); //Calculates the error
 80002e8:	883a      	ldrh	r2, [r7, #0]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	1ad3      	subs	r3, r2, r3
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	81fb      	strh	r3, [r7, #14]
	motorControl->integral+=error;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000300:	441a      	add	r2, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	609a      	str	r2, [r3, #8]
	motorControl->integral=ClampValue(motorControl->integral, -65535/motorControl->gainI, 65535/motorControl->gainI); //Adds the errors together and clamps the value
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	6898      	ldr	r0, [r3, #8]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000310:	461a      	mov	r2, r3
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <ControlMotor+0xb4>)
 8000314:	fb93 f1f2 	sdiv	r1, r3, r2
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800031e:	461a      	mov	r2, r3
 8000320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000324:	fb93 f3f2 	sdiv	r3, r3, r2
 8000328:	461a      	mov	r2, r3
 800032a:	f7ff ff95 	bl	8000258 <ClampValue>
 800032e:	4602      	mov	r2, r0
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	609a      	str	r2, [r3, #8]
	motorControl->position = position; //Previous position is now the current position
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	887a      	ldrh	r2, [r7, #2]
 8000338:	81da      	strh	r2, [r3, #14]
	return (error*motorControl->gainP + motorControl->gainI*motorControl->integral + motorControl->positionChange*motorControl->gainD);
 800033a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000344:	fb03 f202 	mul.w	r2, r3, r2
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800034e:	4619      	mov	r1, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	fb01 f303 	mul.w	r3, r1, r3
 8000358:	441a      	add	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000360:	4619      	mov	r1, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000368:	fb01 f303 	mul.w	r3, r1, r3
 800036c:	4413      	add	r3, r2
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	ffff0001 	.word	0xffff0001

0800037c <EnableMotorDrivers>:

void EnableMotorDrivers() {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2102      	movs	r1, #2
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f001 fc2d 	bl	8001be8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 350; i++) {
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	e003      	b.n	800039c <EnableMotorDrivers+0x20>
	  __asm("nop");
 8000394:	bf00      	nop
	for (int i = 0; i < 350; i++) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80003a2:	dbf7      	blt.n	8000394 <EnableMotorDrivers+0x18>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2102      	movs	r1, #2
 80003a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ac:	f001 fc1c 	bl	8001be8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 350; i++) {
 80003b0:	2300      	movs	r3, #0
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	e003      	b.n	80003be <EnableMotorDrivers+0x42>
	  __asm("nop");
 80003b6:	bf00      	nop
	for (int i = 0; i < 350; i++) {
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80003c4:	dbf7      	blt.n	80003b6 <EnableMotorDrivers+0x3a>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2102      	movs	r1, #2
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ce:	f001 fc0b 	bl	8001be8 <HAL_GPIO_WritePin>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <UpdateServosAndThrower>:

void UpdateServosAndThrower() {
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	//Start thrower speed < 3200
	//Thrower speed between 3200 and 6400
	TIM15->CCR2 = command.throwerSpeed+3150;
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <UpdateServosAndThrower+0x48>)
 80003e2:	88db      	ldrh	r3, [r3, #6]
 80003e4:	f603 424e 	addw	r2, r3, #3150	; 0xc4e
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <UpdateServosAndThrower+0x4c>)
 80003ea:	639a      	str	r2, [r3, #56]	; 0x38
	//Thrower angle
	TIM8->CCR2 = ClampValue2(command.throwerAngle, 2700, 6900);
 80003ec:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <UpdateServosAndThrower+0x48>)
 80003ee:	891b      	ldrh	r3, [r3, #8]
 80003f0:	f641 22f4 	movw	r2, #6900	; 0x1af4
 80003f4:	f640 218c 	movw	r1, #2700	; 0xa8c
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff46 	bl	800028a <ClampValue2>
 80003fe:	4603      	mov	r3, r0
 8000400:	461a      	mov	r2, r3
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <UpdateServosAndThrower+0x50>)
 8000404:	639a      	str	r2, [r3, #56]	; 0x38
	//Grabber
	TIM16->CCR1 = ClampValue2(command.throwerGrab, 2700, 6900);
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <UpdateServosAndThrower+0x48>)
 8000408:	895b      	ldrh	r3, [r3, #10]
 800040a:	f641 22f4 	movw	r2, #6900	; 0x1af4
 800040e:	f640 218c 	movw	r1, #2700	; 0xa8c
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff39 	bl	800028a <ClampValue2>
 8000418:	4603      	mov	r3, r0
 800041a:	461a      	mov	r2, r3
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <UpdateServosAndThrower+0x54>)
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000030 	.word	0x20000030
 8000428:	40014000 	.word	0x40014000
 800042c:	40013400 	.word	0x40013400
 8000430:	40014400 	.word	0x40014400

08000434 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	//Reading the motor encoders and calculating motor pwm
	int32_t motor1PWM = ClampValue(ControlMotor(&motorControl1, (int16_t)TIM2->CNT, command.speed1), -65535, 65535);
 800043c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000442:	b21b      	sxth	r3, r3
 8000444:	4a3d      	ldr	r2, [pc, #244]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000446:	f9b2 2000 	ldrsh.w	r2, [r2]
 800044a:	4619      	mov	r1, r3
 800044c:	483c      	ldr	r0, [pc, #240]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800044e:	f7ff ff39 	bl	80002c4 <ControlMotor>
 8000452:	4603      	mov	r3, r0
 8000454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000458:	493a      	ldr	r1, [pc, #232]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff fefc 	bl	8000258 <ClampValue>
 8000460:	6178      	str	r0, [r7, #20]
	//Direction
	if (motor1PWM < 0) {
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	2b00      	cmp	r3, #0
 8000466:	da07      	bge.n	8000478 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f001 fbb9 	bl	8001be8 <HAL_GPIO_WritePin>
 8000476:	e006      	b.n	8000486 <HAL_TIM_PeriodElapsedCallback+0x52>
	} else {
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f001 fbb1 	bl	8001be8 <HAL_GPIO_WritePin>
	}
	int32_t motor2PWM = ClampValue(ControlMotor(&motorControl2, (int16_t)TIM3->CNT, command.speed2), -65535, 65535);
 8000486:	4b30      	ldr	r3, [pc, #192]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048a:	b21b      	sxth	r3, r3
 800048c:	4a2b      	ldr	r2, [pc, #172]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800048e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000492:	4619      	mov	r1, r3
 8000494:	482d      	ldr	r0, [pc, #180]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000496:	f7ff ff15 	bl	80002c4 <ControlMotor>
 800049a:	4603      	mov	r3, r0
 800049c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004a0:	4928      	ldr	r1, [pc, #160]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fed8 	bl	8000258 <ClampValue>
 80004a8:	6138      	str	r0, [r7, #16]
	if (motor2PWM < 0) {
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da05      	bge.n	80004bc <HAL_TIM_PeriodElapsedCallback+0x88>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2101      	movs	r1, #1
 80004b4:	4826      	ldr	r0, [pc, #152]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80004b6:	f001 fb97 	bl	8001be8 <HAL_GPIO_WritePin>
 80004ba:	e004      	b.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x92>
	} else {
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2101      	movs	r1, #1
 80004c0:	4823      	ldr	r0, [pc, #140]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80004c2:	f001 fb91 	bl	8001be8 <HAL_GPIO_WritePin>
	}
	int32_t motor3PWM = ClampValue(ControlMotor(&motorControl3, (int16_t)TIM4->CNT, command.speed3), -65535, 65535);
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80004c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ca:	b21b      	sxth	r3, r3
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80004ce:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4820      	ldr	r0, [pc, #128]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80004d6:	f7ff fef5 	bl	80002c4 <ControlMotor>
 80004da:	4603      	mov	r3, r0
 80004dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e0:	4918      	ldr	r1, [pc, #96]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff feb8 	bl	8000258 <ClampValue>
 80004e8:	60f8      	str	r0, [r7, #12]
	if (motor3PWM < 0) {
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	da06      	bge.n	80004fe <HAL_TIM_PeriodElapsedCallback+0xca>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2104      	movs	r1, #4
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f001 fb76 	bl	8001be8 <HAL_GPIO_WritePin>
 80004fc:	e005      	b.n	800050a <HAL_TIM_PeriodElapsedCallback+0xd6>
	} else {
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2104      	movs	r1, #4
 8000502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000506:	f001 fb6f 	bl	8001be8 <HAL_GPIO_WritePin>
	}
	//Changing motor pwm
	TIM1->CCR2 = abs(motor1PWM);
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000510:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR1 = abs(motor2PWM);
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800051e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
	TIM17->CCR1 = abs(motor3PWM);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800052c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000030 	.word	0x20000030
 8000540:	20000000 	.word	0x20000000
 8000544:	ffff0001 	.word	0xffff0001
 8000548:	40000400 	.word	0x40000400
 800054c:	20000010 	.word	0x20000010
 8000550:	48000400 	.word	0x48000400
 8000554:	40000800 	.word	0x40000800
 8000558:	20000020 	.word	0x20000020
 800055c:	40012c00 	.word	0x40012c00
 8000560:	40014800 	.word	0x40014800

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f001 f822 	bl	80015b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f8b5 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 fce7 	bl	8000f44 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000576:	f000 f8ff 	bl	8000778 <MX_TIM1_Init>
  MX_TIM2_Init();
 800057a:	f000 f99d 	bl	80008b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800057e:	f000 f9ef 	bl	8000960 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000582:	f000 fa43 	bl	8000a0c <MX_TIM4_Init>
  MX_TIM15_Init();
 8000586:	f000 fb63 	bl	8000c50 <MX_TIM15_Init>
  MX_TIM16_Init();
 800058a:	f000 fbe7 	bl	8000d5c <MX_TIM16_Init>
  MX_TIM17_Init();
 800058e:	f000 fc5f 	bl	8000e50 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000592:	f009 fa3b 	bl	8009a0c <MX_USB_Device_Init>
  MX_TIM8_Init();
 8000596:	f000 fac7 	bl	8000b28 <MX_TIM8_Init>
  MX_TIM6_Init();
 800059a:	f000 fa8d 	bl	8000ab8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  Feedback feedback = {
 800059e:	2300      	movs	r3, #0
 80005a0:	80bb      	strh	r3, [r7, #4]
 80005a2:	2300      	movs	r3, #0
 80005a4:	80fb      	strh	r3, [r7, #6]
 80005a6:	2300      	movs	r3, #0
 80005a8:	813b      	strh	r3, [r7, #8]
 80005aa:	2300      	movs	r3, #0
 80005ac:	817b      	strh	r3, [r7, #10]
 80005ae:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80005b2:	81bb      	strh	r3, [r7, #12]
		.ballDetected = 0,
        .delimiter = 0xAAAA
    };

  //ECODERS
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2); //M1 encoder
 80005b4:	2104      	movs	r1, #4
 80005b6:	483a      	ldr	r0, [pc, #232]	; (80006a0 <main+0x13c>)
 80005b8:	f004 fab2 	bl	8004b20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); //M2 encoder
 80005bc:	2104      	movs	r1, #4
 80005be:	4839      	ldr	r0, [pc, #228]	; (80006a4 <main+0x140>)
 80005c0:	f004 faae 	bl	8004b20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); //M3 encoder
 80005c4:	2104      	movs	r1, #4
 80005c6:	4838      	ldr	r0, [pc, #224]	; (80006a8 <main+0x144>)
 80005c8:	f004 faaa 	bl	8004b20 <HAL_TIM_Encoder_Start>
  //PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //M2 PWM
 80005cc:	2100      	movs	r1, #0
 80005ce:	4837      	ldr	r0, [pc, #220]	; (80006ac <main+0x148>)
 80005d0:	f004 f900 	bl	80047d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);    //M1 PWM
 80005d4:	2104      	movs	r1, #4
 80005d6:	4835      	ldr	r0, [pc, #212]	; (80006ac <main+0x148>)
 80005d8:	f004 f8fc 	bl	80047d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);   //M3 PWM
 80005dc:	2100      	movs	r1, #0
 80005de:	4834      	ldr	r0, [pc, #208]	; (80006b0 <main+0x14c>)
 80005e0:	f004 f8f8 	bl	80047d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);   //THROWER PWM
 80005e4:	2104      	movs	r1, #4
 80005e6:	4833      	ldr	r0, [pc, #204]	; (80006b4 <main+0x150>)
 80005e8:	f004 f8f4 	bl	80047d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);    //SERVO1
 80005ec:	2104      	movs	r1, #4
 80005ee:	4832      	ldr	r0, [pc, #200]	; (80006b8 <main+0x154>)
 80005f0:	f004 f8f0 	bl	80047d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);   //SERVO2
 80005f4:	2100      	movs	r1, #0
 80005f6:	4831      	ldr	r0, [pc, #196]	; (80006bc <main+0x158>)
 80005f8:	f004 f8ec 	bl	80047d4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6); //Timer for motor speed
 80005fc:	4830      	ldr	r0, [pc, #192]	; (80006c0 <main+0x15c>)
 80005fe:	f004 f827 	bl	8004650 <HAL_TIM_Base_Start_IT>

  //Wakes up the thrower
  TIM15->CCR2 = 3150;
 8000602:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <main+0x160>)
 8000604:	f640 424e 	movw	r2, #3150	; 0xc4e
 8000608:	639a      	str	r2, [r3, #56]	; 0x38

  //EnableMotorDrivers();


  uint8_t sensorSent = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	UpdateServosAndThrower();
 800060e:	f7ff fee5 	bl	80003dc <UpdateServosAndThrower>
	//Sends feedback when ball is detected
	uint8_t IRsensor = HAL_GPIO_ReadPin(IR_SENSOR_GPIO_Port, IR_SENSOR_Pin);
 8000612:	2101      	movs	r1, #1
 8000614:	482c      	ldr	r0, [pc, #176]	; (80006c8 <main+0x164>)
 8000616:	f001 facf 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	73bb      	strb	r3, [r7, #14]
	if (IRsensor > 0 && sensorSent == 0) {
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d00b      	beq.n	800063c <main+0xd8>
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d108      	bne.n	800063c <main+0xd8>
		feedback.ballDetected = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	817b      	strh	r3, [r7, #10]
		CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback));
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	210a      	movs	r1, #10
 8000632:	4618      	mov	r0, r3
 8000634:	f009 faac 	bl	8009b90 <CDC_Transmit_FS>
		sensorSent = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
	}
	if (IRsensor == 0 && sensorSent == 1) {
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10b      	bne.n	800065a <main+0xf6>
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d108      	bne.n	800065a <main+0xf6>
		feedback.ballDetected = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	817b      	strh	r3, [r7, #10]
		CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback));
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	210a      	movs	r1, #10
 8000650:	4618      	mov	r0, r3
 8000652:	f009 fa9d 	bl	8009b90 <CDC_Transmit_FS>
		sensorSent = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, IRsensor);
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	461a      	mov	r2, r3
 800065e:	2101      	movs	r1, #1
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 fac0 	bl	8001be8 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (isCommandReceived) {
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <main+0x168>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0cd      	beq.n	800060e <main+0xaa>
		isCommandReceived = 0;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <main+0x168>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
		EnableMotorDrivers(); //Sends the nsleep signal to motor drivers
 8000678:	f7ff fe80 	bl	800037c <EnableMotorDrivers>
		feedback.speed1 = motorControl1.positionChange;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <main+0x16c>)
 800067e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000682:	80bb      	strh	r3, [r7, #4]
		feedback.speed2 = motorControl2.positionChange;
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <main+0x170>)
 8000686:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800068a:	80fb      	strh	r3, [r7, #6]
		feedback.speed3 = motorControl3.positionChange;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <main+0x174>)
 800068e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000692:	813b      	strh	r3, [r7, #8]

		CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback));
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	210a      	movs	r1, #10
 8000698:	4618      	mov	r0, r3
 800069a:	f009 fa79 	bl	8009b90 <CDC_Transmit_FS>
  {
 800069e:	e7b6      	b.n	800060e <main+0xaa>
 80006a0:	2000022c 	.word	0x2000022c
 80006a4:	20000278 	.word	0x20000278
 80006a8:	200002c4 	.word	0x200002c4
 80006ac:	200001e0 	.word	0x200001e0
 80006b0:	20000440 	.word	0x20000440
 80006b4:	200003a8 	.word	0x200003a8
 80006b8:	2000035c 	.word	0x2000035c
 80006bc:	200003f4 	.word	0x200003f4
 80006c0:	20000310 	.word	0x20000310
 80006c4:	40014000 	.word	0x40014000
 80006c8:	48001400 	.word	0x48001400
 80006cc:	2000048c 	.word	0x2000048c
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000010 	.word	0x20000010
 80006d8:	20000020 	.word	0x20000020

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	2238      	movs	r2, #56	; 0x38
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f009 fed0 	bl	800a490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006fe:	2000      	movs	r0, #0
 8000700:	f002 ffbe 	bl	8003680 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000704:	2322      	movs	r3, #34	; 0x22
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070e:	2340      	movs	r3, #64	; 0x40
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000712:	2301      	movs	r3, #1
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800071e:	2301      	movs	r3, #1
 8000720:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000722:	2314      	movs	r3, #20
 8000724:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0318 	add.w	r3, r7, #24
 8000736:	4618      	mov	r0, r3
 8000738:	f003 f846 	bl	80037c8 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000742:	f000 fc6f 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2303      	movs	r3, #3
 800074c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2104      	movs	r1, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f003 fb4a 	bl	8003df8 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800076a:	f000 fc5b 	bl	8001024 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b098      	sub	sp, #96	; 0x60
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2234      	movs	r2, #52	; 0x34
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f009 fe73 	bl	800a490 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007aa:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <MX_TIM1_Init+0x138>)
 80007ac:	4a41      	ldr	r2, [pc, #260]	; (80008b4 <MX_TIM1_Init+0x13c>)
 80007ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b0:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <MX_TIM1_Init+0x138>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <MX_TIM1_Init+0x138>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007bc:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <MX_TIM1_Init+0x138>)
 80007be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b3a      	ldr	r3, [pc, #232]	; (80008b0 <MX_TIM1_Init+0x138>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <MX_TIM1_Init+0x138>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <MX_TIM1_Init+0x138>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007d6:	4836      	ldr	r0, [pc, #216]	; (80008b0 <MX_TIM1_Init+0x138>)
 80007d8:	f003 ffa4 	bl	8004724 <HAL_TIM_PWM_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 fc1f 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007f6:	4619      	mov	r1, r3
 80007f8:	482d      	ldr	r0, [pc, #180]	; (80008b0 <MX_TIM1_Init+0x138>)
 80007fa:	f005 f887 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000804:	f000 fc0e 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000808:	2360      	movs	r3, #96	; 0x60
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000810:	2300      	movs	r3, #0
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000814:	2300      	movs	r3, #0
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000824:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	4820      	ldr	r0, [pc, #128]	; (80008b0 <MX_TIM1_Init+0x138>)
 800082e:	f004 fb85 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000838:	f000 fbf4 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800083c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000840:	2204      	movs	r2, #4
 8000842:	4619      	mov	r1, r3
 8000844:	481a      	ldr	r0, [pc, #104]	; (80008b0 <MX_TIM1_Init+0x138>)
 8000846:	f004 fb79 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000850:	f000 fbe8 	bl	8001024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800087a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_TIM1_Init+0x138>)
 8000892:	f005 f8bd 	bl	8005a10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800089c:	f000 fbc2 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_TIM1_Init+0x138>)
 80008a2:	f000 fd3f 	bl	8001324 <HAL_TIM_MspPostInit>

}
 80008a6:	bf00      	nop
 80008a8:	3760      	adds	r7, #96	; 0x60
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200001e0 	.word	0x200001e0
 80008b4:	40012c00 	.word	0x40012c00

080008b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2224      	movs	r2, #36	; 0x24
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f009 fde2 	bl	800a490 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_TIM2_Init+0xa4>)
 80008d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_TIM2_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_TIM2_Init+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_TIM2_Init+0xa4>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_TIM2_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_TIM2_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008fe:	2303      	movs	r3, #3
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000916:	2301      	movs	r3, #1
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_TIM2_Init+0xa4>)
 800092a:	f004 f853 	bl	80049d4 <HAL_TIM_Encoder_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000934:	f000 fb76 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_TIM2_Init+0xa4>)
 8000946:	f004 ffe1 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000950:	f000 fb68 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000022c 	.word	0x2000022c

08000960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2224      	movs	r2, #36	; 0x24
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f009 fd8e 	bl	800a490 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_TIM3_Init+0xa4>)
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <MX_TIM3_Init+0xa8>)
 8000982:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_TIM3_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_TIM3_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_TIM3_Init+0xa4>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_TIM3_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_TIM3_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009a4:	2303      	movs	r3, #3
 80009a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009bc:	2301      	movs	r3, #1
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_TIM3_Init+0xa4>)
 80009d0:	f004 f800 	bl	80049d4 <HAL_TIM_Encoder_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80009da:	f000 fb23 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_TIM3_Init+0xa4>)
 80009ec:	f004 ff8e 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80009f6:	f000 fb15 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000278 	.word	0x20000278
 8000a08:	40000400 	.word	0x40000400

08000a0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2224      	movs	r2, #36	; 0x24
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f009 fd38 	bl	800a490 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_TIM4_Init+0xa4>)
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <MX_TIM4_Init+0xa8>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_TIM4_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_TIM4_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_TIM4_Init+0xa4>)
 8000a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_TIM4_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_TIM4_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a50:	2303      	movs	r3, #3
 8000a52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_TIM4_Init+0xa4>)
 8000a7c:	f003 ffaa 	bl	80049d4 <HAL_TIM_Encoder_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a86:	f000 facd 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_TIM4_Init+0xa4>)
 8000a98:	f004 ff38 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000aa2:	f000 fabf 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200002c4 	.word	0x200002c4
 8000ab4:	40000800 	.word	0x40000800

08000ab8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_TIM6_Init+0x68>)
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <MX_TIM6_Init+0x6c>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_TIM6_Init+0x68>)
 8000ad0:	f240 623f 	movw	r2, #1599	; 0x63f
 8000ad4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_TIM6_Init+0x68>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_TIM6_Init+0x68>)
 8000ade:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_TIM6_Init+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_TIM6_Init+0x68>)
 8000aec:	f003 fd58 	bl	80045a0 <HAL_TIM_Base_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000af6:	f000 fa95 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	; (8000b20 <MX_TIM6_Init+0x68>)
 8000b08:	f004 ff00 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000b12:	f000 fa87 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000310 	.word	0x20000310
 8000b24:	40001000 	.word	0x40001000

08000b28 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b098      	sub	sp, #96	; 0x60
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2234      	movs	r2, #52	; 0x34
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f009 fc9b 	bl	800a490 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000b5c:	4a3b      	ldr	r2, [pc, #236]	; (8000c4c <MX_TIM8_Init+0x124>)
 8000b5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 49;
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000b62:	2231      	movs	r2, #49	; 0x31
 8000b64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000b6e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b86:	4830      	ldr	r0, [pc, #192]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000b88:	f003 fdcc 	bl	8004724 <HAL_TIM_PWM_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 fa47 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ba2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4827      	ldr	r0, [pc, #156]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000baa:	f004 feaf 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000bb4:	f000 fa36 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb8:	2360      	movs	r3, #96	; 0x60
 8000bba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bd8:	2204      	movs	r2, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481a      	ldr	r0, [pc, #104]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000bde:	f004 f9ad 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000be8:	f000 fa1c 	bl	8001024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000c2a:	f004 fef1 	bl	8005a10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000c34:	f000 f9f6 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <MX_TIM8_Init+0x120>)
 8000c3a:	f000 fb73 	bl	8001324 <HAL_TIM_MspPostInit>

}
 8000c3e:	bf00      	nop
 8000c40:	3760      	adds	r7, #96	; 0x60
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000035c 	.word	0x2000035c
 8000c4c:	40013400 	.word	0x40013400

08000c50 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b098      	sub	sp, #96	; 0x60
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	615a      	str	r2, [r3, #20]
 8000c74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2234      	movs	r2, #52	; 0x34
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f009 fc07 	bl	800a490 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000c84:	4a34      	ldr	r2, [pc, #208]	; (8000d58 <MX_TIM15_Init+0x108>)
 8000c86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 49;
 8000c88:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000c8a:	2231      	movs	r2, #49	; 0x31
 8000c8c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 8000c94:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000c96:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c9a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000cae:	4829      	ldr	r0, [pc, #164]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000cb0:	f003 fd38 	bl	8004724 <HAL_TIM_PWM_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000cba:	f000 f9b3 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000cc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4821      	ldr	r0, [pc, #132]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000cce:	f004 fe1d 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f000 f9a4 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cdc:	2360      	movs	r3, #96	; 0x60
 8000cde:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4814      	ldr	r0, [pc, #80]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000d02:	f004 f91b 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000d0c:	f000 f98a 	bl	8001024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4807      	ldr	r0, [pc, #28]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000d38:	f004 fe6a 	bl	8005a10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000d42:	f000 f96f 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <MX_TIM15_Init+0x104>)
 8000d48:	f000 faec 	bl	8001324 <HAL_TIM_MspPostInit>

}
 8000d4c:	bf00      	nop
 8000d4e:	3760      	adds	r7, #96	; 0x60
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200003a8 	.word	0x200003a8
 8000d58:	40014000 	.word	0x40014000

08000d5c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b094      	sub	sp, #80	; 0x50
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2234      	movs	r2, #52	; 0x34
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fb87 	bl	800a490 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d82:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000d84:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <MX_TIM16_Init+0xf0>)
 8000d86:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 49;
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000d8a:	2231      	movs	r2, #49	; 0x31
 8000d8c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8000d94:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000d96:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d9a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000da2:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dae:	4826      	ldr	r0, [pc, #152]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000db0:	f003 fbf6 	bl	80045a0 <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000dba:	f000 f933 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000dbe:	4822      	ldr	r0, [pc, #136]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000dc0:	f003 fcb0 	bl	8004724 <HAL_TIM_PWM_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000dca:	f000 f92b 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dce:	2360      	movs	r3, #96	; 0x60
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dee:	2200      	movs	r2, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4815      	ldr	r0, [pc, #84]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000df4:	f004 f8a2 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000dfe:	f000 f911 	bl	8001024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000e2a:	f004 fdf1 	bl	8005a10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000e34:	f000 f8f6 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM16_Init+0xec>)
 8000e3a:	f000 fa73 	bl	8001324 <HAL_TIM_MspPostInit>

}
 8000e3e:	bf00      	nop
 8000e40:	3750      	adds	r7, #80	; 0x50
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200003f4 	.word	0x200003f4
 8000e4c:	40014400 	.word	0x40014400

08000e50 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	; 0x50
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]
 8000e66:	615a      	str	r2, [r3, #20]
 8000e68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2234      	movs	r2, #52	; 0x34
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f009 fb0d 	bl	800a490 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000e78:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <MX_TIM17_Init+0xf0>)
 8000e7a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e96:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ea2:	4826      	ldr	r0, [pc, #152]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000ea4:	f003 fb7c 	bl	80045a0 <HAL_TIM_Base_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000eae:	f000 f8b9 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000eb2:	4822      	ldr	r0, [pc, #136]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000eb4:	f003 fc36 	bl	8004724 <HAL_TIM_PWM_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000ebe:	f000 f8b1 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec2:	2360      	movs	r3, #96	; 0x60
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ede:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4815      	ldr	r0, [pc, #84]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000ee8:	f004 f828 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000ef2:	f000 f897 	bl	8001024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000f1e:	f004 fd77 	bl	8005a10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000f28:	f000 f87c 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MX_TIM17_Init+0xec>)
 8000f2e:	f000 f9f9 	bl	8001324 <HAL_TIM_MspPostInit>

}
 8000f32:	bf00      	nop
 8000f34:	3750      	adds	r7, #80	; 0x50
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000440 	.word	0x20000440
 8000f40:	40014800 	.word	0x40014800

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000f60:	f043 0320 	orr.w	r3, r3, #32
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0320 	and.w	r3, r3, #32
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a28      	ldr	r2, [pc, #160]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MX_GPIO_Init+0xd4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|GPIO_PIN_1|M3_DIR_Pin|M1_DIR_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f240 4107 	movw	r1, #1031	; 0x407
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f000 fe1c 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4819      	ldr	r0, [pc, #100]	; (800101c <MX_GPIO_Init+0xd8>)
 8000fb6:	f000 fe17 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IR_SENSOR_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_Pin;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_GPIO_Init+0xdc>)
 8000fce:	f000 fc71 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_Pin PA1 M3_DIR_Pin M1_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|GPIO_PIN_1|M3_DIR_Pin|M1_DIR_Pin;
 8000fd2:	f240 4307 	movw	r3, #1031	; 0x407
 8000fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f000 fc61 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_GPIO_Init+0xd8>)
 800100a:	f000 fc53 	bl	80018b4 <HAL_GPIO_Init>

}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	48000400 	.word	0x48000400
 8001020:	48001400 	.word	0x48001400

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_MspInit+0x44>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_MspInit+0x44>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6613      	str	r3, [r2, #96]	; 0x60
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_MspInit+0x44>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_MspInit+0x44>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_MspInit+0x44>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6593      	str	r3, [r2, #88]	; 0x58
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_MspInit+0x44>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <HAL_TIM_PWM_MspInit+0x80>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d10c      	bne.n	80010a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_TIM_PWM_MspInit+0x84>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_TIM_PWM_MspInit+0x84>)
 8001090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001094:	6613      	str	r3, [r2, #96]	; 0x60
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_TIM_PWM_MspInit+0x84>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80010a2:	e022      	b.n	80010ea <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_TIM_PWM_MspInit+0x88>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d10c      	bne.n	80010c8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_TIM_PWM_MspInit+0x84>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <HAL_TIM_PWM_MspInit+0x84>)
 80010b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010b8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_TIM_PWM_MspInit+0x84>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
}
 80010c6:	e010      	b.n	80010ea <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_TIM_PWM_MspInit+0x8c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10b      	bne.n	80010ea <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_TIM_PWM_MspInit+0x84>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	4a09      	ldr	r2, [pc, #36]	; (80010fc <HAL_TIM_PWM_MspInit+0x84>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_TIM_PWM_MspInit+0x84>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
}
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40012c00 	.word	0x40012c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	40013400 	.word	0x40013400
 8001104:	40014000 	.word	0x40014000

08001108 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001128:	d146      	bne.n	80011b8 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b53      	ldr	r3, [pc, #332]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	4a52      	ldr	r2, [pc, #328]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6593      	str	r3, [r2, #88]	; 0x58
 8001136:	4b50      	ldr	r3, [pc, #320]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	623b      	str	r3, [r7, #32]
 8001140:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b4a      	ldr	r3, [pc, #296]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b47      	ldr	r3, [pc, #284]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a46      	ldr	r2, [pc, #280]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b44      	ldr	r3, [pc, #272]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC1_M1_Pin;
 8001172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001184:	2301      	movs	r3, #1
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC1_M1_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f000 fb8f 	bl	80018b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC2_M1_Pin;
 8001196:	2308      	movs	r3, #8
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a6:	2301      	movs	r3, #1
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC2_M1_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	4832      	ldr	r0, [pc, #200]	; (800127c <HAL_TIM_Encoder_MspInit+0x174>)
 80011b2:	f000 fb7f 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011b6:	e05a      	b.n	800126e <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM3)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a30      	ldr	r2, [pc, #192]	; (8001280 <HAL_TIM_Encoder_MspInit+0x178>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d128      	bne.n	8001214 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a2c      	ldr	r2, [pc, #176]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a26      	ldr	r2, [pc, #152]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1_M2_Pin|ENC2_M2_Pin;
 80011f2:	2330      	movs	r3, #48	; 0x30
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001202:	2302      	movs	r3, #2
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	481b      	ldr	r0, [pc, #108]	; (800127c <HAL_TIM_Encoder_MspInit+0x174>)
 800120e:	f000 fb51 	bl	80018b4 <HAL_GPIO_Init>
}
 8001212:	e02c      	b.n	800126e <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM4)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_TIM_Encoder_MspInit+0x17c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d127      	bne.n	800126e <HAL_TIM_Encoder_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6593      	str	r3, [r2, #88]	; 0x58
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_TIM_Encoder_MspInit+0x170>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_M3_Pin|ENC2_M3_Pin;
 800124e:	23c0      	movs	r3, #192	; 0xc0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800125e:	2302      	movs	r3, #2
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <HAL_TIM_Encoder_MspInit+0x174>)
 800126a:	f000 fb23 	bl	80018b4 <HAL_GPIO_Init>
}
 800126e:	bf00      	nop
 8001270:	3738      	adds	r7, #56	; 0x38
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	48000400 	.word	0x48000400
 8001280:	40000400 	.word	0x40000400
 8001284:	40000800 	.word	0x40000800

08001288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <HAL_TIM_Base_MspInit+0x8c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d114      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_TIM_Base_MspInit+0x90>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <HAL_TIM_Base_MspInit+0x90>)
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	6593      	str	r3, [r2, #88]	; 0x58
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_TIM_Base_MspInit+0x90>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2036      	movs	r0, #54	; 0x36
 80012b8:	f000 fac7 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012bc:	2036      	movs	r0, #54	; 0x36
 80012be:	f000 fade 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80012c2:	e022      	b.n	800130a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <HAL_TIM_Base_MspInit+0x94>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10c      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_TIM_Base_MspInit+0x90>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_TIM_Base_MspInit+0x90>)
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	6613      	str	r3, [r2, #96]	; 0x60
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_TIM_Base_MspInit+0x90>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
}
 80012e6:	e010      	b.n	800130a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_TIM_Base_MspInit+0x98>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10b      	bne.n	800130a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_TIM_Base_MspInit+0x90>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_TIM_Base_MspInit+0x90>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6613      	str	r3, [r2, #96]	; 0x60
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_TIM_Base_MspInit+0x90>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40001000 	.word	0x40001000
 8001318:	40021000 	.word	0x40021000
 800131c:	40014400 	.word	0x40014400
 8001320:	40014800 	.word	0x40014800

08001324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	; 0x30
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <HAL_TIM_MspPostInit+0x180>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d11e      	bne.n	8001384 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin|M1_PWM_Pin;
 800135e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001370:	2306      	movs	r3, #6
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137e:	f000 fa99 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001382:	e08a      	b.n	800149a <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM8)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a48      	ldr	r2, [pc, #288]	; (80014ac <HAL_TIM_MspPostInit+0x188>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d11d      	bne.n	80013ca <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a45      	ldr	r2, [pc, #276]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 80013a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80013b8:	230a      	movs	r3, #10
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	483b      	ldr	r0, [pc, #236]	; (80014b0 <HAL_TIM_MspPostInit+0x18c>)
 80013c4:	f000 fa76 	bl	80018b4 <HAL_GPIO_Init>
}
 80013c8:	e067      	b.n	800149a <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM15)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a39      	ldr	r2, [pc, #228]	; (80014b4 <HAL_TIM_MspPostInit+0x190>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d11d      	bne.n	8001410 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	4a33      	ldr	r2, [pc, #204]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = THRW_PWM_Pin;
 80013ec:	2308      	movs	r3, #8
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80013fc:	2309      	movs	r3, #9
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THRW_PWM_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f000 fa53 	bl	80018b4 <HAL_GPIO_Init>
}
 800140e:	e044      	b.n	800149a <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM16)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_TIM_MspPostInit+0x194>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d11d      	bne.n	8001456 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001442:	2301      	movs	r3, #1
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f000 fa30 	bl	80018b4 <HAL_GPIO_Init>
}
 8001454:	e021      	b.n	800149a <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM17)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <HAL_TIM_MspPostInit+0x198>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d11c      	bne.n	800149a <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_TIM_MspPostInit+0x184>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001488:	2301      	movs	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001496:	f000 fa0d 	bl	80018b4 <HAL_GPIO_Init>
}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	; 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40012c00 	.word	0x40012c00
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40013400 	.word	0x40013400
 80014b0:	48000400 	.word	0x48000400
 80014b4:	40014000 	.word	0x40014000
 80014b8:	40014400 	.word	0x40014400
 80014bc:	40014800 	.word	0x40014800

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150c:	f000 f8a4 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <USB_LP_IRQHandler+0x10>)
 800151a:	f000 fc84 	bl	8001e26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20001138 	.word	0x20001138

08001528 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM6_DAC_IRQHandler+0x10>)
 800152e:	f003 fb85 	bl	8004c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000310 	.word	0x20000310

0800153c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001562:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <LoopForever+0x6>)
  ldr r1, =_edata
 8001566:	490e      	ldr	r1, [pc, #56]	; (80015a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <LoopForever+0xe>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800157c:	4c0b      	ldr	r4, [pc, #44]	; (80015ac <LoopForever+0x16>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800158a:	f7ff ffd7 	bl	800153c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158e:	f008 ff4d 	bl	800a42c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001592:	f7fe ffe7 	bl	8000564 <main>

08001596 <LoopForever>:

LoopForever:
    b LoopForever
 8001596:	e7fe      	b.n	8001596 <LoopForever>
  ldr   r0, =_estack
 8001598:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 80015a4:	0800a518 	.word	0x0800a518
  ldr r2, =_sbss
 80015a8:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80015ac:	2000164c 	.word	0x2000164c

080015b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC1_2_IRQHandler>

080015b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f939 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c2:	200f      	movs	r0, #15
 80015c4:	f000 f80e 	bl	80015e4 <HAL_InitTick>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	e001      	b.n	80015d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015d4:	f7ff fd2c 	bl	8001030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d8:	79fb      	ldrb	r3, [r7, #7]

}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_InitTick+0x68>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d022      	beq.n	800163e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_InitTick+0x6c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_InitTick+0x68>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001604:	fbb1 f3f3 	udiv	r3, r1, r3
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f944 	bl	800189a <HAL_SYSTICK_Config>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10f      	bne.n	8001638 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	d809      	bhi.n	8001632 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161e:	2200      	movs	r2, #0
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	f04f 30ff 	mov.w	r0, #4294967295
 8001626:	f000 f910 	bl	800184a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_InitTick+0x70>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e007      	b.n	8001642 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e004      	b.n	8001642 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e001      	b.n	8001642 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000048 	.word	0x20000048
 8001650:	20000040 	.word	0x20000040
 8001654:	20000044 	.word	0x20000044

08001658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_IncTick+0x1c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_IncTick+0x20>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4413      	add	r3, r2
 8001666:	4a03      	ldr	r2, [pc, #12]	; (8001674 <HAL_IncTick+0x1c>)
 8001668:	6013      	str	r3, [r2, #0]
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	20000490 	.word	0x20000490
 8001678:	20000048 	.word	0x20000048

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000490 	.word	0x20000490

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	; (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff29 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff40 	bl	80016dc <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff90 	bl	8001788 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5f 	bl	8001734 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff33 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffa4 	bl	80017f0 <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018c2:	e15a      	b.n	8001b7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 814c 	beq.w	8001b74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d005      	beq.n	80018f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 0201 	and.w	r2, r3, #1
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b03      	cmp	r3, #3
 8001960:	d017      	beq.n	8001992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d123      	bne.n	80019e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	6939      	ldr	r1, [r7, #16]
 80019e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0203 	and.w	r2, r3, #3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80a6 	beq.w	8001b74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a28:	4b5b      	ldr	r3, [pc, #364]	; (8001b98 <HAL_GPIO_Init+0x2e4>)
 8001a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2c:	4a5a      	ldr	r2, [pc, #360]	; (8001b98 <HAL_GPIO_Init+0x2e4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6613      	str	r3, [r2, #96]	; 0x60
 8001a34:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <HAL_GPIO_Init+0x2e4>)
 8001a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a40:	4a56      	ldr	r2, [pc, #344]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a6a:	d01f      	beq.n	8001aac <HAL_GPIO_Init+0x1f8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_GPIO_Init+0x2ec>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d019      	beq.n	8001aa8 <HAL_GPIO_Init+0x1f4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_GPIO_Init+0x2f0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_GPIO_Init+0x1f0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a4a      	ldr	r2, [pc, #296]	; (8001ba8 <HAL_GPIO_Init+0x2f4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00d      	beq.n	8001aa0 <HAL_GPIO_Init+0x1ec>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a49      	ldr	r2, [pc, #292]	; (8001bac <HAL_GPIO_Init+0x2f8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0x1e8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a48      	ldr	r2, [pc, #288]	; (8001bb0 <HAL_GPIO_Init+0x2fc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_GPIO_Init+0x1e4>
 8001a94:	2305      	movs	r3, #5
 8001a96:	e00a      	b.n	8001aae <HAL_GPIO_Init+0x1fa>
 8001a98:	2306      	movs	r3, #6
 8001a9a:	e008      	b.n	8001aae <HAL_GPIO_Init+0x1fa>
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	e006      	b.n	8001aae <HAL_GPIO_Init+0x1fa>
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e004      	b.n	8001aae <HAL_GPIO_Init+0x1fa>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e002      	b.n	8001aae <HAL_GPIO_Init+0x1fa>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_GPIO_Init+0x1fa>
 8001aac:	2300      	movs	r3, #0
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	f002 0203 	and.w	r2, r2, #3
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	4093      	lsls	r3, r2
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abe:	4937      	ldr	r1, [pc, #220]	; (8001b9c <HAL_GPIO_Init+0x2e8>)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af0:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b1a:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b44:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b6e:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f47f ae9d 	bne.w	80018c4 <HAL_GPIO_Init+0x10>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	48000400 	.word	0x48000400
 8001ba4:	48000800 	.word	0x48000800
 8001ba8:	48000c00 	.word	0x48000c00
 8001bac:	48001000 	.word	0x48001000
 8001bb0:	48001400 	.word	0x48001400
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	b08b      	sub	sp, #44	; 0x2c
 8001c1c:	af06      	add	r7, sp, #24
 8001c1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0d7      	b.n	8001dda <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f008 f8ee 	bl	8009e20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2203      	movs	r2, #3
 8001c48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 ffda 	bl	8005c0a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	e04c      	b.n	8001cf6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	b298      	uxth	r0, r3
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3336      	adds	r3, #54	; 0x36
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3303      	adds	r3, #3
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3338      	adds	r3, #56	; 0x38
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	333c      	adds	r3, #60	; 0x3c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	3340      	adds	r3, #64	; 0x40
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3ad      	bcc.n	8001c5c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e044      	b.n	8001d90 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d3b5      	bcc.n	8001d06 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	687e      	ldr	r6, [r7, #4]
 8001da2:	466d      	mov	r5, sp
 8001da4:	f106 0410 	add.w	r4, r6, #16
 8001da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	602b      	str	r3, [r5, #0]
 8001db0:	1d33      	adds	r3, r6, #4
 8001db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db4:	6838      	ldr	r0, [r7, #0]
 8001db6:	f003 ff43 	bl	8005c40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d102      	bne.n	8001dd8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f001 fc29 	bl	800362a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001de2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_PCD_Start+0x16>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e012      	b.n	8001e1e <HAL_PCD_Start+0x3c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fee9 	bl	8005bdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f006 f902 	bl	8008018 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f006 f907 	bl	8008046 <USB_ReadInterrupts>
 8001e38:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fb26 	bl	8002496 <PCD_EP_ISR_Handler>

    return;
 8001e4a:	e110      	b.n	800206e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d013      	beq.n	8001e7e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f008 f867 	bl	8009f42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e74:	2100      	movs	r1, #0
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8fc 	bl	8002074 <HAL_PCD_SetAddress>

    return;
 8001e7c:	e0f7      	b.n	800206e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e9a:	b292      	uxth	r2, r2
 8001e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ea0:	e0e5      	b.n	800206e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ec4:	e0d3      	b.n	800206e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d034      	beq.n	8001f3a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0208 	bic.w	r2, r2, #8
 8001efa:	b292      	uxth	r2, r2
 8001efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f12:	2100      	movs	r1, #0
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f008 fa09 	bl	800a32c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f008 f84a 	bl	8009fb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f32:	b292      	uxth	r2, r2
 8001f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f38:	e099      	b.n	800206e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d027      	beq.n	8001f94 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0208 	orr.w	r2, r2, #8
 8001f56:	b292      	uxth	r2, r2
 8001f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0204 	orr.w	r2, r2, #4
 8001f86:	b292      	uxth	r2, r2
 8001f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f007 fff7 	bl	8009f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f92:	e06c      	b.n	800206e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d040      	beq.n	8002020 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d12b      	bne.n	8002018 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0204 	orr.w	r2, r2, #4
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0208 	orr.w	r2, r2, #8
 8001fea:	b292      	uxth	r2, r2
 8001fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002000:	b29b      	uxth	r3, r3
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800200e:	2101      	movs	r1, #1
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f008 f98b 	bl	800a32c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002016:	e02a      	b.n	800206e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f007 ffb1 	bl	8009f80 <HAL_PCD_SuspendCallback>
    return;
 800201e:	e026      	b.n	800206e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00f      	beq.n	800204a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002032:	b29a      	uxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800203c:	b292      	uxth	r2, r2
 800203e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f007 ff6f 	bl	8009f26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002048:	e011      	b.n	800206e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00c      	beq.n	800206e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002066:	b292      	uxth	r2, r2
 8002068:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800206c:	bf00      	nop
  }
}
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_PCD_SetAddress+0x1a>
 800208a:	2302      	movs	r3, #2
 800208c:	e013      	b.n	80020b6 <HAL_PCD_SetAddress+0x42>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f005 ffa2 	bl	8007ff0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	4608      	mov	r0, r1
 80020c8:	4611      	mov	r1, r2
 80020ca:	461a      	mov	r2, r3
 80020cc:	4603      	mov	r3, r0
 80020ce:	70fb      	strb	r3, [r7, #3]
 80020d0:	460b      	mov	r3, r1
 80020d2:	803b      	strh	r3, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	da0e      	bge.n	8002102 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	705a      	strb	r2, [r3, #1]
 8002100:	e00e      	b.n	8002120 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 0207 	and.w	r2, r3, #7
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800212c:	883a      	ldrh	r2, [r7, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	78ba      	ldrb	r2, [r7, #2]
 8002136:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800214a:	78bb      	ldrb	r3, [r7, #2]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d102      	bne.n	8002156 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_PCD_EP_Open+0xa6>
 8002160:	2302      	movs	r3, #2
 8002162:	e00e      	b.n	8002182 <HAL_PCD_EP_Open+0xc4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 fd86 	bl	8005c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002180:	7afb      	ldrb	r3, [r7, #11]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da0e      	bge.n	80021bc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	705a      	strb	r2, [r3, #1]
 80021ba:	e00e      	b.n	80021da <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 0207 	and.w	r2, r3, #7
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_PCD_EP_Close+0x6a>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e00e      	b.n	8002212 <HAL_PCD_EP_Close+0x88>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68f9      	ldr	r1, [r7, #12]
 8002202:	4618      	mov	r0, r3
 8002204:	f004 f8d2 	bl	80063ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	460b      	mov	r3, r1
 8002228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222a:	7afb      	ldrb	r3, [r7, #11]
 800222c:	f003 0207 	and.w	r2, r3, #7
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2200      	movs	r2, #0
 8002252:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2200      	movs	r2, #0
 8002258:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	b2da      	uxtb	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	2b00      	cmp	r3, #0
 800226e:	d106      	bne.n	800227e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6979      	ldr	r1, [r7, #20]
 8002276:	4618      	mov	r0, r3
 8002278:	f004 fa85 	bl	8006786 <USB_EPStartXfer>
 800227c:	e005      	b.n	800228a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6979      	ldr	r1, [r7, #20]
 8002284:	4618      	mov	r0, r3
 8002286:	f004 fa7e 	bl	8006786 <USB_EPStartXfer>
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 0207 	and.w	r2, r3, #7
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	460b      	mov	r3, r1
 80022d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d4:	7afb      	ldrb	r3, [r7, #11]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2201      	movs	r2, #1
 800230e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	b2da      	uxtb	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 fa2a 	bl	8006786 <USB_EPStartXfer>
 8002332:	e005      	b.n	8002340 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	4618      	mov	r0, r3
 800233c:	f004 fa23 	bl	8006786 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 0207 	and.w	r2, r3, #7
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d901      	bls.n	8002368 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e03e      	b.n	80023e6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236c:	2b00      	cmp	r3, #0
 800236e:	da0e      	bge.n	800238e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	705a      	strb	r2, [r3, #1]
 800238c:	e00c      	b.n	80023a8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_PCD_EP_SetStall+0x7e>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e00e      	b.n	80023e6 <HAL_PCD_EP_SetStall+0x9c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 fd0b 	bl	8007df2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	d901      	bls.n	800240c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e040      	b.n	800248e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800240c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da0e      	bge.n	8002432 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	705a      	strb	r2, [r3, #1]
 8002430:	e00e      	b.n	8002450 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	f003 0207 	and.w	r2, r3, #7
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	b2da      	uxtb	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_PCD_EP_ClrStall+0x82>
 800246c:	2302      	movs	r3, #2
 800246e:	e00e      	b.n	800248e <HAL_PCD_EP_ClrStall+0xa0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68f9      	ldr	r1, [r7, #12]
 800247e:	4618      	mov	r0, r3
 8002480:	f005 fd08 	bl	8007e94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b096      	sub	sp, #88	; 0x58
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800249e:	e39c      	b.n	8002bda <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80024ba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 815e 	bne.w	8002780 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d150      	bne.n	8002572 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e0:	81fb      	strh	r3, [r7, #14]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3328      	adds	r3, #40	; 0x28
 80024f8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	4413      	add	r3, r2
 8002514:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800251e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002520:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	441a      	add	r2, r3
 800252c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002530:	2100      	movs	r1, #0
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f007 fcdd 	bl	8009ef2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 834a 	beq.w	8002bda <PCD_EP_ISR_Handler+0x744>
 8002546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 8345 	bne.w	8002bda <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800255c:	b2da      	uxtb	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b292      	uxth	r2, r2
 8002564:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002570:	e333      	b.n	8002bda <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002578:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002584:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	2b00      	cmp	r3, #0
 800258e:	d032      	beq.n	80025f6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80025c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f005 fd8d 	bl	80080ea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025dc:	4013      	ands	r3, r2
 80025de:	823b      	strh	r3, [r7, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	8a3a      	ldrh	r2, [r7, #16]
 80025e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ea:	b292      	uxth	r2, r2
 80025ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f007 fc52 	bl	8009e98 <HAL_PCD_SetupStageCallback>
 80025f4:	e2f1      	b.n	8002bda <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025f6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f280 82ed 	bge.w	8002bda <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29a      	uxth	r2, r3
 8002608:	f640 738f 	movw	r3, #3983	; 0xf8f
 800260c:	4013      	ands	r3, r2
 800260e:	83fb      	strh	r3, [r7, #30]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	8bfa      	ldrh	r2, [r7, #30]
 8002616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800261a:	b292      	uxth	r2, r2
 800261c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4413      	add	r3, r2
 8002638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002644:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d019      	beq.n	8002682 <PCD_EP_ISR_Handler+0x1ec>
 800264e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800265c:	6959      	ldr	r1, [r3, #20]
 800265e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002660:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002664:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002666:	b29b      	uxth	r3, r3
 8002668:	f005 fd3f 	bl	80080ea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800266c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	441a      	add	r2, r3
 8002676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002678:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800267a:	2100      	movs	r1, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f007 fc1d 	bl	8009ebc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 82a3 	bne.w	8002bda <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4413      	add	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b3e      	cmp	r3, #62	; 0x3e
 80026ba:	d918      	bls.n	80026ee <PCD_EP_ISR_Handler+0x258>
 80026bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	647b      	str	r3, [r7, #68]	; 0x44
 80026c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <PCD_EP_ISR_Handler+0x240>
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	3b01      	subs	r3, #1
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
 80026d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d8:	b29b      	uxth	r3, r3
 80026da:	029b      	lsls	r3, r3, #10
 80026dc:	b29b      	uxth	r3, r3
 80026de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	e029      	b.n	8002742 <PCD_EP_ISR_Handler+0x2ac>
 80026ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d112      	bne.n	800271c <PCD_EP_ISR_Handler+0x286>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002700:	b29a      	uxth	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	801a      	strh	r2, [r3, #0]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002714:	b29a      	uxth	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	801a      	strh	r2, [r3, #0]
 800271a:	e012      	b.n	8002742 <PCD_EP_ISR_Handler+0x2ac>
 800271c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	647b      	str	r3, [r7, #68]	; 0x44
 8002724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <PCD_EP_ISR_Handler+0x2a0>
 8002730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002732:	3301      	adds	r3, #1
 8002734:	647b      	str	r3, [r7, #68]	; 0x44
 8002736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002738:	b29b      	uxth	r3, r3
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	b29a      	uxth	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	827b      	strh	r3, [r7, #18]
 8002754:	8a7b      	ldrh	r3, [r7, #18]
 8002756:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800275a:	827b      	strh	r3, [r7, #18]
 800275c:	8a7b      	ldrh	r3, [r7, #18]
 800275e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002762:	827b      	strh	r3, [r7, #18]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	8a7b      	ldrh	r3, [r7, #18]
 800276a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800276e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277a:	b29b      	uxth	r3, r3
 800277c:	8013      	strh	r3, [r2, #0]
 800277e:	e22c      	b.n	8002bda <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002794:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002798:	2b00      	cmp	r3, #0
 800279a:	f280 80f6 	bge.w	800298a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027b4:	4013      	ands	r3, r2
 80027b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80027cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027d0:	b292      	uxth	r2, r2
 80027d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027d4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ec:	7b1b      	ldrb	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d123      	bne.n	800283a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4413      	add	r3, r2
 800280c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002816:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800281a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 808e 	beq.w	8002940 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282a:	6959      	ldr	r1, [r3, #20]
 800282c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282e:	88da      	ldrh	r2, [r3, #6]
 8002830:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002834:	f005 fc59 	bl	80080ea <USB_ReadPMA>
 8002838:	e082      	b.n	8002940 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800283a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283c:	78db      	ldrb	r3, [r3, #3]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d10a      	bne.n	8002858 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002842:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002846:	461a      	mov	r2, r3
 8002848:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f9d3 	bl	8002bf6 <HAL_PCD_EP_DB_Receive>
 8002850:	4603      	mov	r3, r0
 8002852:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002856:	e073      	b.n	8002940 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	441a      	add	r2, r3
 8002884:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002894:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002898:	b29b      	uxth	r3, r3
 800289a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d022      	beq.n	80028fc <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80028de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d02c      	beq.n	8002940 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ec:	6959      	ldr	r1, [r3, #20]
 80028ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f0:	891a      	ldrh	r2, [r3, #8]
 80028f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028f6:	f005 fbf8 	bl	80080ea <USB_ReadPMA>
 80028fa:	e021      	b.n	8002940 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002904:	b29b      	uxth	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4413      	add	r3, r2
 8002916:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002920:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002924:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002928:	2b00      	cmp	r3, #0
 800292a:	d009      	beq.n	8002940 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002932:	6959      	ldr	r1, [r3, #20]
 8002934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002936:	895a      	ldrh	r2, [r3, #10]
 8002938:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800293c:	f005 fbd5 	bl	80080ea <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002948:	441a      	add	r2, r3
 800294a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800294e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002956:	441a      	add	r2, r3
 8002958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800295c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <PCD_EP_ISR_Handler+0x4da>
 8002964:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	429a      	cmp	r2, r3
 800296e:	d206      	bcs.n	800297e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f007 faa0 	bl	8009ebc <HAL_PCD_DataOutStageCallback>
 800297c:	e005      	b.n	800298a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002984:	4618      	mov	r0, r3
 8002986:	f003 fefe 	bl	8006786 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800298a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8121 	beq.w	8002bda <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002998:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	441a      	add	r2, r3
 80029d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80029dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80029e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ea:	78db      	ldrb	r3, [r3, #3]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	f000 80a2 	beq.w	8002b36 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80029f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fa:	7b1b      	ldrb	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8093 	beq.w	8002b28 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a02:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d046      	beq.n	8002a9c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d126      	bne.n	8002a64 <PCD_EP_ISR_Handler+0x5ce>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	4413      	add	r3, r2
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	00da      	lsls	r2, r3, #3
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	4413      	add	r3, r2
 8002a38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	e061      	b.n	8002b28 <PCD_EP_ISR_Handler+0x692>
 8002a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d15d      	bne.n	8002b28 <PCD_EP_ISR_Handler+0x692>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	4413      	add	r3, r2
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	00da      	lsls	r2, r3, #3
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	2200      	movs	r2, #0
 8002a98:	801a      	strh	r2, [r3, #0]
 8002a9a:	e045      	b.n	8002b28 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa4:	785b      	ldrb	r3, [r3, #1]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d126      	bne.n	8002af8 <PCD_EP_ISR_Handler+0x662>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	4413      	add	r3, r2
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	00da      	lsls	r2, r3, #3
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aca:	4413      	add	r3, r2
 8002acc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	801a      	strh	r2, [r3, #0]
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	e017      	b.n	8002b28 <PCD_EP_ISR_Handler+0x692>
 8002af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d113      	bne.n	8002b28 <PCD_EP_ISR_Handler+0x692>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	4413      	add	r3, r2
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	00da      	lsls	r2, r3, #3
 8002b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	2200      	movs	r2, #0
 8002b26:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f007 f9df 	bl	8009ef2 <HAL_PCD_DataInStageCallback>
 8002b34:	e051      	b.n	8002bda <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002b36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d144      	bne.n	8002bcc <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d907      	bls.n	8002b86 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b82:	619a      	str	r2, [r3, #24]
 8002b84:	e002      	b.n	8002b8c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f007 f9a9 	bl	8009ef2 <HAL_PCD_DataInStageCallback>
 8002ba0:	e01b      	b.n	8002bda <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002baa:	441a      	add	r2, r3
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bb8:	441a      	add	r2, r3
 8002bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bbc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fdde 	bl	8006786 <USB_EPStartXfer>
 8002bca:	e006      	b.n	8002bda <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002bcc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f917 	bl	8002e08 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	b21b      	sxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f6ff ac5a 	blt.w	80024a0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3758      	adds	r7, #88	; 0x58
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	4613      	mov	r3, r2
 8002c02:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d07c      	beq.n	8002d08 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c32:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	8b7b      	ldrh	r3, [r7, #26]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d306      	bcc.n	8002c4c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	8b7b      	ldrh	r3, [r7, #26]
 8002c44:	1ad2      	subs	r2, r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	619a      	str	r2, [r3, #24]
 8002c4a:	e002      	b.n	8002c52 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d123      	bne.n	8002ca2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c74:	833b      	strh	r3, [r7, #24]
 8002c76:	8b3b      	ldrh	r3, [r7, #24]
 8002c78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c7c:	833b      	strh	r3, [r7, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	8b3b      	ldrh	r3, [r7, #24]
 8002c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01f      	beq.n	8002cec <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	82fb      	strh	r3, [r7, #22]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	8afb      	ldrh	r3, [r7, #22]
 8002cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cec:	8b7b      	ldrh	r3, [r7, #26]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8085 	beq.w	8002dfe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6959      	ldr	r1, [r3, #20]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	891a      	ldrh	r2, [r3, #8]
 8002d00:	8b7b      	ldrh	r3, [r7, #26]
 8002d02:	f005 f9f2 	bl	80080ea <USB_ReadPMA>
 8002d06:	e07a      	b.n	8002dfe <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	4413      	add	r3, r2
 8002d22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	8b7b      	ldrh	r3, [r7, #26]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d306      	bcc.n	8002d46 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	8b7b      	ldrh	r3, [r7, #26]
 8002d3e:	1ad2      	subs	r2, r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	619a      	str	r2, [r3, #24]
 8002d44:	e002      	b.n	8002d4c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d123      	bne.n	8002d9c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	83fb      	strh	r3, [r7, #30]
 8002d70:	8bfb      	ldrh	r3, [r7, #30]
 8002d72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d76:	83fb      	strh	r3, [r7, #30]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	8bfb      	ldrh	r3, [r7, #30]
 8002d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d11f      	bne.n	8002de6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	83bb      	strh	r3, [r7, #28]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	441a      	add	r2, r3
 8002dd0:	8bbb      	ldrh	r3, [r7, #28]
 8002dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002de6:	8b7b      	ldrh	r3, [r7, #26]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	6959      	ldr	r1, [r3, #20]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	895a      	ldrh	r2, [r3, #10]
 8002df8:	8b7b      	ldrh	r3, [r7, #26]
 8002dfa:	f005 f976 	bl	80080ea <USB_ReadPMA>
    }
  }

  return count;
 8002dfe:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b0a2      	sub	sp, #136	; 0x88
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 81c5 	beq.w	80031ac <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d907      	bls.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e5e:	1ad2      	subs	r2, r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	619a      	str	r2, [r3, #24]
 8002e64:	e002      	b.n	8002e6c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 80b9 	bne.w	8002fe8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	785b      	ldrb	r3, [r3, #1]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d126      	bne.n	8002ecc <HAL_PCD_EP_DB_Transmit+0xc4>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	4413      	add	r3, r2
 8002e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	00da      	lsls	r2, r3, #3
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	801a      	strh	r2, [r3, #0]
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	801a      	strh	r2, [r3, #0]
 8002eca:	e01a      	b.n	8002f02 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d116      	bne.n	8002f02 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	4413      	add	r3, r2
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	00da      	lsls	r2, r3, #3
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	2200      	movs	r2, #0
 8002f00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d126      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x156>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4413      	add	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	00da      	lsls	r2, r3, #3
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4413      	add	r3, r2
 8002f32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	801a      	strh	r2, [r3, #0]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	801a      	strh	r2, [r3, #0]
 8002f5c:	e017      	b.n	8002f8e <HAL_PCD_EP_DB_Transmit+0x186>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	785b      	ldrb	r3, [r3, #1]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d113      	bne.n	8002f8e <HAL_PCD_EP_DB_Transmit+0x186>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	4413      	add	r3, r2
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	00da      	lsls	r2, r3, #3
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	4413      	add	r3, r2
 8002f82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	4619      	mov	r1, r3
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f006 ffac 	bl	8009ef2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 82d2 	beq.w	800354a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc0:	827b      	strh	r3, [r7, #18]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	8a7b      	ldrh	r3, [r7, #18]
 8002fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	8013      	strh	r3, [r2, #0]
 8002fe6:	e2b0      	b.n	800354a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d021      	beq.n	8003036 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800302e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003032:	b29b      	uxth	r3, r3
 8003034:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303c:	2b01      	cmp	r3, #1
 800303e:	f040 8284 	bne.w	800354a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800304a:	441a      	add	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003058:	441a      	add	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	429a      	cmp	r2, r3
 8003068:	d309      	bcc.n	800307e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003076:	1ad2      	subs	r2, r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	621a      	str	r2, [r3, #32]
 800307c:	e015      	b.n	80030aa <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003086:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800308a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003094:	e009      	b.n	80030aa <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2200      	movs	r2, #0
 80030a8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d155      	bne.n	800315e <HAL_PCD_EP_DB_Transmit+0x356>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	4413      	add	r3, r2
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	00da      	lsls	r2, r3, #3
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	4413      	add	r3, r2
 80030d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	2b3e      	cmp	r3, #62	; 0x3e
 80030de:	d916      	bls.n	800310e <HAL_PCD_EP_DB_Transmit+0x306>
 80030e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80030f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f2:	3b01      	subs	r3, #1
 80030f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	029b      	lsls	r3, r3, #10
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003106:	b29a      	uxth	r2, r3
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	e043      	b.n	8003196 <HAL_PCD_EP_DB_Transmit+0x38e>
 800310e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003110:	2b00      	cmp	r3, #0
 8003112:	d112      	bne.n	800313a <HAL_PCD_EP_DB_Transmit+0x332>
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800311e:	b29a      	uxth	r2, r3
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800312e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003132:	b29a      	uxth	r2, r3
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	801a      	strh	r2, [r3, #0]
 8003138:	e02d      	b.n	8003196 <HAL_PCD_EP_DB_Transmit+0x38e>
 800313a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_PCD_EP_DB_Transmit+0x348>
 800314a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314c:	3301      	adds	r3, #1
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003152:	b29b      	uxth	r3, r3
 8003154:	029b      	lsls	r3, r3, #10
 8003156:	b29a      	uxth	r2, r3
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	e01b      	b.n	8003196 <HAL_PCD_EP_DB_Transmit+0x38e>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d117      	bne.n	8003196 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	643b      	str	r3, [r7, #64]	; 0x40
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003174:	b29b      	uxth	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317a:	4413      	add	r3, r2
 800317c:	643b      	str	r3, [r7, #64]	; 0x40
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	00da      	lsls	r2, r3, #3
 8003184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003186:	4413      	add	r3, r2
 8003188:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003190:	b29a      	uxth	r2, r3
 8003192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003194:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6959      	ldr	r1, [r3, #20]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	891a      	ldrh	r2, [r3, #8]
 80031a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f004 ff5e 	bl	8008066 <USB_WritePMA>
 80031aa:	e1ce      	b.n	800354a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031dc:	429a      	cmp	r2, r3
 80031de:	d307      	bcc.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031e8:	1ad2      	subs	r2, r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	619a      	str	r2, [r3, #24]
 80031ee:	e002      	b.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 80c4 	bne.w	8003388 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	785b      	ldrb	r3, [r3, #1]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d126      	bne.n	8003256 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	66bb      	str	r3, [r7, #104]	; 0x68
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800321c:	4413      	add	r3, r2
 800321e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	00da      	lsls	r2, r3, #3
 8003226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003228:	4413      	add	r3, r2
 800322a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800322e:	667b      	str	r3, [r7, #100]	; 0x64
 8003230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800323a:	b29a      	uxth	r2, r3
 800323c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324e:	b29a      	uxth	r2, r3
 8003250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003252:	801a      	strh	r2, [r3, #0]
 8003254:	e01a      	b.n	800328c <HAL_PCD_EP_DB_Transmit+0x484>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	785b      	ldrb	r3, [r3, #1]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d116      	bne.n	800328c <HAL_PCD_EP_DB_Transmit+0x484>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	673b      	str	r3, [r7, #112]	; 0x70
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003272:	4413      	add	r3, r2
 8003274:	673b      	str	r3, [r7, #112]	; 0x70
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	00da      	lsls	r2, r3, #3
 800327c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800327e:	4413      	add	r3, r2
 8003280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003284:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003288:	2200      	movs	r2, #0
 800328a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	785b      	ldrb	r3, [r3, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d12f      	bne.n	80032fa <HAL_PCD_EP_DB_Transmit+0x4f2>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b2:	4413      	add	r3, r2
 80032b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	00da      	lsls	r2, r3, #3
 80032be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c2:	4413      	add	r3, r2
 80032c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032d8:	b29a      	uxth	r2, r3
 80032da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032de:	801a      	strh	r2, [r3, #0]
 80032e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	e017      	b.n	800332a <HAL_PCD_EP_DB_Transmit+0x522>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	785b      	ldrb	r3, [r3, #1]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d113      	bne.n	800332a <HAL_PCD_EP_DB_Transmit+0x522>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800330a:	b29b      	uxth	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003310:	4413      	add	r3, r2
 8003312:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	00da      	lsls	r2, r3, #3
 800331a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800331c:	4413      	add	r3, r2
 800331e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003322:	67bb      	str	r3, [r7, #120]	; 0x78
 8003324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003326:	2200      	movs	r2, #0
 8003328:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	4619      	mov	r1, r3
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f006 fdde 	bl	8009ef2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 8104 	bne.w	800354a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800337e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003382:	b29b      	uxth	r3, r3
 8003384:	8013      	strh	r3, [r2, #0]
 8003386:	e0e0      	b.n	800354a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d121      	bne.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	441a      	add	r2, r3
 80033be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80033c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033dc:	2b01      	cmp	r3, #1
 80033de:	f040 80b4 	bne.w	800354a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ea:	441a      	add	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033f8:	441a      	add	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6a1a      	ldr	r2, [r3, #32]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	429a      	cmp	r2, r3
 8003408:	d309      	bcc.n	800341e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003416:	1ad2      	subs	r2, r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	621a      	str	r2, [r3, #32]
 800341c:	e015      	b.n	800344a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003426:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800342a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003434:	e009      	b.n	800344a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2200      	movs	r2, #0
 8003440:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	663b      	str	r3, [r7, #96]	; 0x60
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d155      	bne.n	8003504 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	65bb      	str	r3, [r7, #88]	; 0x58
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003466:	b29b      	uxth	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800346c:	4413      	add	r3, r2
 800346e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	00da      	lsls	r2, r3, #3
 8003476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003478:	4413      	add	r3, r2
 800347a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800347e:	657b      	str	r3, [r7, #84]	; 0x54
 8003480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003482:	2b3e      	cmp	r3, #62	; 0x3e
 8003484:	d916      	bls.n	80034b4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	677b      	str	r3, [r7, #116]	; 0x74
 800348c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_PCD_EP_DB_Transmit+0x694>
 8003496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003498:	3b01      	subs	r3, #1
 800349a:	677b      	str	r3, [r7, #116]	; 0x74
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	b29b      	uxth	r3, r3
 80034a0:	029b      	lsls	r3, r3, #10
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b0:	801a      	strh	r2, [r3, #0]
 80034b2:	e040      	b.n	8003536 <HAL_PCD_EP_DB_Transmit+0x72e>
 80034b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d112      	bne.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d8:	b29a      	uxth	r2, r3
 80034da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	e02a      	b.n	8003536 <HAL_PCD_EP_DB_Transmit+0x72e>
 80034e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	677b      	str	r3, [r7, #116]	; 0x74
 80034e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80034f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f2:	3301      	adds	r3, #1
 80034f4:	677b      	str	r3, [r7, #116]	; 0x74
 80034f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	029b      	lsls	r3, r3, #10
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003500:	801a      	strh	r2, [r3, #0]
 8003502:	e018      	b.n	8003536 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	785b      	ldrb	r3, [r3, #1]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d114      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0x72e>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003514:	b29b      	uxth	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800351a:	4413      	add	r3, r2
 800351c:	663b      	str	r3, [r7, #96]	; 0x60
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	00da      	lsls	r2, r3, #3
 8003524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003526:	4413      	add	r3, r2
 8003528:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800352c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800352e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003530:	b29a      	uxth	r2, r3
 8003532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003534:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6959      	ldr	r1, [r3, #20]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	895a      	ldrh	r2, [r3, #10]
 8003542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003544:	b29b      	uxth	r3, r3
 8003546:	f004 fd8e 	bl	8008066 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003564:	823b      	strh	r3, [r7, #16]
 8003566:	8a3b      	ldrh	r3, [r7, #16]
 8003568:	f083 0310 	eor.w	r3, r3, #16
 800356c:	823b      	strh	r3, [r7, #16]
 800356e:	8a3b      	ldrh	r3, [r7, #16]
 8003570:	f083 0320 	eor.w	r3, r3, #32
 8003574:	823b      	strh	r3, [r7, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	441a      	add	r2, r3
 8003584:	8a3b      	ldrh	r3, [r7, #16]
 8003586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800358a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3788      	adds	r7, #136	; 0x88
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	4613      	mov	r3, r2
 80035b4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c2:	897b      	ldrh	r3, [r7, #10]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	e009      	b.n	80035ee <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035da:	897a      	ldrh	r2, [r7, #10]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	80da      	strh	r2, [r3, #6]
 8003602:	e00b      	b.n	800361c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2201      	movs	r2, #1
 8003608:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	b29a      	uxth	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	b29a      	uxth	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800364e:	b29b      	uxth	r3, r3
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003662:	b29b      	uxth	r3, r3
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d141      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800368e:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d131      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800369c:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a2:	4a46      	ldr	r2, [pc, #280]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ac:	4b43      	ldr	r3, [pc, #268]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036b4:	4a41      	ldr	r2, [pc, #260]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036bc:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2232      	movs	r2, #50	; 0x32
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4a3f      	ldr	r2, [pc, #252]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	0c9b      	lsrs	r3, r3, #18
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d2:	e002      	b.n	80036da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036da:	4b38      	ldr	r3, [pc, #224]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d102      	bne.n	80036ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f2      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ee:	4b33      	ldr	r3, [pc, #204]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fa:	d158      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e057      	b.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003700:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003706:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800370c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003710:	e04d      	b.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003718:	d141      	bne.n	800379e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800371a:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d131      	bne.n	800378c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003728:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372e:	4a23      	ldr	r2, [pc, #140]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003740:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003746:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2232      	movs	r2, #50	; 0x32
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	0c9b      	lsrs	r3, r3, #18
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375e:	e002      	b.n	8003766 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3b01      	subs	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003772:	d102      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f2      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003786:	d112      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e011      	b.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800379c:	e007      	b.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40007000 	.word	0x40007000
 80037c0:	20000040 	.word	0x20000040
 80037c4:	431bde83 	.word	0x431bde83

080037c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e306      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d075      	beq.n	80038d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e6:	4b97      	ldr	r3, [pc, #604]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f0:	4b94      	ldr	r3, [pc, #592]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	d102      	bne.n	8003806 <HAL_RCC_OscConfig+0x3e>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d002      	beq.n	800380c <HAL_RCC_OscConfig+0x44>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d10b      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b8d      	ldr	r3, [pc, #564]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05b      	beq.n	80038d0 <HAL_RCC_OscConfig+0x108>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d157      	bne.n	80038d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e2e1      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x74>
 800382e:	4b85      	ldr	r3, [pc, #532]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a84      	ldr	r2, [pc, #528]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x98>
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7e      	ldr	r2, [pc, #504]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7b      	ldr	r2, [pc, #492]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 8003860:	4b78      	ldr	r3, [pc, #480]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a77      	ldr	r2, [pc, #476]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b75      	ldr	r3, [pc, #468]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a74      	ldr	r2, [pc, #464]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fd fefc 	bl	800167c <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fd fef8 	bl	800167c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e2a6      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800389a:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xc0>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd fee8 	bl	800167c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fd fee4 	bl	800167c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e292      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038c2:	4b60      	ldr	r3, [pc, #384]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0xe8>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d075      	beq.n	80039ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038de:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e8:	4b56      	ldr	r3, [pc, #344]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b0c      	cmp	r3, #12
 80038f6:	d102      	bne.n	80038fe <HAL_RCC_OscConfig+0x136>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_OscConfig+0x13c>
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d11f      	bne.n	8003944 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003904:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_OscConfig+0x154>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e265      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b49      	ldr	r3, [pc, #292]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	061b      	lsls	r3, r3, #24
 800392a:	4946      	ldr	r1, [pc, #280]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003930:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <HAL_RCC_OscConfig+0x280>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd fe55 	bl	80015e4 <HAL_InitTick>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d043      	beq.n	80039c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e251      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d023      	beq.n	8003994 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800394c:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3c      	ldr	r2, [pc, #240]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fe90 	bl	800167c <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003960:	f7fd fe8c 	bl	800167c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e23a      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003972:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	061b      	lsls	r3, r3, #24
 800398c:	492d      	ldr	r1, [pc, #180]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
 8003992:	e01a      	b.n	80039ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003994:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2a      	ldr	r2, [pc, #168]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800399a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800399e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd fe6c 	bl	800167c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a8:	f7fd fe68 	bl	800167c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e216      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ba:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x1e0>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d041      	beq.n	8003a5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01c      	beq.n	8003a18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e4:	4a17      	ldr	r2, [pc, #92]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7fd fe45 	bl	800167c <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f6:	f7fd fe41 	bl	800167c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1ef      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ef      	beq.n	80039f6 <HAL_RCC_OscConfig+0x22e>
 8003a16:	e020      	b.n	8003a5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fd fe28 	bl	800167c <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a2e:	e00d      	b.n	8003a4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a30:	f7fd fe24 	bl	800167c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d906      	bls.n	8003a4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e1d2      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a4c:	4b8c      	ldr	r3, [pc, #560]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ea      	bne.n	8003a30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80a6 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a6c:	4b84      	ldr	r3, [pc, #528]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2b4>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x2b6>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	4b7f      	ldr	r3, [pc, #508]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	4a7e      	ldr	r2, [pc, #504]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a8e:	4b7c      	ldr	r3, [pc, #496]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9e:	4b79      	ldr	r3, [pc, #484]	; (8003c84 <HAL_RCC_OscConfig+0x4bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aaa:	4b76      	ldr	r3, [pc, #472]	; (8003c84 <HAL_RCC_OscConfig+0x4bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a75      	ldr	r2, [pc, #468]	; (8003c84 <HAL_RCC_OscConfig+0x4bc>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fde1 	bl	800167c <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fd fddd 	bl	800167c <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e18b      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad0:	4b6c      	ldr	r3, [pc, #432]	; (8003c84 <HAL_RCC_OscConfig+0x4bc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d108      	bne.n	8003af6 <HAL_RCC_OscConfig+0x32e>
 8003ae4:	4b66      	ldr	r3, [pc, #408]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	4a65      	ldr	r2, [pc, #404]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af4:	e024      	b.n	8003b40 <HAL_RCC_OscConfig+0x378>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d110      	bne.n	8003b20 <HAL_RCC_OscConfig+0x358>
 8003afe:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b04:	4a5e      	ldr	r2, [pc, #376]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b06:	f043 0304 	orr.w	r3, r3, #4
 8003b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b0e:	4b5c      	ldr	r3, [pc, #368]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	4a5a      	ldr	r2, [pc, #360]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b1e:	e00f      	b.n	8003b40 <HAL_RCC_OscConfig+0x378>
 8003b20:	4b57      	ldr	r3, [pc, #348]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	4a56      	ldr	r2, [pc, #344]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b30:	4b53      	ldr	r3, [pc, #332]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	4a52      	ldr	r2, [pc, #328]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d016      	beq.n	8003b76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fd fd98 	bl	800167c <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fd fd94 	bl	800167c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e140      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b66:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ed      	beq.n	8003b50 <HAL_RCC_OscConfig+0x388>
 8003b74:	e015      	b.n	8003ba2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fd fd81 	bl	800167c <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fd fd7d 	bl	800167c <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e129      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b94:	4b3a      	ldr	r3, [pc, #232]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ed      	bne.n	8003b7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d03c      	beq.n	8003c3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01c      	beq.n	8003c02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bc8:	4b2d      	ldr	r3, [pc, #180]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bce:	4a2c      	ldr	r2, [pc, #176]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fd fd50 	bl	800167c <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be0:	f7fd fd4c 	bl	800167c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e0fa      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ef      	beq.n	8003be0 <HAL_RCC_OscConfig+0x418>
 8003c00:	e01b      	b.n	8003c3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c08:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c12:	f7fd fd33 	bl	800167c <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c1a:	f7fd fd2f 	bl	800167c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0dd      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ef      	bne.n	8003c1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80d1 	beq.w	8003de6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	f000 808b 	beq.w	8003d68 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d15e      	bne.n	8003d18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <HAL_RCC_OscConfig+0x4b8>)
 8003c60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c66:	f7fd fd09 	bl	800167c <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6c:	e00c      	b.n	8003c88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6e:	f7fd fd05 	bl	800167c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d905      	bls.n	8003c88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0b3      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c88:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ec      	bne.n	8003c6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c94:	4b56      	ldr	r3, [pc, #344]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	4b56      	ldr	r3, [pc, #344]	; (8003df4 <HAL_RCC_OscConfig+0x62c>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6a11      	ldr	r1, [r2, #32]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca4:	3a01      	subs	r2, #1
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003cae:	0212      	lsls	r2, r2, #8
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0552      	lsls	r2, r2, #21
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cc2:	0852      	lsrs	r2, r2, #1
 8003cc4:	3a01      	subs	r2, #1
 8003cc6:	0652      	lsls	r2, r2, #25
 8003cc8:	4311      	orrs	r1, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cce:	06d2      	lsls	r2, r2, #27
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	4947      	ldr	r1, [pc, #284]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a44      	ldr	r2, [pc, #272]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce4:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a41      	ldr	r2, [pc, #260]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fcc4 	bl	800167c <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fd fcc0 	bl	800167c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e06e      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0a:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x530>
 8003d16:	e066      	b.n	8003de6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d18:	4b35      	ldr	r3, [pc, #212]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a34      	ldr	r2, [pc, #208]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d24:	4b32      	ldr	r3, [pc, #200]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a31      	ldr	r2, [pc, #196]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d30:	4b2f      	ldr	r3, [pc, #188]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a2e      	ldr	r2, [pc, #184]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd fc9c 	bl	800167c <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fd fc98 	bl	800167c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e046      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5a:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x580>
 8003d66:	e03e      	b.n	8003de6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e039      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0203 	and.w	r2, r3, #3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d12c      	bne.n	8003de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	3b01      	subs	r3, #1
 8003d94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d123      	bne.n	8003de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d11b      	bne.n	8003de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d113      	bne.n	8003de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	019f800c 	.word	0x019f800c

08003df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e11e      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b91      	ldr	r3, [pc, #580]	; (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d910      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b8e      	ldr	r3, [pc, #568]	; (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 020f 	bic.w	r2, r3, #15
 8003e26:	498c      	ldr	r1, [pc, #560]	; (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b8a      	ldr	r3, [pc, #552]	; (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e106      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d073      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d129      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e54:	4b81      	ldr	r3, [pc, #516]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0f4      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e64:	f000 f966 	bl	8004134 <RCC_GetSysClockFreqFromPLLSource>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4a7c      	ldr	r2, [pc, #496]	; (8004060 <HAL_RCC_ClockConfig+0x268>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d93f      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e72:	4b7a      	ldr	r3, [pc, #488]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d033      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d12f      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e92:	4b72      	ldr	r3, [pc, #456]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9a:	4a70      	ldr	r2, [pc, #448]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e024      	b.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0c6      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec0:	4b66      	ldr	r3, [pc, #408]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0be      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ed0:	f000 f8ce 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4a61      	ldr	r2, [pc, #388]	; (8004060 <HAL_RCC_ClockConfig+0x268>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d909      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ede:	4b5f      	ldr	r3, [pc, #380]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee6:	4a5d      	ldr	r2, [pc, #372]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ef2:	4b5a      	ldr	r3, [pc, #360]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f023 0203 	bic.w	r2, r3, #3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4957      	ldr	r1, [pc, #348]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f04:	f7fd fbba 	bl	800167c <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0c:	f7fd fbb6 	bl	800167c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e095      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	4b4e      	ldr	r3, [pc, #312]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 020c 	and.w	r2, r3, #12
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d1eb      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d023      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f4c:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4a42      	ldr	r2, [pc, #264]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f64:	4b3d      	ldr	r3, [pc, #244]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f6c:	4a3b      	ldr	r2, [pc, #236]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b39      	ldr	r3, [pc, #228]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4936      	ldr	r1, [pc, #216]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d105      	bne.n	8003f9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f8e:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4a32      	ldr	r2, [pc, #200]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f9a:	4b2f      	ldr	r3, [pc, #188]	; (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d21d      	bcs.n	8003fe4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 020f 	bic.w	r2, r3, #15
 8003fb0:	4929      	ldr	r1, [pc, #164]	; (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd fb60 	bl	800167c <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fd fb5c 	bl	800167c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e03b      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1ed      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4917      	ldr	r1, [pc, #92]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800400e:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	490f      	ldr	r1, [pc, #60]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004022:	f000 f825 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 8004026:	4602      	mov	r2, r0
 8004028:	4b0c      	ldr	r3, [pc, #48]	; (800405c <HAL_RCC_ClockConfig+0x264>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	490c      	ldr	r1, [pc, #48]	; (8004064 <HAL_RCC_ClockConfig+0x26c>)
 8004034:	5ccb      	ldrb	r3, [r1, r3]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a0a      	ldr	r2, [pc, #40]	; (8004068 <HAL_RCC_ClockConfig+0x270>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004042:	4b0a      	ldr	r3, [pc, #40]	; (800406c <HAL_RCC_ClockConfig+0x274>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd facc 	bl	80015e4 <HAL_InitTick>
 800404c:	4603      	mov	r3, r0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40022000 	.word	0x40022000
 800405c:	40021000 	.word	0x40021000
 8004060:	04c4b400 	.word	0x04c4b400
 8004064:	0800a500 	.word	0x0800a500
 8004068:	20000040 	.word	0x20000040
 800406c:	20000044 	.word	0x20000044

08004070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004076:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b04      	cmp	r3, #4
 8004080:	d102      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e047      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d102      	bne.n	800409a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004094:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e03e      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d136      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b0:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	3301      	adds	r3, #1
 80040bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d10c      	bne.n	80040de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040c4:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	4a16      	ldr	r2, [pc, #88]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ce:	68d2      	ldr	r2, [r2, #12]
 80040d0:	0a12      	lsrs	r2, r2, #8
 80040d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	617b      	str	r3, [r7, #20]
      break;
 80040dc:	e00c      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040de:	4a13      	ldr	r2, [pc, #76]	; (800412c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e8:	68d2      	ldr	r2, [r2, #12]
 80040ea:	0a12      	lsrs	r2, r2, #8
 80040ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
      break;
 80040f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	0e5b      	lsrs	r3, r3, #25
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	3301      	adds	r3, #1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	e001      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004118:	693b      	ldr	r3, [r7, #16]
}
 800411a:	4618      	mov	r0, r3
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	00f42400 	.word	0x00f42400
 8004130:	007a1200 	.word	0x007a1200

08004134 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800413a:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d10c      	bne.n	8004172 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004158:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004162:	68d2      	ldr	r2, [r2, #12]
 8004164:	0a12      	lsrs	r2, r2, #8
 8004166:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
    break;
 8004170:	e00c      	b.n	800418c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800417c:	68d2      	ldr	r2, [r2, #12]
 800417e:	0a12      	lsrs	r2, r2, #8
 8004180:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004184:	fb02 f303 	mul.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
    break;
 800418a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	0e5b      	lsrs	r3, r3, #25
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041a6:	687b      	ldr	r3, [r7, #4]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40021000 	.word	0x40021000
 80041b8:	007a1200 	.word	0x007a1200
 80041bc:	00f42400 	.word	0x00f42400

080041c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041c8:	2300      	movs	r3, #0
 80041ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041cc:	2300      	movs	r3, #0
 80041ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8098 	beq.w	800430e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e2:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10d      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ee:	4b40      	ldr	r3, [pc, #256]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	4a3f      	ldr	r2, [pc, #252]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6593      	str	r3, [r2, #88]	; 0x58
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004206:	2301      	movs	r3, #1
 8004208:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800420a:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a39      	ldr	r2, [pc, #228]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004216:	f7fd fa31 	bl	800167c <HAL_GetTick>
 800421a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800421c:	e009      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fd fa2d 	bl	800167c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d902      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	74fb      	strb	r3, [r7, #19]
        break;
 8004230:	e005      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0ef      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d159      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01e      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	429a      	cmp	r2, r3
 800425e:	d019      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004260:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800426c:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	4a1f      	ldr	r2, [pc, #124]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800427c:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800428c:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d016      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fd f9ed 	bl	800167c <HAL_GetTick>
 80042a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a4:	e00b      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fd f9e9 	bl	800167c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d902      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	74fb      	strb	r3, [r7, #19]
            break;
 80042bc:	e006      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ec      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042e8:	e008      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	74bb      	strb	r3, [r7, #18]
 80042ee:	e005      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042fc:	7c7b      	ldrb	r3, [r7, #17]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004302:	4ba6      	ldr	r3, [pc, #664]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	4aa5      	ldr	r2, [pc, #660]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800431a:	4ba0      	ldr	r3, [pc, #640]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f023 0203 	bic.w	r2, r3, #3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	499c      	ldr	r1, [pc, #624]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800433c:	4b97      	ldr	r3, [pc, #604]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f023 020c 	bic.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	4994      	ldr	r1, [pc, #592]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800435e:	4b8f      	ldr	r3, [pc, #572]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	498b      	ldr	r1, [pc, #556]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004380:	4b86      	ldr	r3, [pc, #536]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	4983      	ldr	r1, [pc, #524]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a2:	4b7e      	ldr	r3, [pc, #504]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	497a      	ldr	r1, [pc, #488]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c4:	4b75      	ldr	r3, [pc, #468]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	4972      	ldr	r1, [pc, #456]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043e6:	4b6d      	ldr	r3, [pc, #436]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4969      	ldr	r1, [pc, #420]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004408:	4b64      	ldr	r3, [pc, #400]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	4961      	ldr	r1, [pc, #388]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442a:	4b5c      	ldr	r3, [pc, #368]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	4958      	ldr	r1, [pc, #352]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800444c:	4b53      	ldr	r3, [pc, #332]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	4950      	ldr	r1, [pc, #320]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446a:	d105      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446c:	4b4b      	ldr	r3, [pc, #300]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a4a      	ldr	r2, [pc, #296]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004476:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004484:	4b45      	ldr	r3, [pc, #276]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	4942      	ldr	r1, [pc, #264]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a2:	d105      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a4:	4b3d      	ldr	r3, [pc, #244]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a3c      	ldr	r2, [pc, #240]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d015      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044bc:	4b37      	ldr	r3, [pc, #220]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	4934      	ldr	r1, [pc, #208]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044da:	d105      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044dc:	4b2f      	ldr	r3, [pc, #188]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a2e      	ldr	r2, [pc, #184]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d015      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044f4:	4b29      	ldr	r3, [pc, #164]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	4926      	ldr	r1, [pc, #152]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004512:	d105      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004514:	4b21      	ldr	r3, [pc, #132]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a20      	ldr	r2, [pc, #128]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800451e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d015      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	4918      	ldr	r1, [pc, #96]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454a:	d105      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800454c:	4b13      	ldr	r3, [pc, #76]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a12      	ldr	r2, [pc, #72]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004556:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d015      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004564:	4b0d      	ldr	r3, [pc, #52]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	490a      	ldr	r1, [pc, #40]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004582:	d105      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004590:	7cbb      	ldrb	r3, [r7, #18]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000

080045a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e049      	b.n	8004646 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc fe5e 	bl	8001288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 fde8 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d001      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e04a      	b.n	80046fe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a21      	ldr	r2, [pc, #132]	; (800470c <HAL_TIM_Base_Start_IT+0xbc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d018      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d013      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <HAL_TIM_Base_Start_IT+0xc0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00e      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_TIM_Base_Start_IT+0xc4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1a      	ldr	r2, [pc, #104]	; (8004718 <HAL_TIM_Base_Start_IT+0xc8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x6c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a19      	ldr	r2, [pc, #100]	; (800471c <HAL_TIM_Base_Start_IT+0xcc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d115      	bne.n	80046e8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_TIM_Base_Start_IT+0xd0>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d015      	beq.n	80046fa <HAL_TIM_Base_Start_IT+0xaa>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d4:	d011      	beq.n	80046fa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0201 	orr.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e6:	e008      	b.n	80046fa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e000      	b.n	80046fc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800
 8004718:	40013400 	.word	0x40013400
 800471c:	40014000 	.word	0x40014000
 8004720:	00010007 	.word	0x00010007

08004724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e049      	b.n	80047ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc fc94 	bl	8001078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f000 fd26 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_TIM_PWM_Start+0x24>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e03c      	b.n	8004872 <HAL_TIM_PWM_Start+0x9e>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d109      	bne.n	8004812 <HAL_TIM_PWM_Start+0x3e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e02f      	b.n	8004872 <HAL_TIM_PWM_Start+0x9e>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d109      	bne.n	800482c <HAL_TIM_PWM_Start+0x58>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e022      	b.n	8004872 <HAL_TIM_PWM_Start+0x9e>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b0c      	cmp	r3, #12
 8004830:	d109      	bne.n	8004846 <HAL_TIM_PWM_Start+0x72>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	e015      	b.n	8004872 <HAL_TIM_PWM_Start+0x9e>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b10      	cmp	r3, #16
 800484a:	d109      	bne.n	8004860 <HAL_TIM_PWM_Start+0x8c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e008      	b.n	8004872 <HAL_TIM_PWM_Start+0x9e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e097      	b.n	80049aa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Start+0xb6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004888:	e023      	b.n	80048d2 <HAL_TIM_PWM_Start+0xfe>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b04      	cmp	r3, #4
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Start+0xc6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004898:	e01b      	b.n	80048d2 <HAL_TIM_PWM_Start+0xfe>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d104      	bne.n	80048aa <HAL_TIM_PWM_Start+0xd6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a8:	e013      	b.n	80048d2 <HAL_TIM_PWM_Start+0xfe>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Start+0xe6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048b8:	e00b      	b.n	80048d2 <HAL_TIM_PWM_Start+0xfe>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d104      	bne.n	80048ca <HAL_TIM_PWM_Start+0xf6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c8:	e003      	b.n	80048d2 <HAL_TIM_PWM_Start+0xfe>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2201      	movs	r2, #1
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fff0 	bl	80058c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a33      	ldr	r2, [pc, #204]	; (80049b4 <HAL_TIM_PWM_Start+0x1e0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <HAL_TIM_PWM_Start+0x13e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a32      	ldr	r2, [pc, #200]	; (80049b8 <HAL_TIM_PWM_Start+0x1e4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_TIM_PWM_Start+0x13e>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a30      	ldr	r2, [pc, #192]	; (80049bc <HAL_TIM_PWM_Start+0x1e8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_TIM_PWM_Start+0x13e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <HAL_TIM_PWM_Start+0x1ec>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_TIM_PWM_Start+0x13e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2d      	ldr	r2, [pc, #180]	; (80049c4 <HAL_TIM_PWM_Start+0x1f0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d101      	bne.n	8004916 <HAL_TIM_PWM_Start+0x142>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_TIM_PWM_Start+0x144>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d007      	beq.n	800492c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800492a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a20      	ldr	r2, [pc, #128]	; (80049b4 <HAL_TIM_PWM_Start+0x1e0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d018      	beq.n	8004968 <HAL_TIM_PWM_Start+0x194>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d013      	beq.n	8004968 <HAL_TIM_PWM_Start+0x194>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <HAL_TIM_PWM_Start+0x1f4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00e      	beq.n	8004968 <HAL_TIM_PWM_Start+0x194>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1f      	ldr	r2, [pc, #124]	; (80049cc <HAL_TIM_PWM_Start+0x1f8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_TIM_PWM_Start+0x194>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <HAL_TIM_PWM_Start+0x1e4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_TIM_PWM_Start+0x194>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a16      	ldr	r2, [pc, #88]	; (80049bc <HAL_TIM_PWM_Start+0x1e8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d115      	bne.n	8004994 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	4b18      	ldr	r3, [pc, #96]	; (80049d0 <HAL_TIM_PWM_Start+0x1fc>)
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b06      	cmp	r3, #6
 8004978:	d015      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x1d2>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d011      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004992:	e008      	b.n	80049a6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e000      	b.n	80049a8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	00010007 	.word	0x00010007

080049d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e097      	b.n	8004b18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7fc fb83 	bl	8001108 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004a18:	f023 0307 	bic.w	r3, r3, #7
 8004a1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f000 fbc3 	bl	80051b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a56:	f023 0303 	bic.w	r3, r3, #3
 8004a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	4313      	orrs	r3, r2
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a74:	f023 030c 	bic.w	r3, r3, #12
 8004a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	4313      	orrs	r3, r2
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	011a      	lsls	r2, r3, #4
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	031b      	lsls	r3, r3, #12
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d110      	bne.n	8004b72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d102      	bne.n	8004b5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b56:	7b7b      	ldrb	r3, [r7, #13]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d001      	beq.n	8004b60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e069      	b.n	8004c34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b70:	e031      	b.n	8004bd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d110      	bne.n	8004b9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b78:	7bbb      	ldrb	r3, [r7, #14]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d102      	bne.n	8004b84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b7e:	7b3b      	ldrb	r3, [r7, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d001      	beq.n	8004b88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e055      	b.n	8004c34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b98:	e01d      	b.n	8004bd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d108      	bne.n	8004bb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ba0:	7bbb      	ldrb	r3, [r7, #14]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d105      	bne.n	8004bb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ba6:	7b7b      	ldrb	r3, [r7, #13]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d102      	bne.n	8004bb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bac:	7b3b      	ldrb	r3, [r7, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d001      	beq.n	8004bb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e03e      	b.n	8004c34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_TIM_Encoder_Start+0xc4>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d008      	beq.n	8004bf4 <HAL_TIM_Encoder_Start+0xd4>
 8004be2:	e00f      	b.n	8004c04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	2100      	movs	r1, #0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fe67 	bl	80058c0 <TIM_CCxChannelCmd>
      break;
 8004bf2:	e016      	b.n	8004c22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2104      	movs	r1, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fe5f 	bl	80058c0 <TIM_CCxChannelCmd>
      break;
 8004c02:	e00e      	b.n	8004c22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fe57 	bl	80058c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2201      	movs	r2, #1
 8004c18:	2104      	movs	r1, #4
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fe50 	bl	80058c0 <TIM_CCxChannelCmd>
      break;
 8004c20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d122      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0202 	mvn.w	r2, #2
 8004c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa7a 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa6c 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fa7d 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d122      	bne.n	8004cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d11b      	bne.n	8004cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0204 	mvn.w	r2, #4
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa50 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa42 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fa53 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d122      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d11b      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0208 	mvn.w	r2, #8
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2204      	movs	r2, #4
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa26 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa18 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fa29 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d122      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d11b      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0210 	mvn.w	r2, #16
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f9fc 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f9ee 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f9ff 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d10e      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d107      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0201 	mvn.w	r2, #1
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fb fb3a 	bl	8000434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 febc 	bl	8005b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfa:	d10e      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b80      	cmp	r3, #128	; 0x80
 8004e08:	d107      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 feaf 	bl	8005b78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d10e      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d107      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f9ad 	bl	80051a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d10e      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f06f 0220 	mvn.w	r2, #32
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fe6f 	bl	8005b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e80:	d10f      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e90:	d107      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fe75 	bl	8005b8c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eb0:	d10f      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ec0:	d107      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fe67 	bl	8005ba0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee0:	d10f      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d107      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fe59 	bl	8005bb4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f10:	d10f      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fe4b 	bl	8005bc8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e0ff      	b.n	800515a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b14      	cmp	r3, #20
 8004f66:	f200 80f0 	bhi.w	800514a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	0800514b 	.word	0x0800514b
 8004f78:	0800514b 	.word	0x0800514b
 8004f7c:	0800514b 	.word	0x0800514b
 8004f80:	08005005 	.word	0x08005005
 8004f84:	0800514b 	.word	0x0800514b
 8004f88:	0800514b 	.word	0x0800514b
 8004f8c:	0800514b 	.word	0x0800514b
 8004f90:	08005047 	.word	0x08005047
 8004f94:	0800514b 	.word	0x0800514b
 8004f98:	0800514b 	.word	0x0800514b
 8004f9c:	0800514b 	.word	0x0800514b
 8004fa0:	08005087 	.word	0x08005087
 8004fa4:	0800514b 	.word	0x0800514b
 8004fa8:	0800514b 	.word	0x0800514b
 8004fac:	0800514b 	.word	0x0800514b
 8004fb0:	080050c9 	.word	0x080050c9
 8004fb4:	0800514b 	.word	0x0800514b
 8004fb8:	0800514b 	.word	0x0800514b
 8004fbc:	0800514b 	.word	0x0800514b
 8004fc0:	08005109 	.word	0x08005109
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f982 	bl	80052d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0208 	orr.w	r2, r2, #8
 8004fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0204 	bic.w	r2, r2, #4
 8004fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6999      	ldr	r1, [r3, #24]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	619a      	str	r2, [r3, #24]
      break;
 8005002:	e0a5      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f9f2 	bl	80053f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800501e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6999      	ldr	r1, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	021a      	lsls	r2, r3, #8
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	619a      	str	r2, [r3, #24]
      break;
 8005044:	e084      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fa5b 	bl	8005508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0208 	orr.w	r2, r2, #8
 8005060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0204 	bic.w	r2, r2, #4
 8005070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69d9      	ldr	r1, [r3, #28]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	61da      	str	r2, [r3, #28]
      break;
 8005084:	e064      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fac3 	bl	8005618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69d9      	ldr	r1, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	021a      	lsls	r2, r3, #8
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	61da      	str	r2, [r3, #28]
      break;
 80050c6:	e043      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fb2c 	bl	800572c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0208 	orr.w	r2, r2, #8
 80050e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0204 	bic.w	r2, r2, #4
 80050f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005106:	e023      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fb70 	bl	80057f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005122:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005132:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005148:	e002      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
      break;
 800514e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop

08005164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a3c      	ldr	r2, [pc, #240]	; (80052b8 <TIM_Base_SetConfig+0x104>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00f      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a39      	ldr	r2, [pc, #228]	; (80052bc <TIM_Base_SetConfig+0x108>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a38      	ldr	r2, [pc, #224]	; (80052c0 <TIM_Base_SetConfig+0x10c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a37      	ldr	r2, [pc, #220]	; (80052c4 <TIM_Base_SetConfig+0x110>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d108      	bne.n	80051fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2d      	ldr	r2, [pc, #180]	; (80052b8 <TIM_Base_SetConfig+0x104>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01b      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d017      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2a      	ldr	r2, [pc, #168]	; (80052bc <TIM_Base_SetConfig+0x108>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a29      	ldr	r2, [pc, #164]	; (80052c0 <TIM_Base_SetConfig+0x10c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00f      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a28      	ldr	r2, [pc, #160]	; (80052c4 <TIM_Base_SetConfig+0x110>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00b      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a27      	ldr	r2, [pc, #156]	; (80052c8 <TIM_Base_SetConfig+0x114>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a26      	ldr	r2, [pc, #152]	; (80052cc <TIM_Base_SetConfig+0x118>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <TIM_Base_SetConfig+0x11c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a10      	ldr	r2, [pc, #64]	; (80052b8 <TIM_Base_SetConfig+0x104>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00f      	beq.n	800529c <TIM_Base_SetConfig+0xe8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a11      	ldr	r2, [pc, #68]	; (80052c4 <TIM_Base_SetConfig+0x110>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00b      	beq.n	800529c <TIM_Base_SetConfig+0xe8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a10      	ldr	r2, [pc, #64]	; (80052c8 <TIM_Base_SetConfig+0x114>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <TIM_Base_SetConfig+0xe8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a0f      	ldr	r2, [pc, #60]	; (80052cc <TIM_Base_SetConfig+0x118>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_Base_SetConfig+0xe8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <TIM_Base_SetConfig+0x11c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d103      	bne.n	80052a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	615a      	str	r2, [r3, #20]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40013400 	.word	0x40013400
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40014400 	.word	0x40014400
 80052d0:	40014800 	.word	0x40014800

080052d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 0302 	bic.w	r3, r3, #2
 8005320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <TIM_OC1_SetConfig+0x10c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00f      	beq.n	8005354 <TIM_OC1_SetConfig+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <TIM_OC1_SetConfig+0x110>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_OC1_SetConfig+0x80>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a2a      	ldr	r2, [pc, #168]	; (80053e8 <TIM_OC1_SetConfig+0x114>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_OC1_SetConfig+0x80>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a29      	ldr	r2, [pc, #164]	; (80053ec <TIM_OC1_SetConfig+0x118>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_OC1_SetConfig+0x80>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a28      	ldr	r2, [pc, #160]	; (80053f0 <TIM_OC1_SetConfig+0x11c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10c      	bne.n	800536e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0308 	bic.w	r3, r3, #8
 800535a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f023 0304 	bic.w	r3, r3, #4
 800536c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <TIM_OC1_SetConfig+0x10c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00f      	beq.n	8005396 <TIM_OC1_SetConfig+0xc2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <TIM_OC1_SetConfig+0x110>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_OC1_SetConfig+0xc2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <TIM_OC1_SetConfig+0x114>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <TIM_OC1_SetConfig+0xc2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a18      	ldr	r2, [pc, #96]	; (80053ec <TIM_OC1_SetConfig+0x118>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_OC1_SetConfig+0xc2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <TIM_OC1_SetConfig+0x11c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d111      	bne.n	80053ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	621a      	str	r2, [r3, #32]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40013400 	.word	0x40013400
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0210 	bic.w	r2, r3, #16
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0320 	bic.w	r3, r3, #32
 8005442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a28      	ldr	r2, [pc, #160]	; (80054f4 <TIM_OC2_SetConfig+0x100>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_OC2_SetConfig+0x6c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <TIM_OC2_SetConfig+0x104>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10d      	bne.n	800547c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a1d      	ldr	r2, [pc, #116]	; (80054f4 <TIM_OC2_SetConfig+0x100>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00f      	beq.n	80054a4 <TIM_OC2_SetConfig+0xb0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <TIM_OC2_SetConfig+0x104>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00b      	beq.n	80054a4 <TIM_OC2_SetConfig+0xb0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <TIM_OC2_SetConfig+0x108>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d007      	beq.n	80054a4 <TIM_OC2_SetConfig+0xb0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a1a      	ldr	r2, [pc, #104]	; (8005500 <TIM_OC2_SetConfig+0x10c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_OC2_SetConfig+0xb0>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a19      	ldr	r2, [pc, #100]	; (8005504 <TIM_OC2_SetConfig+0x110>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d113      	bne.n	80054cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40013400 	.word	0x40013400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800

08005508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0303 	bic.w	r3, r3, #3
 8005542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a27      	ldr	r2, [pc, #156]	; (8005604 <TIM_OC3_SetConfig+0xfc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_OC3_SetConfig+0x6a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a26      	ldr	r2, [pc, #152]	; (8005608 <TIM_OC3_SetConfig+0x100>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10d      	bne.n	800558e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800558c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a1c      	ldr	r2, [pc, #112]	; (8005604 <TIM_OC3_SetConfig+0xfc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00f      	beq.n	80055b6 <TIM_OC3_SetConfig+0xae>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a1b      	ldr	r2, [pc, #108]	; (8005608 <TIM_OC3_SetConfig+0x100>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00b      	beq.n	80055b6 <TIM_OC3_SetConfig+0xae>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1a      	ldr	r2, [pc, #104]	; (800560c <TIM_OC3_SetConfig+0x104>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d007      	beq.n	80055b6 <TIM_OC3_SetConfig+0xae>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a19      	ldr	r2, [pc, #100]	; (8005610 <TIM_OC3_SetConfig+0x108>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_OC3_SetConfig+0xae>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a18      	ldr	r2, [pc, #96]	; (8005614 <TIM_OC3_SetConfig+0x10c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d113      	bne.n	80055de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	621a      	str	r2, [r3, #32]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40013400 	.word	0x40013400
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800

08005618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a28      	ldr	r2, [pc, #160]	; (8005718 <TIM_OC4_SetConfig+0x100>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC4_SetConfig+0x6c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a27      	ldr	r2, [pc, #156]	; (800571c <TIM_OC4_SetConfig+0x104>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10d      	bne.n	80056a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800568a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800569e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <TIM_OC4_SetConfig+0x100>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00f      	beq.n	80056c8 <TIM_OC4_SetConfig+0xb0>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a1c      	ldr	r2, [pc, #112]	; (800571c <TIM_OC4_SetConfig+0x104>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_OC4_SetConfig+0xb0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <TIM_OC4_SetConfig+0x108>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_OC4_SetConfig+0xb0>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <TIM_OC4_SetConfig+0x10c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_OC4_SetConfig+0xb0>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a19      	ldr	r2, [pc, #100]	; (8005728 <TIM_OC4_SetConfig+0x110>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d113      	bne.n	80056f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	019b      	lsls	r3, r3, #6
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	019b      	lsls	r3, r3, #6
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40013400 	.word	0x40013400
 8005720:	40014000 	.word	0x40014000
 8005724:	40014400 	.word	0x40014400
 8005728:	40014800 	.word	0x40014800

0800572c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005770:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a17      	ldr	r2, [pc, #92]	; (80057e0 <TIM_OC5_SetConfig+0xb4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00f      	beq.n	80057a6 <TIM_OC5_SetConfig+0x7a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <TIM_OC5_SetConfig+0xb8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00b      	beq.n	80057a6 <TIM_OC5_SetConfig+0x7a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <TIM_OC5_SetConfig+0xbc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <TIM_OC5_SetConfig+0x7a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a14      	ldr	r2, [pc, #80]	; (80057ec <TIM_OC5_SetConfig+0xc0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_OC5_SetConfig+0x7a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <TIM_OC5_SetConfig+0xc4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d109      	bne.n	80057ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	621a      	str	r2, [r3, #32]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800583a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	051b      	lsls	r3, r3, #20
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a18      	ldr	r2, [pc, #96]	; (80058ac <TIM_OC6_SetConfig+0xb8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00f      	beq.n	8005870 <TIM_OC6_SetConfig+0x7c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a17      	ldr	r2, [pc, #92]	; (80058b0 <TIM_OC6_SetConfig+0xbc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_OC6_SetConfig+0x7c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a16      	ldr	r2, [pc, #88]	; (80058b4 <TIM_OC6_SetConfig+0xc0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_OC6_SetConfig+0x7c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <TIM_OC6_SetConfig+0xc4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_OC6_SetConfig+0x7c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a14      	ldr	r2, [pc, #80]	; (80058bc <TIM_OC6_SetConfig+0xc8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d109      	bne.n	8005884 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40012c00 	.word	0x40012c00
 80058b0:	40013400 	.word	0x40013400
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800

080058c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2201      	movs	r2, #1
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1a      	ldr	r2, [r3, #32]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	401a      	ands	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a1a      	ldr	r2, [r3, #32]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f003 031f 	and.w	r3, r3, #31
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	fa01 f303 	lsl.w	r3, r1, r3
 80058f8:	431a      	orrs	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
	...

0800590c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005920:	2302      	movs	r3, #2
 8005922:	e065      	b.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2c      	ldr	r2, [pc, #176]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2b      	ldr	r2, [pc, #172]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d108      	bne.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800595e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d018      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599a:	d013      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00e      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d10c      	bne.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40000800 	.word	0x40000800
 8005a0c:	40014000 	.word	0x40014000

08005a10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e087      	b.n	8005b3c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a25      	ldr	r2, [pc, #148]	; (8005b4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d126      	bne.n	8005b2a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	051b      	lsls	r3, r3, #20
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a0e      	ldr	r2, [pc, #56]	; (8005b48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a0d      	ldr	r2, [pc, #52]	; (8005b4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d106      	bne.n	8005b2a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40013400 	.word	0x40013400

08005b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005bf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c12:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005c16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	43db      	mvns	r3, r3
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	4013      	ands	r3, r2
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c40:	b084      	sub	sp, #16
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	f107 0014 	add.w	r0, r7, #20
 8005c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	b004      	add	sp, #16
 8005c80:	4770      	bx	lr
	...

08005c84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b09d      	sub	sp, #116	; 0x74
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	78db      	ldrb	r3, [r3, #3]
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d81f      	bhi.n	8005cf6 <USB_ActivateEndpoint+0x72>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <USB_ActivateEndpoint+0x38>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005ccd 	.word	0x08005ccd
 8005cc0:	08005ce9 	.word	0x08005ce9
 8005cc4:	08005cff 	.word	0x08005cff
 8005cc8:	08005cdb 	.word	0x08005cdb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ccc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cd8:	e012      	b.n	8005d00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005cda:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cde:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005ce2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005ce6:	e00b      	b.n	8005d00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ce8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cf0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cf4:	e004      	b.n	8005d00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005cfc:	e000      	b.n	8005d00 <USB_ActivateEndpoint+0x7c>
      break;
 8005cfe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	b21b      	sxth	r3, r3
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3a:	b21a      	sxth	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	b21b      	sxth	r3, r3
 8005d42:	4313      	orrs	r3, r2
 8005d44:	b21b      	sxth	r3, r3
 8005d46:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	441a      	add	r2, r3
 8005d54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	7b1b      	ldrb	r3, [r3, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f040 8149 	bne.w	8006008 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8084 	beq.w	8005e88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	4413      	add	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	00da      	lsls	r2, r3, #3
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	88db      	ldrh	r3, [r3, #6]
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	827b      	strh	r3, [r7, #18]
 8005dc2:	8a7b      	ldrh	r3, [r7, #18]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01b      	beq.n	8005e04 <USB_ActivateEndpoint+0x180>
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	823b      	strh	r3, [r7, #16]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	8a3b      	ldrh	r3, [r7, #16]
 8005df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	78db      	ldrb	r3, [r3, #3]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d020      	beq.n	8005e4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e22:	81bb      	strh	r3, [r7, #12]
 8005e24:	89bb      	ldrh	r3, [r7, #12]
 8005e26:	f083 0320 	eor.w	r3, r3, #32
 8005e2a:	81bb      	strh	r3, [r7, #12]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	441a      	add	r2, r3
 8005e36:	89bb      	ldrh	r3, [r7, #12]
 8005e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	8013      	strh	r3, [r2, #0]
 8005e4c:	e2a6      	b.n	800639c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e64:	81fb      	strh	r3, [r7, #14]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	89fb      	ldrh	r3, [r7, #14]
 8005e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	8013      	strh	r3, [r2, #0]
 8005e86:	e289      	b.n	800639c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	4413      	add	r3, r2
 8005e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	00da      	lsls	r2, r3, #3
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	88db      	ldrh	r3, [r3, #6]
 8005eb0:	085b      	lsrs	r3, r3, #1
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	4413      	add	r3, r2
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	00da      	lsls	r2, r3, #3
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	4413      	add	r3, r2
 8005eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee6:	d918      	bls.n	8005f1a <USB_ActivateEndpoint+0x296>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <USB_ActivateEndpoint+0x27e>
 8005efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005efe:	3b01      	subs	r3, #1
 8005f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	029b      	lsls	r3, r3, #10
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e029      	b.n	8005f6e <USB_ActivateEndpoint+0x2ea>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d112      	bne.n	8005f48 <USB_ActivateEndpoint+0x2c4>
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	801a      	strh	r2, [r3, #0]
 8005f46:	e012      	b.n	8005f6e <USB_ActivateEndpoint+0x2ea>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	085b      	lsrs	r3, r3, #1
 8005f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <USB_ActivateEndpoint+0x2de>
 8005f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f5e:	3301      	adds	r3, #1
 8005f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01b      	beq.n	8005fbe <USB_ActivateEndpoint+0x33a>
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9c:	843b      	strh	r3, [r7, #32]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	441a      	add	r2, r3
 8005fa8:	8c3b      	ldrh	r3, [r7, #32]
 8005faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd4:	83fb      	strh	r3, [r7, #30]
 8005fd6:	8bfb      	ldrh	r3, [r7, #30]
 8005fd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fdc:	83fb      	strh	r3, [r7, #30]
 8005fde:	8bfb      	ldrh	r3, [r7, #30]
 8005fe0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fe4:	83fb      	strh	r3, [r7, #30]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	8bfb      	ldrh	r3, [r7, #30]
 8005ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]
 8006006:	e1c9      	b.n	800639c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	78db      	ldrb	r3, [r3, #3]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d11e      	bne.n	800604e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	441a      	add	r2, r3
 8006034:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006040:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006048:	b29b      	uxth	r3, r3
 800604a:	8013      	strh	r3, [r2, #0]
 800604c:	e01d      	b.n	800608a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006064:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006086:	b29b      	uxth	r3, r3
 8006088:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006094:	b29b      	uxth	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800609a:	4413      	add	r3, r2
 800609c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	00da      	lsls	r2, r3, #3
 80060a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	891b      	ldrh	r3, [r3, #8]
 80060b2:	085b      	lsrs	r3, r3, #1
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	657b      	str	r3, [r7, #84]	; 0x54
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ce:	4413      	add	r3, r2
 80060d0:	657b      	str	r3, [r7, #84]	; 0x54
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	00da      	lsls	r2, r3, #3
 80060d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060da:	4413      	add	r3, r2
 80060dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060e0:	653b      	str	r3, [r7, #80]	; 0x50
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	895b      	ldrh	r3, [r3, #10]
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f040 8093 	bne.w	8006222 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800610c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01b      	beq.n	8006150 <USB_ActivateEndpoint+0x4cc>
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800613c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614c:	b29b      	uxth	r3, r3
 800614e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800615e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01b      	beq.n	80061a0 <USB_ActivateEndpoint+0x51c>
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800618c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006198:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800619c:	b29b      	uxth	r3, r3
 800619e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80061b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061be:	873b      	strh	r3, [r7, #56]	; 0x38
 80061c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800620c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621c:	b29b      	uxth	r3, r3
 800621e:	8013      	strh	r3, [r2, #0]
 8006220:	e0bc      	b.n	800639c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006232:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01d      	beq.n	800627a <USB_ActivateEndpoint+0x5f6>
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006254:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800628a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01d      	beq.n	80062d2 <USB_ActivateEndpoint+0x64e>
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	441a      	add	r2, r3
 80062ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80062be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	78db      	ldrb	r3, [r3, #3]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d024      	beq.n	8006324 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80062f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80062f8:	f083 0320 	eor.w	r3, r3, #32
 80062fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]
 8006322:	e01d      	b.n	8006360 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800633a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	441a      	add	r2, r3
 8006348:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800634c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635c:	b29b      	uxth	r3, r3
 800635e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	441a      	add	r2, r3
 8006384:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006398:	b29b      	uxth	r3, r3
 800639a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800639c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3774      	adds	r7, #116	; 0x74
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b08d      	sub	sp, #52	; 0x34
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	7b1b      	ldrb	r3, [r3, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f040 808e 	bne.w	80064dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d044      	beq.n	8006452 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	81bb      	strh	r3, [r7, #12]
 80063d6:	89bb      	ldrh	r3, [r7, #12]
 80063d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01b      	beq.n	8006418 <USB_DeactivateEndpoint+0x6c>
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f6:	817b      	strh	r3, [r7, #10]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	441a      	add	r2, r3
 8006402:	897b      	ldrh	r3, [r7, #10]
 8006404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006414:	b29b      	uxth	r3, r3
 8006416:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	b29b      	uxth	r3, r3
 8006426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642e:	813b      	strh	r3, [r7, #8]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	441a      	add	r2, r3
 800643a:	893b      	ldrh	r3, [r7, #8]
 800643c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644c:	b29b      	uxth	r3, r3
 800644e:	8013      	strh	r3, [r2, #0]
 8006450:	e192      	b.n	8006778 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	827b      	strh	r3, [r7, #18]
 8006460:	8a7b      	ldrh	r3, [r7, #18]
 8006462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01b      	beq.n	80064a2 <USB_DeactivateEndpoint+0xf6>
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006480:	823b      	strh	r3, [r7, #16]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	8a3b      	ldrh	r3, [r7, #16]
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b8:	81fb      	strh	r3, [r7, #14]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	441a      	add	r2, r3
 80064c4:	89fb      	ldrh	r3, [r7, #14]
 80064c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	8013      	strh	r3, [r2, #0]
 80064da:	e14d      	b.n	8006778 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	785b      	ldrb	r3, [r3, #1]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 80a5 	bne.w	8006630 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	843b      	strh	r3, [r7, #32]
 80064f4:	8c3b      	ldrh	r3, [r7, #32]
 80064f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01b      	beq.n	8006536 <USB_DeactivateEndpoint+0x18a>
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29b      	uxth	r3, r3
 800650c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006514:	83fb      	strh	r3, [r7, #30]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	441a      	add	r2, r3
 8006520:	8bfb      	ldrh	r3, [r7, #30]
 8006522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800652e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006532:	b29b      	uxth	r3, r3
 8006534:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	83bb      	strh	r3, [r7, #28]
 8006544:	8bbb      	ldrh	r3, [r7, #28]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01b      	beq.n	8006586 <USB_DeactivateEndpoint+0x1da>
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006564:	837b      	strh	r3, [r7, #26]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	441a      	add	r2, r3
 8006570:	8b7b      	ldrh	r3, [r7, #26]
 8006572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006582:	b29b      	uxth	r3, r3
 8006584:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659c:	833b      	strh	r3, [r7, #24]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	8b3b      	ldrh	r3, [r7, #24]
 80065aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d4:	82fb      	strh	r3, [r7, #22]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	441a      	add	r2, r3
 80065e0:	8afb      	ldrh	r3, [r7, #22]
 80065e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660c:	82bb      	strh	r3, [r7, #20]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	441a      	add	r2, r3
 8006618:	8abb      	ldrh	r3, [r7, #20]
 800661a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800661e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662a:	b29b      	uxth	r3, r3
 800662c:	8013      	strh	r3, [r2, #0]
 800662e:	e0a3      	b.n	8006778 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800663e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01b      	beq.n	8006680 <USB_DeactivateEndpoint+0x2d4>
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	b29b      	uxth	r3, r3
 8006656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	441a      	add	r2, r3
 800666a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800666c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667c:	b29b      	uxth	r3, r3
 800667e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800668e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01b      	beq.n	80066d0 <USB_DeactivateEndpoint+0x324>
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	441a      	add	r2, r3
 80066ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	441a      	add	r2, r3
 80066f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006704:	b29b      	uxth	r3, r3
 8006706:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800672c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673c:	b29b      	uxth	r3, r3
 800673e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006756:	847b      	strh	r3, [r7, #34]	; 0x22
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	441a      	add	r2, r3
 8006762:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006774:	b29b      	uxth	r3, r3
 8006776:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3734      	adds	r7, #52	; 0x34
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b0c2      	sub	sp, #264	; 0x108
 800678a:	af00      	add	r7, sp, #0
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006794:	6018      	str	r0, [r3, #0]
 8006796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	785b      	ldrb	r3, [r3, #1]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	f040 867b 	bne.w	80074a8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d908      	bls.n	80067e0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80067ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067de:	e007      	b.n	80067f0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80067e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80067f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	7b1b      	ldrb	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d13a      	bne.n	8006876 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6959      	ldr	r1, [r3, #20]
 800680c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	88da      	ldrh	r2, [r3, #6]
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681c:	b29b      	uxth	r3, r3
 800681e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006822:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006826:	6800      	ldr	r0, [r0, #0]
 8006828:	f001 fc1d 	bl	8008066 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800682c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	613b      	str	r3, [r7, #16]
 8006838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006846:	b29b      	uxth	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	4413      	add	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	00da      	lsls	r2, r3, #3
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	4413      	add	r3, r2
 8006862:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	f000 bde3 	b.w	800743c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	78db      	ldrb	r3, [r3, #3]
 8006882:	2b02      	cmp	r3, #2
 8006884:	f040 843a 	bne.w	80070fc <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	f240 83b7 	bls.w	8007014 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80068d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fe:	b29b      	uxth	r3, r3
 8006900:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6a1a      	ldr	r2, [r3, #32]
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 81b3 	beq.w	8006cae <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	633b      	str	r3, [r7, #48]	; 0x30
 8006954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d16d      	bne.n	8006a40 <USB_EPStartXfer+0x2ba>
 8006964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006974:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800697e:	b29b      	uxth	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	4413      	add	r3, r2
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
 8006988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	00da      	lsls	r2, r3, #3
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	4413      	add	r3, r2
 800699a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a4:	2b3e      	cmp	r3, #62	; 0x3e
 80069a6:	d91c      	bls.n	80069e2 <USB_EPStartXfer+0x25c>
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <USB_EPStartXfer+0x242>
 80069be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069c2:	3b01      	subs	r3, #1
 80069c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	029b      	lsls	r3, r3, #10
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069da:	b29a      	uxth	r2, r3
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	e053      	b.n	8006a8a <USB_EPStartXfer+0x304>
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d112      	bne.n	8006a10 <USB_EPStartXfer+0x28a>
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	e03c      	b.n	8006a8a <USB_EPStartXfer+0x304>
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a14:	085b      	lsrs	r3, r3, #1
 8006a16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d004      	beq.n	8006a30 <USB_EPStartXfer+0x2aa>
 8006a26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	029b      	lsls	r3, r3, #10
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	e024      	b.n	8006a8a <USB_EPStartXfer+0x304>
 8006a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d11c      	bne.n	8006a8a <USB_EPStartXfer+0x304>
 8006a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	4413      	add	r3, r2
 8006a66:	633b      	str	r3, [r7, #48]	; 0x30
 8006a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	00da      	lsls	r2, r3, #3
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	895b      	ldrh	r3, [r3, #10]
 8006a96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6959      	ldr	r1, [r3, #20]
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ab0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ab4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ab8:	6800      	ldr	r0, [r0, #0]
 8006aba:	f001 fad4 	bl	8008066 <USB_WritePMA>
            ep->xfer_buff += len;
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695a      	ldr	r2, [r3, #20]
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ace:	441a      	add	r2, r3
 8006ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d90f      	bls.n	8006b18 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b08:	1ad2      	subs	r2, r2, r3
 8006b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	621a      	str	r2, [r3, #32]
 8006b16:	e00e      	b.n	8006b36 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2200      	movs	r2, #0
 8006b34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d16d      	bne.n	8006c22 <USB_EPStartXfer+0x49c>
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	4413      	add	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	00da      	lsls	r2, r3, #3
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b86:	2b3e      	cmp	r3, #62	; 0x3e
 8006b88:	d91c      	bls.n	8006bc4 <USB_EPStartXfer+0x43e>
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <USB_EPStartXfer+0x424>
 8006ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	029b      	lsls	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	801a      	strh	r2, [r3, #0]
 8006bc2:	e059      	b.n	8006c78 <USB_EPStartXfer+0x4f2>
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d112      	bne.n	8006bf2 <USB_EPStartXfer+0x46c>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	e042      	b.n	8006c78 <USB_EPStartXfer+0x4f2>
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <USB_EPStartXfer+0x48c>
 8006c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	029b      	lsls	r3, r3, #10
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	e02a      	b.n	8006c78 <USB_EPStartXfer+0x4f2>
 8006c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d122      	bne.n	8006c78 <USB_EPStartXfer+0x4f2>
 8006c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	623b      	str	r3, [r7, #32]
 8006c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	4413      	add	r3, r2
 8006c54:	623b      	str	r3, [r7, #32]
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	00da      	lsls	r2, r3, #3
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	4413      	add	r3, r2
 8006c68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	891b      	ldrh	r3, [r3, #8]
 8006c84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6959      	ldr	r1, [r3, #20]
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ca2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ca6:	6800      	ldr	r0, [r0, #0]
 8006ca8:	f001 f9dd 	bl	8008066 <USB_WritePMA>
 8006cac:	e3c6      	b.n	800743c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d16d      	bne.n	8006d9a <USB_EPStartXfer+0x614>
 8006cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cde:	4413      	add	r3, r2
 8006ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	00da      	lsls	r2, r3, #3
 8006cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfe:	2b3e      	cmp	r3, #62	; 0x3e
 8006d00:	d91c      	bls.n	8006d3c <USB_EPStartXfer+0x5b6>
 8006d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <USB_EPStartXfer+0x59c>
 8006d18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	029b      	lsls	r3, r3, #10
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d38:	801a      	strh	r2, [r3, #0]
 8006d3a:	e059      	b.n	8006df0 <USB_EPStartXfer+0x66a>
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d112      	bne.n	8006d6a <USB_EPStartXfer+0x5e4>
 8006d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d66:	801a      	strh	r2, [r3, #0]
 8006d68:	e042      	b.n	8006df0 <USB_EPStartXfer+0x66a>
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <USB_EPStartXfer+0x604>
 8006d80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d84:	3301      	adds	r3, #1
 8006d86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	029b      	lsls	r3, r3, #10
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e02a      	b.n	8006df0 <USB_EPStartXfer+0x66a>
 8006d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d122      	bne.n	8006df0 <USB_EPStartXfer+0x66a>
 8006daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	653b      	str	r3, [r7, #80]	; 0x50
 8006db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dca:	4413      	add	r3, r2
 8006dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	00da      	lsls	r2, r3, #3
 8006ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	891b      	ldrh	r3, [r3, #8]
 8006dfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6959      	ldr	r1, [r3, #20]
 8006e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	f001 f921 	bl	8008066 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695a      	ldr	r2, [r3, #20]
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e34:	441a      	add	r2, r3
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d90f      	bls.n	8006e7e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6a1a      	ldr	r2, [r3, #32]
 8006e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	621a      	str	r2, [r3, #32]
 8006e7c:	e00e      	b.n	8006e9c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d16d      	bne.n	8006f94 <USB_EPStartXfer+0x80e>
 8006eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	4413      	add	r3, r2
 8006eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	00da      	lsls	r2, r3, #3
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	4413      	add	r3, r2
 8006eee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8006efa:	d91c      	bls.n	8006f36 <USB_EPStartXfer+0x7b0>
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d104      	bne.n	8006f1c <USB_EPStartXfer+0x796>
 8006f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f16:	3b01      	subs	r3, #1
 8006f18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	029b      	lsls	r3, r3, #10
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	e053      	b.n	8006fde <USB_EPStartXfer+0x858>
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d112      	bne.n	8006f64 <USB_EPStartXfer+0x7de>
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f60:	801a      	strh	r2, [r3, #0]
 8006f62:	e03c      	b.n	8006fde <USB_EPStartXfer+0x858>
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <USB_EPStartXfer+0x7fe>
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7e:	3301      	adds	r3, #1
 8006f80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	029b      	lsls	r3, r3, #10
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	e024      	b.n	8006fde <USB_EPStartXfer+0x858>
 8006f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d11c      	bne.n	8006fde <USB_EPStartXfer+0x858>
 8006fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb8:	4413      	add	r3, r2
 8006fba:	643b      	str	r3, [r7, #64]	; 0x40
 8006fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	00da      	lsls	r2, r3, #3
 8006fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fcc:	4413      	add	r3, r2
 8006fce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	895b      	ldrh	r3, [r3, #10]
 8006fea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6959      	ldr	r1, [r3, #20]
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007004:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007008:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800700c:	6800      	ldr	r0, [r0, #0]
 800700e:	f001 f82a 	bl	8008066 <USB_WritePMA>
 8007012:	e213      	b.n	800743c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800708c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709a:	b29b      	uxth	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a0:	4413      	add	r3, r2
 80070a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	00da      	lsls	r2, r3, #3
 80070b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b4:	4413      	add	r3, r2
 80070b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	891b      	ldrh	r3, [r3, #8]
 80070d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6959      	ldr	r1, [r3, #20]
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070f4:	6800      	ldr	r0, [r0, #0]
 80070f6:	f000 ffb6 	bl	8008066 <USB_WritePMA>
 80070fa:	e19f      	b.n	800743c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80070fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6a1a      	ldr	r2, [r3, #32]
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710c:	1ad2      	subs	r2, r2, r3
 800710e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800711a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 80bc 	beq.w	80072ba <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	673b      	str	r3, [r7, #112]	; 0x70
 800714e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d16d      	bne.n	800723a <USB_EPStartXfer+0xab4>
 800715e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	66bb      	str	r3, [r7, #104]	; 0x68
 800716a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007178:	b29b      	uxth	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800717e:	4413      	add	r3, r2
 8007180:	66bb      	str	r3, [r7, #104]	; 0x68
 8007182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	00da      	lsls	r2, r3, #3
 8007190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007192:	4413      	add	r3, r2
 8007194:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007198:	667b      	str	r3, [r7, #100]	; 0x64
 800719a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719e:	2b3e      	cmp	r3, #62	; 0x3e
 80071a0:	d91c      	bls.n	80071dc <USB_EPStartXfer+0xa56>
 80071a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d104      	bne.n	80071c2 <USB_EPStartXfer+0xa3c>
 80071b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071bc:	3b01      	subs	r3, #1
 80071be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	029b      	lsls	r3, r3, #10
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	e053      	b.n	8007284 <USB_EPStartXfer+0xafe>
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d112      	bne.n	800720a <USB_EPStartXfer+0xa84>
 80071e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007202:	b29a      	uxth	r2, r3
 8007204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e03c      	b.n	8007284 <USB_EPStartXfer+0xafe>
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <USB_EPStartXfer+0xaa4>
 8007220:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007224:	3301      	adds	r3, #1
 8007226:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800722a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800722e:	b29b      	uxth	r3, r3
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	b29a      	uxth	r2, r3
 8007234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	e024      	b.n	8007284 <USB_EPStartXfer+0xafe>
 800723a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	785b      	ldrb	r3, [r3, #1]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d11c      	bne.n	8007284 <USB_EPStartXfer+0xafe>
 800724a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007258:	b29b      	uxth	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800725e:	4413      	add	r3, r2
 8007260:	673b      	str	r3, [r7, #112]	; 0x70
 8007262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	00da      	lsls	r2, r3, #3
 8007270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007272:	4413      	add	r3, r2
 8007274:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007278:	66fb      	str	r3, [r7, #108]	; 0x6c
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727e:	b29a      	uxth	r2, r3
 8007280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007282:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	895b      	ldrh	r3, [r3, #10]
 8007290:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6959      	ldr	r1, [r3, #20]
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072b2:	6800      	ldr	r0, [r0, #0]
 80072b4:	f000 fed7 	bl	8008066 <USB_WritePMA>
 80072b8:	e0c0      	b.n	800743c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d16d      	bne.n	80073a6 <USB_EPStartXfer+0xc20>
 80072ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072ea:	4413      	add	r3, r2
 80072ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	00da      	lsls	r2, r3, #3
 80072fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072fe:	4413      	add	r3, r2
 8007300:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007304:	67bb      	str	r3, [r7, #120]	; 0x78
 8007306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730a:	2b3e      	cmp	r3, #62	; 0x3e
 800730c:	d91c      	bls.n	8007348 <USB_EPStartXfer+0xbc2>
 800730e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <USB_EPStartXfer+0xba8>
 8007324:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007328:	3b01      	subs	r3, #1
 800732a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800732e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007332:	b29b      	uxth	r3, r3
 8007334:	029b      	lsls	r3, r3, #10
 8007336:	b29b      	uxth	r3, r3
 8007338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007340:	b29a      	uxth	r2, r3
 8007342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e05f      	b.n	8007408 <USB_EPStartXfer+0xc82>
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734c:	2b00      	cmp	r3, #0
 800734e:	d112      	bne.n	8007376 <USB_EPStartXfer+0xbf0>
 8007350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800735a:	b29a      	uxth	r2, r3
 800735c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800735e:	801a      	strh	r2, [r3, #0]
 8007360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736e:	b29a      	uxth	r2, r3
 8007370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007372:	801a      	strh	r2, [r3, #0]
 8007374:	e048      	b.n	8007408 <USB_EPStartXfer+0xc82>
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d004      	beq.n	8007396 <USB_EPStartXfer+0xc10>
 800738c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007390:	3301      	adds	r3, #1
 8007392:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007396:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800739a:	b29b      	uxth	r3, r3
 800739c:	029b      	lsls	r3, r3, #10
 800739e:	b29a      	uxth	r2, r3
 80073a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a2:	801a      	strh	r2, [r3, #0]
 80073a4:	e030      	b.n	8007408 <USB_EPStartXfer+0xc82>
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	785b      	ldrb	r3, [r3, #1]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d128      	bne.n	8007408 <USB_EPStartXfer+0xc82>
 80073b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073da:	4413      	add	r3, r2
 80073dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	00da      	lsls	r2, r3, #3
 80073ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073f2:	4413      	add	r3, r2
 80073f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007400:	b29a      	uxth	r2, r3
 8007402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007406:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	891b      	ldrh	r3, [r3, #8]
 8007414:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6959      	ldr	r1, [r3, #20]
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007428:	b29b      	uxth	r3, r3
 800742a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800742e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007432:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007436:	6800      	ldr	r0, [r0, #0]
 8007438:	f000 fe15 	bl	8008066 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007462:	817b      	strh	r3, [r7, #10]
 8007464:	897b      	ldrh	r3, [r7, #10]
 8007466:	f083 0310 	eor.w	r3, r3, #16
 800746a:	817b      	strh	r3, [r7, #10]
 800746c:	897b      	ldrh	r3, [r7, #10]
 800746e:	f083 0320 	eor.w	r3, r3, #32
 8007472:	817b      	strh	r3, [r7, #10]
 8007474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	441a      	add	r2, r3
 800748e:	897b      	ldrh	r3, [r7, #10]
 8007490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	8013      	strh	r3, [r2, #0]
 80074a4:	f000 bc9f 	b.w	8007de6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80074a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	7b1b      	ldrb	r3, [r3, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f040 80ae 	bne.w	8007616 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80074ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d917      	bls.n	8007506 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	619a      	str	r2, [r3, #24]
 8007504:	e00e      	b.n	8007524 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2200      	movs	r2, #0
 8007522:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007540:	b29b      	uxth	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007548:	4413      	add	r3, r2
 800754a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800754e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	00da      	lsls	r2, r3, #3
 800755c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007560:	4413      	add	r3, r2
 8007562:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800756a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756e:	2b3e      	cmp	r3, #62	; 0x3e
 8007570:	d91d      	bls.n	80075ae <USB_EPStartXfer+0xe28>
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800757c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007580:	f003 031f 	and.w	r3, r3, #31
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <USB_EPStartXfer+0xe0c>
 8007588:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800758c:	3b01      	subs	r3, #1
 800758e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007596:	b29b      	uxth	r3, r3
 8007598:	029b      	lsls	r3, r3, #10
 800759a:	b29b      	uxth	r3, r3
 800759c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	e3e1      	b.n	8007d72 <USB_EPStartXfer+0x15ec>
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d116      	bne.n	80075e4 <USB_EPStartXfer+0xe5e>
 80075b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075da:	b29a      	uxth	r2, r3
 80075dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e3c6      	b.n	8007d72 <USB_EPStartXfer+0x15ec>
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d004      	beq.n	8007604 <USB_EPStartXfer+0xe7e>
 80075fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075fe:	3301      	adds	r3, #1
 8007600:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007604:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007608:	b29b      	uxth	r3, r3
 800760a:	029b      	lsls	r3, r3, #10
 800760c:	b29a      	uxth	r2, r3
 800760e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007612:	801a      	strh	r2, [r3, #0]
 8007614:	e3ad      	b.n	8007d72 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	78db      	ldrb	r3, [r3, #3]
 8007622:	2b02      	cmp	r3, #2
 8007624:	f040 8200 	bne.w	8007a28 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f040 8091 	bne.w	800775c <USB_EPStartXfer+0xfd6>
 800763a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007656:	b29b      	uxth	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800765e:	4413      	add	r3, r2
 8007660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	00da      	lsls	r2, r3, #3
 8007672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007676:	4413      	add	r3, r2
 8007678:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800767c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	2b3e      	cmp	r3, #62	; 0x3e
 800768e:	d925      	bls.n	80076dc <USB_EPStartXfer+0xf56>
 8007690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 031f 	and.w	r3, r3, #31
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d104      	bne.n	80076c0 <USB_EPStartXfer+0xf3a>
 80076b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ba:	3b01      	subs	r3, #1
 80076bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	029b      	lsls	r3, r3, #10
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	e074      	b.n	80077c6 <USB_EPStartXfer+0x1040>
 80076dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d116      	bne.n	800771a <USB_EPStartXfer+0xf94>
 80076ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076fe:	801a      	strh	r2, [r3, #0]
 8007700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	b29b      	uxth	r3, r3
 8007708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007710:	b29a      	uxth	r2, r3
 8007712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	e055      	b.n	80077c6 <USB_EPStartXfer+0x1040>
 800771a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	085b      	lsrs	r3, r3, #1
 8007728:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d004      	beq.n	800774a <USB_EPStartXfer+0xfc4>
 8007740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007744:	3301      	adds	r3, #1
 8007746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800774a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774e:	b29b      	uxth	r3, r3
 8007750:	029b      	lsls	r3, r3, #10
 8007752:	b29a      	uxth	r2, r3
 8007754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	e034      	b.n	80077c6 <USB_EPStartXfer+0x1040>
 800775c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d12c      	bne.n	80077c6 <USB_EPStartXfer+0x1040>
 800776c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007770:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800777a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007788:	b29b      	uxth	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007790:	4413      	add	r3, r2
 8007792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	00da      	lsls	r2, r3, #3
 80077a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077a8:	4413      	add	r3, r2
 80077aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	b29a      	uxth	r2, r3
 80077c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077c4:	801a      	strh	r2, [r3, #0]
 80077c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f040 8091 	bne.w	8007908 <USB_EPStartXfer+0x1182>
 80077e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007802:	b29b      	uxth	r3, r3
 8007804:	461a      	mov	r2, r3
 8007806:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800780a:	4413      	add	r3, r2
 800780c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	00da      	lsls	r2, r3, #3
 800781e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007822:	4413      	add	r3, r2
 8007824:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800782c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	2b3e      	cmp	r3, #62	; 0x3e
 800783a:	d925      	bls.n	8007888 <USB_EPStartXfer+0x1102>
 800783c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <USB_EPStartXfer+0x10e6>
 8007862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007866:	3b01      	subs	r3, #1
 8007868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800786c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007870:	b29b      	uxth	r3, r3
 8007872:	029b      	lsls	r3, r3, #10
 8007874:	b29b      	uxth	r3, r3
 8007876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800787a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800787e:	b29a      	uxth	r2, r3
 8007880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	e06d      	b.n	8007964 <USB_EPStartXfer+0x11de>
 8007888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d116      	bne.n	80078c6 <USB_EPStartXfer+0x1140>
 8007898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078bc:	b29a      	uxth	r2, r3
 80078be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078c2:	801a      	strh	r2, [r3, #0]
 80078c4:	e04e      	b.n	8007964 <USB_EPStartXfer+0x11de>
 80078c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d004      	beq.n	80078f6 <USB_EPStartXfer+0x1170>
 80078ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f0:	3301      	adds	r3, #1
 80078f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	b29a      	uxth	r2, r3
 8007900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	e02d      	b.n	8007964 <USB_EPStartXfer+0x11de>
 8007908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	785b      	ldrb	r3, [r3, #1]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d125      	bne.n	8007964 <USB_EPStartXfer+0x11de>
 8007918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007926:	b29b      	uxth	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800792e:	4413      	add	r3, r2
 8007930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	00da      	lsls	r2, r3, #3
 8007942:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007946:	4413      	add	r3, r2
 8007948:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800794c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	b29a      	uxth	r2, r3
 800795e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007962:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 81fe 	beq.w	8007d72 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007996:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800799a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d005      	beq.n	80079ae <USB_EPStartXfer+0x1228>
 80079a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80079a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10d      	bne.n	80079ca <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80079b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f040 81db 	bne.w	8007d72 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80079c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f040 81d4 	bne.w	8007d72 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80079ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80079f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	441a      	add	r2, r3
 8007a0e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	8013      	strh	r3, [r2, #0]
 8007a26:	e1a4      	b.n	8007d72 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	78db      	ldrb	r3, [r3, #3]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	f040 819a 	bne.w	8007d6e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d917      	bls.n	8007a86 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a76:	1ad2      	subs	r2, r2, r3
 8007a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	619a      	str	r2, [r3, #24]
 8007a84:	e00e      	b.n	8007aa4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d178      	bne.n	8007ba6 <USB_EPStartXfer+0x1420>
 8007ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ad8:	4413      	add	r3, r2
 8007ada:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	00da      	lsls	r2, r3, #3
 8007aec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007af0:	4413      	add	r3, r2
 8007af2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007afe:	2b3e      	cmp	r3, #62	; 0x3e
 8007b00:	d91d      	bls.n	8007b3e <USB_EPStartXfer+0x13b8>
 8007b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b10:	f003 031f 	and.w	r3, r3, #31
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d104      	bne.n	8007b22 <USB_EPStartXfer+0x139c>
 8007b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	029b      	lsls	r3, r3, #10
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b3a:	801a      	strh	r2, [r3, #0]
 8007b3c:	e064      	b.n	8007c08 <USB_EPStartXfer+0x1482>
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d116      	bne.n	8007b74 <USB_EPStartXfer+0x13ee>
 8007b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	e049      	b.n	8007c08 <USB_EPStartXfer+0x1482>
 8007b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b78:	085b      	lsrs	r3, r3, #1
 8007b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d004      	beq.n	8007b94 <USB_EPStartXfer+0x140e>
 8007b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b8e:	3301      	adds	r3, #1
 8007b90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	029b      	lsls	r3, r3, #10
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	e030      	b.n	8007c08 <USB_EPStartXfer+0x1482>
 8007ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	785b      	ldrb	r3, [r3, #1]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d128      	bne.n	8007c08 <USB_EPStartXfer+0x1482>
 8007bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bda:	4413      	add	r3, r2
 8007bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	00da      	lsls	r2, r3, #3
 8007bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d178      	bne.n	8007d18 <USB_EPStartXfer+0x1592>
 8007c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	00da      	lsls	r2, r3, #3
 8007c5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c62:	4413      	add	r3, r2
 8007c64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	2b3e      	cmp	r3, #62	; 0x3e
 8007c72:	d91d      	bls.n	8007cb0 <USB_EPStartXfer+0x152a>
 8007c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c82:	f003 031f 	and.w	r3, r3, #31
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d104      	bne.n	8007c94 <USB_EPStartXfer+0x150e>
 8007c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	029b      	lsls	r3, r3, #10
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cac:	801a      	strh	r2, [r3, #0]
 8007cae:	e060      	b.n	8007d72 <USB_EPStartXfer+0x15ec>
 8007cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d116      	bne.n	8007ce6 <USB_EPStartXfer+0x1560>
 8007cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	e045      	b.n	8007d72 <USB_EPStartXfer+0x15ec>
 8007ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cea:	085b      	lsrs	r3, r3, #1
 8007cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <USB_EPStartXfer+0x1580>
 8007cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d00:	3301      	adds	r3, #1
 8007d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	029b      	lsls	r3, r3, #10
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e02c      	b.n	8007d72 <USB_EPStartXfer+0x15ec>
 8007d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d124      	bne.n	8007d72 <USB_EPStartXfer+0x15ec>
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d3e:	4413      	add	r3, r2
 8007d40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	00da      	lsls	r2, r3, #3
 8007d52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d56:	4413      	add	r3, r2
 8007d58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d6a:	801a      	strh	r2, [r3, #0]
 8007d6c:	e001      	b.n	8007d72 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e03a      	b.n	8007de8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d98:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007d9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007da0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007da4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007da8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007dac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007db0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	441a      	add	r2, r3
 8007dce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	785b      	ldrb	r3, [r3, #1]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d020      	beq.n	8007e46 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e1a:	81bb      	strh	r3, [r7, #12]
 8007e1c:	89bb      	ldrh	r3, [r7, #12]
 8007e1e:	f083 0310 	eor.w	r3, r3, #16
 8007e22:	81bb      	strh	r3, [r7, #12]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	441a      	add	r2, r3
 8007e2e:	89bb      	ldrh	r3, [r7, #12]
 8007e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	8013      	strh	r3, [r2, #0]
 8007e44:	e01f      	b.n	8007e86 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5c:	81fb      	strh	r3, [r7, #14]
 8007e5e:	89fb      	ldrh	r3, [r7, #14]
 8007e60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e64:	81fb      	strh	r3, [r7, #14]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	441a      	add	r2, r3
 8007e70:	89fb      	ldrh	r3, [r7, #14]
 8007e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	7b1b      	ldrb	r3, [r3, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f040 809d 	bne.w	8007fe2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d04c      	beq.n	8007f4a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	823b      	strh	r3, [r7, #16]
 8007ebe:	8a3b      	ldrh	r3, [r7, #16]
 8007ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01b      	beq.n	8007f00 <USB_EPClearStall+0x6c>
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ede:	81fb      	strh	r3, [r7, #14]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	441a      	add	r2, r3
 8007eea:	89fb      	ldrh	r3, [r7, #14]
 8007eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	78db      	ldrb	r3, [r3, #3]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d06c      	beq.n	8007fe2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f1e:	81bb      	strh	r3, [r7, #12]
 8007f20:	89bb      	ldrh	r3, [r7, #12]
 8007f22:	f083 0320 	eor.w	r3, r3, #32
 8007f26:	81bb      	strh	r3, [r7, #12]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	441a      	add	r2, r3
 8007f32:	89bb      	ldrh	r3, [r7, #12]
 8007f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8013      	strh	r3, [r2, #0]
 8007f48:	e04b      	b.n	8007fe2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	82fb      	strh	r3, [r7, #22]
 8007f58:	8afb      	ldrh	r3, [r7, #22]
 8007f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01b      	beq.n	8007f9a <USB_EPClearStall+0x106>
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f78:	82bb      	strh	r3, [r7, #20]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	441a      	add	r2, r3
 8007f84:	8abb      	ldrh	r3, [r7, #20]
 8007f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb0:	827b      	strh	r3, [r7, #18]
 8007fb2:	8a7b      	ldrh	r3, [r7, #18]
 8007fb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fb8:	827b      	strh	r3, [r7, #18]
 8007fba:	8a7b      	ldrh	r3, [r7, #18]
 8007fbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fc0:	827b      	strh	r3, [r7, #18]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	8a7b      	ldrh	r3, [r7, #18]
 8007fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2280      	movs	r2, #128	; 0x80
 8008006:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008026:	b29b      	uxth	r3, r3
 8008028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800802c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008046:	b480      	push	{r7}
 8008048:	b085      	sub	sp, #20
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008054:	b29b      	uxth	r3, r3
 8008056:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008058:	68fb      	ldr	r3, [r7, #12]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008066:	b480      	push	{r7}
 8008068:	b08d      	sub	sp, #52	; 0x34
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	4611      	mov	r1, r2
 8008072:	461a      	mov	r2, r3
 8008074:	460b      	mov	r3, r1
 8008076:	80fb      	strh	r3, [r7, #6]
 8008078:	4613      	mov	r3, r2
 800807a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800807c:	88bb      	ldrh	r3, [r7, #4]
 800807e:	3301      	adds	r3, #1
 8008080:	085b      	lsrs	r3, r3, #1
 8008082:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800808c:	88fa      	ldrh	r2, [r7, #6]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008096:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800809c:	e01b      	b.n	80080d6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	3301      	adds	r3, #1
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	b29a      	uxth	r2, r3
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	3302      	adds	r3, #2
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	3301      	adds	r3, #1
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	3b01      	subs	r3, #1
 80080d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e0      	bne.n	800809e <USB_WritePMA+0x38>
  }
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	3734      	adds	r7, #52	; 0x34
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b08b      	sub	sp, #44	; 0x2c
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	4611      	mov	r1, r2
 80080f6:	461a      	mov	r2, r3
 80080f8:	460b      	mov	r3, r1
 80080fa:	80fb      	strh	r3, [r7, #6]
 80080fc:	4613      	mov	r3, r2
 80080fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008100:	88bb      	ldrh	r3, [r7, #4]
 8008102:	085b      	lsrs	r3, r3, #1
 8008104:	b29b      	uxth	r3, r3
 8008106:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008110:	88fa      	ldrh	r2, [r7, #6]
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800811a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
 8008120:	e018      	b.n	8008154 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	3302      	adds	r3, #2
 800812e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	b2da      	uxtb	r2, r3
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	3301      	adds	r3, #1
 800813c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	b2da      	uxtb	r2, r3
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	3301      	adds	r3, #1
 800814c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	3b01      	subs	r3, #1
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e3      	bne.n	8008122 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800815a:	88bb      	ldrh	r3, [r7, #4]
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	b2da      	uxtb	r2, r3
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	701a      	strb	r2, [r3, #0]
  }
}
 8008176:	bf00      	nop
 8008178:	372c      	adds	r7, #44	; 0x2c
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800818e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008192:	f002 f901 	bl	800a398 <USBD_static_malloc>
 8008196:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d105      	bne.n	80081aa <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80081a6:	2302      	movs	r3, #2
 80081a8:	e066      	b.n	8008278 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	7c1b      	ldrb	r3, [r3, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d119      	bne.n	80081ee <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081be:	2202      	movs	r2, #2
 80081c0:	2181      	movs	r1, #129	; 0x81
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 ff8d 	bl	800a0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081d2:	2202      	movs	r2, #2
 80081d4:	2101      	movs	r1, #1
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 ff83 	bl	800a0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2210      	movs	r2, #16
 80081e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80081ec:	e016      	b.n	800821c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081ee:	2340      	movs	r3, #64	; 0x40
 80081f0:	2202      	movs	r2, #2
 80081f2:	2181      	movs	r1, #129	; 0x81
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 ff74 	bl	800a0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008200:	2340      	movs	r3, #64	; 0x40
 8008202:	2202      	movs	r2, #2
 8008204:	2101      	movs	r1, #1
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 ff6b 	bl	800a0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2210      	movs	r2, #16
 8008218:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800821c:	2308      	movs	r3, #8
 800821e:	2203      	movs	r2, #3
 8008220:	2182      	movs	r1, #130	; 0x82
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f001 ff5d 	bl	800a0e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7c1b      	ldrb	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d109      	bne.n	8008266 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800825c:	2101      	movs	r1, #1
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f002 f82f 	bl	800a2c2 <USBD_LL_PrepareReceive>
 8008264:	e007      	b.n	8008276 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800826c:	2340      	movs	r3, #64	; 0x40
 800826e:	2101      	movs	r1, #1
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f002 f826 	bl	800a2c2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800828c:	2181      	movs	r1, #129	; 0x81
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 ff4d 	bl	800a12e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800829a:	2101      	movs	r1, #1
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 ff46 	bl	800a12e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80082aa:	2182      	movs	r1, #130	; 0x82
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 ff3e 	bl	800a12e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00e      	beq.n	80082ea <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082dc:	4618      	mov	r0, r3
 80082de:	f002 f869 	bl	800a3b4 <USBD_static_free>
    pdev->pClassData = NULL;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008304:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008318:	2303      	movs	r3, #3
 800831a:	e0af      	b.n	800847c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008324:	2b00      	cmp	r3, #0
 8008326:	d03f      	beq.n	80083a8 <USBD_CDC_Setup+0xb4>
 8008328:	2b20      	cmp	r3, #32
 800832a:	f040 809f 	bne.w	800846c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	88db      	ldrh	r3, [r3, #6]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d02e      	beq.n	8008394 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	b25b      	sxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	da16      	bge.n	800836e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800834c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	88d2      	ldrh	r2, [r2, #6]
 8008352:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	88db      	ldrh	r3, [r3, #6]
 8008358:	2b07      	cmp	r3, #7
 800835a:	bf28      	it	cs
 800835c:	2307      	movcs	r3, #7
 800835e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	89fa      	ldrh	r2, [r7, #14]
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 facf 	bl	800990a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800836c:	e085      	b.n	800847a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	785a      	ldrb	r2, [r3, #1]
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	88db      	ldrh	r3, [r3, #6]
 800837c:	b2da      	uxtb	r2, r3
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008384:	6939      	ldr	r1, [r7, #16]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	88db      	ldrh	r3, [r3, #6]
 800838a:	461a      	mov	r2, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 fae8 	bl	8009962 <USBD_CtlPrepareRx>
      break;
 8008392:	e072      	b.n	800847a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	7850      	ldrb	r0, [r2, #1]
 80083a0:	2200      	movs	r2, #0
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	4798      	blx	r3
      break;
 80083a6:	e068      	b.n	800847a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	2b0b      	cmp	r3, #11
 80083ae:	d852      	bhi.n	8008456 <USBD_CDC_Setup+0x162>
 80083b0:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <USBD_CDC_Setup+0xc4>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	080083e9 	.word	0x080083e9
 80083bc:	08008465 	.word	0x08008465
 80083c0:	08008457 	.word	0x08008457
 80083c4:	08008457 	.word	0x08008457
 80083c8:	08008457 	.word	0x08008457
 80083cc:	08008457 	.word	0x08008457
 80083d0:	08008457 	.word	0x08008457
 80083d4:	08008457 	.word	0x08008457
 80083d8:	08008457 	.word	0x08008457
 80083dc:	08008457 	.word	0x08008457
 80083e0:	08008413 	.word	0x08008413
 80083e4:	0800843d 	.word	0x0800843d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d107      	bne.n	8008404 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083f4:	f107 030a 	add.w	r3, r7, #10
 80083f8:	2202      	movs	r2, #2
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 fa84 	bl	800990a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008402:	e032      	b.n	800846a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 fa0e 	bl	8009828 <USBD_CtlError>
            ret = USBD_FAIL;
 800840c:	2303      	movs	r3, #3
 800840e:	75fb      	strb	r3, [r7, #23]
          break;
 8008410:	e02b      	b.n	800846a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b03      	cmp	r3, #3
 800841c:	d107      	bne.n	800842e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800841e:	f107 030d 	add.w	r3, r7, #13
 8008422:	2201      	movs	r2, #1
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f001 fa6f 	bl	800990a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800842c:	e01d      	b.n	800846a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 f9f9 	bl	8009828 <USBD_CtlError>
            ret = USBD_FAIL;
 8008436:	2303      	movs	r3, #3
 8008438:	75fb      	strb	r3, [r7, #23]
          break;
 800843a:	e016      	b.n	800846a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b03      	cmp	r3, #3
 8008446:	d00f      	beq.n	8008468 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 f9ec 	bl	8009828 <USBD_CtlError>
            ret = USBD_FAIL;
 8008450:	2303      	movs	r3, #3
 8008452:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008454:	e008      	b.n	8008468 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 f9e5 	bl	8009828 <USBD_CtlError>
          ret = USBD_FAIL;
 800845e:	2303      	movs	r3, #3
 8008460:	75fb      	strb	r3, [r7, #23]
          break;
 8008462:	e002      	b.n	800846a <USBD_CDC_Setup+0x176>
          break;
 8008464:	bf00      	nop
 8008466:	e008      	b.n	800847a <USBD_CDC_Setup+0x186>
          break;
 8008468:	bf00      	nop
      }
      break;
 800846a:	e006      	b.n	800847a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 f9da 	bl	8009828 <USBD_CtlError>
      ret = USBD_FAIL;
 8008474:	2303      	movs	r3, #3
 8008476:	75fb      	strb	r3, [r7, #23]
      break;
 8008478:	bf00      	nop
  }

  return (uint8_t)ret;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008496:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e04f      	b.n	8008546 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	3318      	adds	r3, #24
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d029      	beq.n	8008518 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	3318      	adds	r3, #24
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	78f9      	ldrb	r1, [r7, #3]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	460b      	mov	r3, r1
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	00db      	lsls	r3, r3, #3
 80084e2:	4403      	add	r3, r0
 80084e4:	3338      	adds	r3, #56	; 0x38
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80084ec:	fb01 f303 	mul.w	r3, r1, r3
 80084f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d110      	bne.n	8008518 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	3318      	adds	r3, #24
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800850a:	78f9      	ldrb	r1, [r7, #3]
 800850c:	2300      	movs	r3, #0
 800850e:	2200      	movs	r2, #0
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 feb5 	bl	800a280 <USBD_LL_Transmit>
 8008516:	e015      	b.n	8008544 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2200      	movs	r2, #0
 800851c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008560:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800856c:	2303      	movs	r3, #3
 800856e:	e015      	b.n	800859c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	4619      	mov	r1, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 fec5 	bl	800a304 <USBD_LL_GetRxDataSize>
 800857a:	4602      	mov	r2, r0
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008596:	4611      	mov	r1, r2
 8008598:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e01b      	b.n	80085f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d015      	beq.n	80085f4 <USBD_CDC_EP0_RxReady+0x50>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085ce:	2bff      	cmp	r3, #255	; 0xff
 80085d0:	d010      	beq.n	80085f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80085e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085e8:	b292      	uxth	r2, r2
 80085ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	22ff      	movs	r2, #255	; 0xff
 80085f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2243      	movs	r2, #67	; 0x43
 800860c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800860e:	4b03      	ldr	r3, [pc, #12]	; (800861c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	200000d4 	.word	0x200000d4

08008620 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2243      	movs	r2, #67	; 0x43
 800862c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800862e:	4b03      	ldr	r3, [pc, #12]	; (800863c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	20000090 	.word	0x20000090

08008640 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2243      	movs	r2, #67	; 0x43
 800864c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800864e:	4b03      	ldr	r3, [pc, #12]	; (800865c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	20000118 	.word	0x20000118

08008660 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	220a      	movs	r2, #10
 800866c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800866e:	4b03      	ldr	r3, [pc, #12]	; (800867c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	2000004c 	.word	0x2000004c

08008680 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008690:	2303      	movs	r3, #3
 8008692:	e004      	b.n	800869e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b087      	sub	sp, #28
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e008      	b.n	80086da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80086fe:	2303      	movs	r3, #3
 8008700:	e004      	b.n	800870c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008726:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008728:	2301      	movs	r3, #1
 800872a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008736:	2303      	movs	r3, #3
 8008738:	e01a      	b.n	8008770 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008740:	2b00      	cmp	r3, #0
 8008742:	d114      	bne.n	800876e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2201      	movs	r2, #1
 8008748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008762:	2181      	movs	r1, #129	; 0x81
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 fd8b 	bl	800a280 <USBD_LL_Transmit>

    ret = USBD_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008786:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008792:	2303      	movs	r3, #3
 8008794:	e016      	b.n	80087c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	7c1b      	ldrb	r3, [r3, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d109      	bne.n	80087b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087a8:	2101      	movs	r1, #1
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 fd89 	bl	800a2c2 <USBD_LL_PrepareReceive>
 80087b0:	e007      	b.n	80087c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087b8:	2340      	movs	r3, #64	; 0x40
 80087ba:	2101      	movs	r1, #1
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 fd80 	bl	800a2c2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e01f      	b.n	8008824 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	79fa      	ldrb	r2, [r7, #7]
 8008816:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f001 fbe7 	bl	8009fec <USBD_LL_Init>
 800881e:	4603      	mov	r3, r0
 8008820:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008822:	7dfb      	ldrb	r3, [r7, #23]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008840:	2303      	movs	r3, #3
 8008842:	e016      	b.n	8008872 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00b      	beq.n	8008870 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	f107 020e 	add.w	r2, r7, #14
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3
 8008868:	4602      	mov	r2, r0
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f001 fc12 	bl	800a0ac <USBD_LL_Start>
 8008888:	4603      	mov	r3, r0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d009      	beq.n	80088d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	78fa      	ldrb	r2, [r7, #3]
 80088cc:	4611      	mov	r1, r2
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	4798      	blx	r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	4611      	mov	r1, r2
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	4798      	blx	r3
  }

  return USBD_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f000 ff46 	bl	80097b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008936:	461a      	mov	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008944:	f003 031f 	and.w	r3, r3, #31
 8008948:	2b02      	cmp	r3, #2
 800894a:	d01a      	beq.n	8008982 <USBD_LL_SetupStage+0x72>
 800894c:	2b02      	cmp	r3, #2
 800894e:	d822      	bhi.n	8008996 <USBD_LL_SetupStage+0x86>
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <USBD_LL_SetupStage+0x4a>
 8008954:	2b01      	cmp	r3, #1
 8008956:	d00a      	beq.n	800896e <USBD_LL_SetupStage+0x5e>
 8008958:	e01d      	b.n	8008996 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9ee 	bl	8008d44 <USBD_StdDevReq>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
      break;
 800896c:	e020      	b.n	80089b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fa52 	bl	8008e20 <USBD_StdItfReq>
 800897c:	4603      	mov	r3, r0
 800897e:	73fb      	strb	r3, [r7, #15]
      break;
 8008980:	e016      	b.n	80089b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa91 	bl	8008eb2 <USBD_StdEPReq>
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]
      break;
 8008994:	e00c      	b.n	80089b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800899c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 fbe1 	bl	800a16c <USBD_LL_StallEP>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73fb      	strb	r3, [r7, #15]
      break;
 80089ae:	bf00      	nop
  }

  return ret;
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	460b      	mov	r3, r1
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d138      	bne.n	8008a40 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d14a      	bne.n	8008a76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d913      	bls.n	8008a14 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	1ad2      	subs	r2, r2, r3
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	4293      	cmp	r3, r2
 8008a04:	bf28      	it	cs
 8008a06:	4613      	movcs	r3, r2
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6879      	ldr	r1, [r7, #4]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 ffc5 	bl	800999c <USBD_CtlContinueRx>
 8008a12:	e030      	b.n	8008a76 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d10b      	bne.n	8008a38 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 ffc0 	bl	80099be <USBD_CtlSendStatus>
 8008a3e:	e01a      	b.n	8008a76 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d114      	bne.n	8008a76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00e      	beq.n	8008a76 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	7afa      	ldrb	r2, [r7, #11]
 8008a62:	4611      	mov	r1, r2
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	4798      	blx	r3
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a6c:	7dfb      	ldrb	r3, [r7, #23]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	e000      	b.n	8008a78 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a8e:	7afb      	ldrb	r3, [r7, #11]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d16b      	bne.n	8008b6c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3314      	adds	r3, #20
 8008a98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d156      	bne.n	8008b52 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d914      	bls.n	8008ada <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	1ad2      	subs	r2, r2, r3
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 ff3a 	bl	8009940 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008acc:	2300      	movs	r3, #0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f001 fbf5 	bl	800a2c2 <USBD_LL_PrepareReceive>
 8008ad8:	e03b      	b.n	8008b52 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d11c      	bne.n	8008b20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d316      	bcc.n	8008b20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d20f      	bcs.n	8008b20 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b00:	2200      	movs	r2, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 ff1b 	bl	8009940 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b12:	2300      	movs	r3, #0
 8008b14:	2200      	movs	r2, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f001 fbd2 	bl	800a2c2 <USBD_LL_PrepareReceive>
 8008b1e:	e018      	b.n	8008b52 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d10b      	bne.n	8008b44 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b44:	2180      	movs	r1, #128	; 0x80
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f001 fb10 	bl	800a16c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 ff49 	bl	80099e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d122      	bne.n	8008ba2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fe98 	bl	8008892 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b6a:	e01a      	b.n	8008ba2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d114      	bne.n	8008ba2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00e      	beq.n	8008ba2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	7afa      	ldrb	r2, [r7, #11]
 8008b8e:	4611      	mov	r1, r2
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	4798      	blx	r3
 8008b94:	4603      	mov	r3, r0
 8008b96:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	e000      	b.n	8008ba4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e02f      	b.n	8008c40 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00f      	beq.n	8008c0a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	6852      	ldr	r2, [r2, #4]
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	4611      	mov	r1, r2
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c0a:	2340      	movs	r3, #64	; 0x40
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2100      	movs	r1, #0
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 fa66 	bl	800a0e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2240      	movs	r2, #64	; 0x40
 8008c22:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c26:	2340      	movs	r3, #64	; 0x40
 8008c28:	2200      	movs	r2, #0
 8008c2a:	2180      	movs	r1, #128	; 0x80
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 fa58 	bl	800a0e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2240      	movs	r2, #64	; 0x40
 8008c3c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2204      	movs	r2, #4
 8008c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	d106      	bne.n	8008cb6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e012      	b.n	8008d00 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d10b      	bne.n	8008cfe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d005      	beq.n	8008cfe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d26:	8a3b      	ldrh	r3, [r7, #16]
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	b21a      	sxth	r2, r3
 8008d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	b21b      	sxth	r3, r3
 8008d34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d36:	89fb      	ldrh	r3, [r7, #14]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	371c      	adds	r7, #28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d5a:	2b40      	cmp	r3, #64	; 0x40
 8008d5c:	d005      	beq.n	8008d6a <USBD_StdDevReq+0x26>
 8008d5e:	2b40      	cmp	r3, #64	; 0x40
 8008d60:	d853      	bhi.n	8008e0a <USBD_StdDevReq+0xc6>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00b      	beq.n	8008d7e <USBD_StdDevReq+0x3a>
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	d14f      	bne.n	8008e0a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	4798      	blx	r3
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d7c:	e04a      	b.n	8008e14 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	2b09      	cmp	r3, #9
 8008d84:	d83b      	bhi.n	8008dfe <USBD_StdDevReq+0xba>
 8008d86:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <USBD_StdDevReq+0x48>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008de1 	.word	0x08008de1
 8008d90:	08008df5 	.word	0x08008df5
 8008d94:	08008dff 	.word	0x08008dff
 8008d98:	08008deb 	.word	0x08008deb
 8008d9c:	08008dff 	.word	0x08008dff
 8008da0:	08008dbf 	.word	0x08008dbf
 8008da4:	08008db5 	.word	0x08008db5
 8008da8:	08008dff 	.word	0x08008dff
 8008dac:	08008dd7 	.word	0x08008dd7
 8008db0:	08008dc9 	.word	0x08008dc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f9de 	bl	8009178 <USBD_GetDescriptor>
          break;
 8008dbc:	e024      	b.n	8008e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fb6d 	bl	80094a0 <USBD_SetAddress>
          break;
 8008dc6:	e01f      	b.n	8008e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fbac 	bl	8009528 <USBD_SetConfig>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]
          break;
 8008dd4:	e018      	b.n	8008e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fc4b 	bl	8009674 <USBD_GetConfig>
          break;
 8008dde:	e013      	b.n	8008e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fc7c 	bl	80096e0 <USBD_GetStatus>
          break;
 8008de8:	e00e      	b.n	8008e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fcab 	bl	8009748 <USBD_SetFeature>
          break;
 8008df2:	e009      	b.n	8008e08 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fcba 	bl	8009770 <USBD_ClrFeature>
          break;
 8008dfc:	e004      	b.n	8008e08 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fd11 	bl	8009828 <USBD_CtlError>
          break;
 8008e06:	bf00      	nop
      }
      break;
 8008e08:	e004      	b.n	8008e14 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fd0b 	bl	8009828 <USBD_CtlError>
      break;
 8008e12:	bf00      	nop
  }

  return ret;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop

08008e20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e36:	2b40      	cmp	r3, #64	; 0x40
 8008e38:	d005      	beq.n	8008e46 <USBD_StdItfReq+0x26>
 8008e3a:	2b40      	cmp	r3, #64	; 0x40
 8008e3c:	d82f      	bhi.n	8008e9e <USBD_StdItfReq+0x7e>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <USBD_StdItfReq+0x26>
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	d12b      	bne.n	8008e9e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d81d      	bhi.n	8008e90 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	889b      	ldrh	r3, [r3, #4]
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d813      	bhi.n	8008e86 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	4798      	blx	r3
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	88db      	ldrh	r3, [r3, #6]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d110      	bne.n	8008e9a <USBD_StdItfReq+0x7a>
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10d      	bne.n	8008e9a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fd9d 	bl	80099be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e84:	e009      	b.n	8008e9a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fccd 	bl	8009828 <USBD_CtlError>
          break;
 8008e8e:	e004      	b.n	8008e9a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fcc8 	bl	8009828 <USBD_CtlError>
          break;
 8008e98:	e000      	b.n	8008e9c <USBD_StdItfReq+0x7c>
          break;
 8008e9a:	bf00      	nop
      }
      break;
 8008e9c:	e004      	b.n	8008ea8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fcc1 	bl	8009828 <USBD_CtlError>
      break;
 8008ea6:	bf00      	nop
  }

  return ret;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	889b      	ldrh	r3, [r3, #4]
 8008ec4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ece:	2b40      	cmp	r3, #64	; 0x40
 8008ed0:	d007      	beq.n	8008ee2 <USBD_StdEPReq+0x30>
 8008ed2:	2b40      	cmp	r3, #64	; 0x40
 8008ed4:	f200 8145 	bhi.w	8009162 <USBD_StdEPReq+0x2b0>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00c      	beq.n	8008ef6 <USBD_StdEPReq+0x44>
 8008edc:	2b20      	cmp	r3, #32
 8008ede:	f040 8140 	bne.w	8009162 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef4:	e13a      	b.n	800916c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d007      	beq.n	8008f0e <USBD_StdEPReq+0x5c>
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	f300 8129 	bgt.w	8009156 <USBD_StdEPReq+0x2a4>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d07f      	beq.n	8009008 <USBD_StdEPReq+0x156>
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d03c      	beq.n	8008f86 <USBD_StdEPReq+0xd4>
 8008f0c:	e123      	b.n	8009156 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d002      	beq.n	8008f20 <USBD_StdEPReq+0x6e>
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d016      	beq.n	8008f4c <USBD_StdEPReq+0x9a>
 8008f1e:	e02c      	b.n	8008f7a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <USBD_StdEPReq+0x90>
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b80      	cmp	r3, #128	; 0x80
 8008f2a:	d00a      	beq.n	8008f42 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 f91b 	bl	800a16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f36:	2180      	movs	r1, #128	; 0x80
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 f917 	bl	800a16c <USBD_LL_StallEP>
 8008f3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f40:	e020      	b.n	8008f84 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fc6f 	bl	8009828 <USBD_CtlError>
              break;
 8008f4a:	e01b      	b.n	8008f84 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	885b      	ldrh	r3, [r3, #2]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10e      	bne.n	8008f72 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <USBD_StdEPReq+0xc0>
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b80      	cmp	r3, #128	; 0x80
 8008f5e:	d008      	beq.n	8008f72 <USBD_StdEPReq+0xc0>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 f8fd 	bl	800a16c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fd23 	bl	80099be <USBD_CtlSendStatus>

              break;
 8008f78:	e004      	b.n	8008f84 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fc53 	bl	8009828 <USBD_CtlError>
              break;
 8008f82:	bf00      	nop
          }
          break;
 8008f84:	e0ec      	b.n	8009160 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d002      	beq.n	8008f98 <USBD_StdEPReq+0xe6>
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d016      	beq.n	8008fc4 <USBD_StdEPReq+0x112>
 8008f96:	e030      	b.n	8008ffa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00d      	beq.n	8008fba <USBD_StdEPReq+0x108>
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	2b80      	cmp	r3, #128	; 0x80
 8008fa2:	d00a      	beq.n	8008fba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f8df 	bl	800a16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fae:	2180      	movs	r1, #128	; 0x80
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f8db 	bl	800a16c <USBD_LL_StallEP>
 8008fb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fb8:	e025      	b.n	8009006 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fc33 	bl	8009828 <USBD_CtlError>
              break;
 8008fc2:	e020      	b.n	8009006 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	885b      	ldrh	r3, [r3, #2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d11b      	bne.n	8009004 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d004      	beq.n	8008fe0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 f8e5 	bl	800a1aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fcec 	bl	80099be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4798      	blx	r3
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008ff8:	e004      	b.n	8009004 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fc13 	bl	8009828 <USBD_CtlError>
              break;
 8009002:	e000      	b.n	8009006 <USBD_StdEPReq+0x154>
              break;
 8009004:	bf00      	nop
          }
          break;
 8009006:	e0ab      	b.n	8009160 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d002      	beq.n	800901a <USBD_StdEPReq+0x168>
 8009014:	2b03      	cmp	r3, #3
 8009016:	d032      	beq.n	800907e <USBD_StdEPReq+0x1cc>
 8009018:	e097      	b.n	800914a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <USBD_StdEPReq+0x17e>
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	2b80      	cmp	r3, #128	; 0x80
 8009024:	d004      	beq.n	8009030 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fbfd 	bl	8009828 <USBD_CtlError>
                break;
 800902e:	e091      	b.n	8009154 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009034:	2b00      	cmp	r3, #0
 8009036:	da0b      	bge.n	8009050 <USBD_StdEPReq+0x19e>
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800903e:	4613      	mov	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	3310      	adds	r3, #16
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	4413      	add	r3, r2
 800904c:	3304      	adds	r3, #4
 800904e:	e00b      	b.n	8009068 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	4413      	add	r3, r2
 8009066:	3304      	adds	r3, #4
 8009068:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2200      	movs	r2, #0
 800906e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2202      	movs	r2, #2
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fc47 	bl	800990a <USBD_CtlSendData>
              break;
 800907c:	e06a      	b.n	8009154 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800907e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009082:	2b00      	cmp	r3, #0
 8009084:	da11      	bge.n	80090aa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009086:	7bbb      	ldrb	r3, [r7, #14]
 8009088:	f003 020f 	and.w	r2, r3, #15
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	440b      	add	r3, r1
 8009098:	3324      	adds	r3, #36	; 0x24
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d117      	bne.n	80090d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fbc0 	bl	8009828 <USBD_CtlError>
                  break;
 80090a8:	e054      	b.n	8009154 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	f003 020f 	and.w	r2, r3, #15
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d104      	bne.n	80090d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fbad 	bl	8009828 <USBD_CtlError>
                  break;
 80090ce:	e041      	b.n	8009154 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da0b      	bge.n	80090f0 <USBD_StdEPReq+0x23e>
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	3310      	adds	r3, #16
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	4413      	add	r3, r2
 80090ec:	3304      	adds	r3, #4
 80090ee:	e00b      	b.n	8009108 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	4413      	add	r3, r2
 8009106:	3304      	adds	r3, #4
 8009108:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <USBD_StdEPReq+0x264>
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2b80      	cmp	r3, #128	; 0x80
 8009114:	d103      	bne.n	800911e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	e00e      	b.n	800913c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 f860 	bl	800a1e8 <USBD_LL_IsStallEP>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2201      	movs	r2, #1
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	e002      	b.n	800913c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2202      	movs	r2, #2
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fbe1 	bl	800990a <USBD_CtlSendData>
              break;
 8009148:	e004      	b.n	8009154 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fb6b 	bl	8009828 <USBD_CtlError>
              break;
 8009152:	bf00      	nop
          }
          break;
 8009154:	e004      	b.n	8009160 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fb65 	bl	8009828 <USBD_CtlError>
          break;
 800915e:	bf00      	nop
      }
      break;
 8009160:	e004      	b.n	800916c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fb5f 	bl	8009828 <USBD_CtlError>
      break;
 800916a:	bf00      	nop
  }

  return ret;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800918a:	2300      	movs	r3, #0
 800918c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	885b      	ldrh	r3, [r3, #2]
 8009192:	0a1b      	lsrs	r3, r3, #8
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	2b0e      	cmp	r3, #14
 800919a:	f200 8152 	bhi.w	8009442 <USBD_GetDescriptor+0x2ca>
 800919e:	a201      	add	r2, pc, #4	; (adr r2, 80091a4 <USBD_GetDescriptor+0x2c>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	08009215 	.word	0x08009215
 80091a8:	0800922d 	.word	0x0800922d
 80091ac:	0800926d 	.word	0x0800926d
 80091b0:	08009443 	.word	0x08009443
 80091b4:	08009443 	.word	0x08009443
 80091b8:	080093e3 	.word	0x080093e3
 80091bc:	0800940f 	.word	0x0800940f
 80091c0:	08009443 	.word	0x08009443
 80091c4:	08009443 	.word	0x08009443
 80091c8:	08009443 	.word	0x08009443
 80091cc:	08009443 	.word	0x08009443
 80091d0:	08009443 	.word	0x08009443
 80091d4:	08009443 	.word	0x08009443
 80091d8:	08009443 	.word	0x08009443
 80091dc:	080091e1 	.word	0x080091e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00b      	beq.n	8009204 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	7c12      	ldrb	r2, [r2, #16]
 80091f8:	f107 0108 	add.w	r1, r7, #8
 80091fc:	4610      	mov	r0, r2
 80091fe:	4798      	blx	r3
 8009200:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009202:	e126      	b.n	8009452 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fb0e 	bl	8009828 <USBD_CtlError>
        err++;
 800920c:	7afb      	ldrb	r3, [r7, #11]
 800920e:	3301      	adds	r3, #1
 8009210:	72fb      	strb	r3, [r7, #11]
      break;
 8009212:	e11e      	b.n	8009452 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	7c12      	ldrb	r2, [r2, #16]
 8009220:	f107 0108 	add.w	r1, r7, #8
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
 8009228:	60f8      	str	r0, [r7, #12]
      break;
 800922a:	e112      	b.n	8009452 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	7c1b      	ldrb	r3, [r3, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10d      	bne.n	8009250 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923c:	f107 0208 	add.w	r2, r7, #8
 8009240:	4610      	mov	r0, r2
 8009242:	4798      	blx	r3
 8009244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800924e:	e100      	b.n	8009452 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009258:	f107 0208 	add.w	r2, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3301      	adds	r3, #1
 8009266:	2202      	movs	r2, #2
 8009268:	701a      	strb	r2, [r3, #0]
      break;
 800926a:	e0f2      	b.n	8009452 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	885b      	ldrh	r3, [r3, #2]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b05      	cmp	r3, #5
 8009274:	f200 80ac 	bhi.w	80093d0 <USBD_GetDescriptor+0x258>
 8009278:	a201      	add	r2, pc, #4	; (adr r2, 8009280 <USBD_GetDescriptor+0x108>)
 800927a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927e:	bf00      	nop
 8009280:	08009299 	.word	0x08009299
 8009284:	080092cd 	.word	0x080092cd
 8009288:	08009301 	.word	0x08009301
 800928c:	08009335 	.word	0x08009335
 8009290:	08009369 	.word	0x08009369
 8009294:	0800939d 	.word	0x0800939d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00b      	beq.n	80092bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	7c12      	ldrb	r2, [r2, #16]
 80092b0:	f107 0108 	add.w	r1, r7, #8
 80092b4:	4610      	mov	r0, r2
 80092b6:	4798      	blx	r3
 80092b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ba:	e091      	b.n	80093e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fab2 	bl	8009828 <USBD_CtlError>
            err++;
 80092c4:	7afb      	ldrb	r3, [r7, #11]
 80092c6:	3301      	adds	r3, #1
 80092c8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ca:	e089      	b.n	80093e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00b      	beq.n	80092f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	7c12      	ldrb	r2, [r2, #16]
 80092e4:	f107 0108 	add.w	r1, r7, #8
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
 80092ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ee:	e077      	b.n	80093e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fa98 	bl	8009828 <USBD_CtlError>
            err++;
 80092f8:	7afb      	ldrb	r3, [r7, #11]
 80092fa:	3301      	adds	r3, #1
 80092fc:	72fb      	strb	r3, [r7, #11]
          break;
 80092fe:	e06f      	b.n	80093e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	7c12      	ldrb	r2, [r2, #16]
 8009318:	f107 0108 	add.w	r1, r7, #8
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009322:	e05d      	b.n	80093e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa7e 	bl	8009828 <USBD_CtlError>
            err++;
 800932c:	7afb      	ldrb	r3, [r7, #11]
 800932e:	3301      	adds	r3, #1
 8009330:	72fb      	strb	r3, [r7, #11]
          break;
 8009332:	e055      	b.n	80093e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	7c12      	ldrb	r2, [r2, #16]
 800934c:	f107 0108 	add.w	r1, r7, #8
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
 8009354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009356:	e043      	b.n	80093e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fa64 	bl	8009828 <USBD_CtlError>
            err++;
 8009360:	7afb      	ldrb	r3, [r7, #11]
 8009362:	3301      	adds	r3, #1
 8009364:	72fb      	strb	r3, [r7, #11]
          break;
 8009366:	e03b      	b.n	80093e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00b      	beq.n	800938c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	7c12      	ldrb	r2, [r2, #16]
 8009380:	f107 0108 	add.w	r1, r7, #8
 8009384:	4610      	mov	r0, r2
 8009386:	4798      	blx	r3
 8009388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800938a:	e029      	b.n	80093e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa4a 	bl	8009828 <USBD_CtlError>
            err++;
 8009394:	7afb      	ldrb	r3, [r7, #11]
 8009396:	3301      	adds	r3, #1
 8009398:	72fb      	strb	r3, [r7, #11]
          break;
 800939a:	e021      	b.n	80093e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00b      	beq.n	80093c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	7c12      	ldrb	r2, [r2, #16]
 80093b4:	f107 0108 	add.w	r1, r7, #8
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093be:	e00f      	b.n	80093e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fa30 	bl	8009828 <USBD_CtlError>
            err++;
 80093c8:	7afb      	ldrb	r3, [r7, #11]
 80093ca:	3301      	adds	r3, #1
 80093cc:	72fb      	strb	r3, [r7, #11]
          break;
 80093ce:	e007      	b.n	80093e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fa28 	bl	8009828 <USBD_CtlError>
          err++;
 80093d8:	7afb      	ldrb	r3, [r7, #11]
 80093da:	3301      	adds	r3, #1
 80093dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80093de:	bf00      	nop
      }
      break;
 80093e0:	e037      	b.n	8009452 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	7c1b      	ldrb	r3, [r3, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d109      	bne.n	80093fe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f2:	f107 0208 	add.w	r2, r7, #8
 80093f6:	4610      	mov	r0, r2
 80093f8:	4798      	blx	r3
 80093fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093fc:	e029      	b.n	8009452 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fa11 	bl	8009828 <USBD_CtlError>
        err++;
 8009406:	7afb      	ldrb	r3, [r7, #11]
 8009408:	3301      	adds	r3, #1
 800940a:	72fb      	strb	r3, [r7, #11]
      break;
 800940c:	e021      	b.n	8009452 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	7c1b      	ldrb	r3, [r3, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10d      	bne.n	8009432 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941e:	f107 0208 	add.w	r2, r7, #8
 8009422:	4610      	mov	r0, r2
 8009424:	4798      	blx	r3
 8009426:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	2207      	movs	r2, #7
 800942e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009430:	e00f      	b.n	8009452 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f9f7 	bl	8009828 <USBD_CtlError>
        err++;
 800943a:	7afb      	ldrb	r3, [r7, #11]
 800943c:	3301      	adds	r3, #1
 800943e:	72fb      	strb	r3, [r7, #11]
      break;
 8009440:	e007      	b.n	8009452 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f9ef 	bl	8009828 <USBD_CtlError>
      err++;
 800944a:	7afb      	ldrb	r3, [r7, #11]
 800944c:	3301      	adds	r3, #1
 800944e:	72fb      	strb	r3, [r7, #11]
      break;
 8009450:	bf00      	nop
  }

  if (err != 0U)
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d11e      	bne.n	8009496 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	88db      	ldrh	r3, [r3, #6]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d016      	beq.n	800948e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009460:	893b      	ldrh	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00e      	beq.n	8009484 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	88da      	ldrh	r2, [r3, #6]
 800946a:	893b      	ldrh	r3, [r7, #8]
 800946c:	4293      	cmp	r3, r2
 800946e:	bf28      	it	cs
 8009470:	4613      	movcs	r3, r2
 8009472:	b29b      	uxth	r3, r3
 8009474:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009476:	893b      	ldrh	r3, [r7, #8]
 8009478:	461a      	mov	r2, r3
 800947a:	68f9      	ldr	r1, [r7, #12]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa44 	bl	800990a <USBD_CtlSendData>
 8009482:	e009      	b.n	8009498 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9ce 	bl	8009828 <USBD_CtlError>
 800948c:	e004      	b.n	8009498 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fa95 	bl	80099be <USBD_CtlSendStatus>
 8009494:	e000      	b.n	8009498 <USBD_GetDescriptor+0x320>
    return;
 8009496:	bf00      	nop
  }
}
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop

080094a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	889b      	ldrh	r3, [r3, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d131      	bne.n	8009516 <USBD_SetAddress+0x76>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	88db      	ldrh	r3, [r3, #6]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d12d      	bne.n	8009516 <USBD_SetAddress+0x76>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	885b      	ldrh	r3, [r3, #2]
 80094be:	2b7f      	cmp	r3, #127	; 0x7f
 80094c0:	d829      	bhi.n	8009516 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	885b      	ldrh	r3, [r3, #2]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d104      	bne.n	80094e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f9a3 	bl	8009828 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e2:	e01d      	b.n	8009520 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	7bfa      	ldrb	r2, [r7, #15]
 80094e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fea6 	bl	800a242 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa61 	bl	80099be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2202      	movs	r2, #2
 8009506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950a:	e009      	b.n	8009520 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009514:	e004      	b.n	8009520 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f985 	bl	8009828 <USBD_CtlError>
  }
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	885b      	ldrh	r3, [r3, #2]
 800953a:	b2da      	uxtb	r2, r3
 800953c:	4b4c      	ldr	r3, [pc, #304]	; (8009670 <USBD_SetConfig+0x148>)
 800953e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009540:	4b4b      	ldr	r3, [pc, #300]	; (8009670 <USBD_SetConfig+0x148>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d905      	bls.n	8009554 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f96c 	bl	8009828 <USBD_CtlError>
    return USBD_FAIL;
 8009550:	2303      	movs	r3, #3
 8009552:	e088      	b.n	8009666 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b02      	cmp	r3, #2
 800955e:	d002      	beq.n	8009566 <USBD_SetConfig+0x3e>
 8009560:	2b03      	cmp	r3, #3
 8009562:	d025      	beq.n	80095b0 <USBD_SetConfig+0x88>
 8009564:	e071      	b.n	800964a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009566:	4b42      	ldr	r3, [pc, #264]	; (8009670 <USBD_SetConfig+0x148>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d01c      	beq.n	80095a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800956e:	4b40      	ldr	r3, [pc, #256]	; (8009670 <USBD_SetConfig+0x148>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009578:	4b3d      	ldr	r3, [pc, #244]	; (8009670 <USBD_SetConfig+0x148>)
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff f992 	bl	80088a8 <USBD_SetClassConfig>
 8009584:	4603      	mov	r3, r0
 8009586:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d004      	beq.n	8009598 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f949 	bl	8009828 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009596:	e065      	b.n	8009664 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fa10 	bl	80099be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2203      	movs	r2, #3
 80095a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095a6:	e05d      	b.n	8009664 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fa08 	bl	80099be <USBD_CtlSendStatus>
      break;
 80095ae:	e059      	b.n	8009664 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095b0:	4b2f      	ldr	r3, [pc, #188]	; (8009670 <USBD_SetConfig+0x148>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d112      	bne.n	80095de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095c0:	4b2b      	ldr	r3, [pc, #172]	; (8009670 <USBD_SetConfig+0x148>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	461a      	mov	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ca:	4b29      	ldr	r3, [pc, #164]	; (8009670 <USBD_SetConfig+0x148>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7ff f985 	bl	80088e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f9f1 	bl	80099be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095dc:	e042      	b.n	8009664 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80095de:	4b24      	ldr	r3, [pc, #144]	; (8009670 <USBD_SetConfig+0x148>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d02a      	beq.n	8009642 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7ff f973 	bl	80088e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095fa:	4b1d      	ldr	r3, [pc, #116]	; (8009670 <USBD_SetConfig+0x148>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009604:	4b1a      	ldr	r3, [pc, #104]	; (8009670 <USBD_SetConfig+0x148>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff f94c 	bl	80088a8 <USBD_SetClassConfig>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00f      	beq.n	800963a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f903 	bl	8009828 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff f958 	bl	80088e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2202      	movs	r2, #2
 8009634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009638:	e014      	b.n	8009664 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f9bf 	bl	80099be <USBD_CtlSendStatus>
      break;
 8009640:	e010      	b.n	8009664 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f9bb 	bl	80099be <USBD_CtlSendStatus>
      break;
 8009648:	e00c      	b.n	8009664 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f8eb 	bl	8009828 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009652:	4b07      	ldr	r3, [pc, #28]	; (8009670 <USBD_SetConfig+0x148>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff f941 	bl	80088e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800965e:	2303      	movs	r3, #3
 8009660:	73fb      	strb	r3, [r7, #15]
      break;
 8009662:	bf00      	nop
  }

  return ret;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000494 	.word	0x20000494

08009674 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	88db      	ldrh	r3, [r3, #6]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d004      	beq.n	8009690 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f8cd 	bl	8009828 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800968e:	e023      	b.n	80096d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b02      	cmp	r3, #2
 800969a:	dc02      	bgt.n	80096a2 <USBD_GetConfig+0x2e>
 800969c:	2b00      	cmp	r3, #0
 800969e:	dc03      	bgt.n	80096a8 <USBD_GetConfig+0x34>
 80096a0:	e015      	b.n	80096ce <USBD_GetConfig+0x5a>
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d00b      	beq.n	80096be <USBD_GetConfig+0x4a>
 80096a6:	e012      	b.n	80096ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3308      	adds	r3, #8
 80096b2:	2201      	movs	r2, #1
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f927 	bl	800990a <USBD_CtlSendData>
        break;
 80096bc:	e00c      	b.n	80096d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3304      	adds	r3, #4
 80096c2:	2201      	movs	r2, #1
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f91f 	bl	800990a <USBD_CtlSendData>
        break;
 80096cc:	e004      	b.n	80096d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f8a9 	bl	8009828 <USBD_CtlError>
        break;
 80096d6:	bf00      	nop
}
 80096d8:	bf00      	nop
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	3b01      	subs	r3, #1
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d81e      	bhi.n	8009736 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	88db      	ldrh	r3, [r3, #6]
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d004      	beq.n	800970a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f890 	bl	8009828 <USBD_CtlError>
        break;
 8009708:	e01a      	b.n	8009740 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009716:	2b00      	cmp	r3, #0
 8009718:	d005      	beq.n	8009726 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f043 0202 	orr.w	r2, r3, #2
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	330c      	adds	r3, #12
 800972a:	2202      	movs	r2, #2
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f8eb 	bl	800990a <USBD_CtlSendData>
      break;
 8009734:	e004      	b.n	8009740 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f875 	bl	8009828 <USBD_CtlError>
      break;
 800973e:	bf00      	nop
  }
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	885b      	ldrh	r3, [r3, #2]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d106      	bne.n	8009768 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f92b 	bl	80099be <USBD_CtlSendStatus>
  }
}
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009780:	b2db      	uxtb	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	2b02      	cmp	r3, #2
 8009786:	d80b      	bhi.n	80097a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	885b      	ldrh	r3, [r3, #2]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d10c      	bne.n	80097aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f910 	bl	80099be <USBD_CtlSendStatus>
      }
      break;
 800979e:	e004      	b.n	80097aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f840 	bl	8009828 <USBD_CtlError>
      break;
 80097a8:	e000      	b.n	80097ac <USBD_ClrFeature+0x3c>
      break;
 80097aa:	bf00      	nop
  }
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	781a      	ldrb	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3301      	adds	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f7ff fa92 	bl	8008d08 <SWAPBYTE>
 80097e4:	4603      	mov	r3, r0
 80097e6:	461a      	mov	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	3301      	adds	r3, #1
 80097f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3301      	adds	r3, #1
 80097f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7ff fa85 	bl	8008d08 <SWAPBYTE>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3301      	adds	r3, #1
 800980a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3301      	adds	r3, #1
 8009810:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7ff fa78 	bl	8008d08 <SWAPBYTE>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	80da      	strh	r2, [r3, #6]
}
 8009820:	bf00      	nop
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009832:	2180      	movs	r1, #128	; 0x80
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fc99 	bl	800a16c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800983a:	2100      	movs	r1, #0
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fc95 	bl	800a16c <USBD_LL_StallEP>
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b086      	sub	sp, #24
 800984e:	af00      	add	r7, sp, #0
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d036      	beq.n	80098ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009864:	6938      	ldr	r0, [r7, #16]
 8009866:	f000 f836 	bl	80098d6 <USBD_GetLen>
 800986a:	4603      	mov	r3, r0
 800986c:	3301      	adds	r3, #1
 800986e:	b29b      	uxth	r3, r3
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	4413      	add	r3, r2
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	7812      	ldrb	r2, [r2, #0]
 8009882:	701a      	strb	r2, [r3, #0]
  idx++;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	3301      	adds	r3, #1
 8009888:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	4413      	add	r3, r2
 8009890:	2203      	movs	r2, #3
 8009892:	701a      	strb	r2, [r3, #0]
  idx++;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	3301      	adds	r3, #1
 8009898:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800989a:	e013      	b.n	80098c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	4413      	add	r3, r2
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	7812      	ldrb	r2, [r2, #0]
 80098a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	3301      	adds	r3, #1
 80098ac:	613b      	str	r3, [r7, #16]
    idx++;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	3301      	adds	r3, #1
 80098b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	4413      	add	r3, r2
 80098ba:	2200      	movs	r2, #0
 80098bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	3301      	adds	r3, #1
 80098c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e7      	bne.n	800989c <USBD_GetString+0x52>
 80098cc:	e000      	b.n	80098d0 <USBD_GetString+0x86>
    return;
 80098ce:	bf00      	nop
  }
}
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b085      	sub	sp, #20
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098e6:	e005      	b.n	80098f4 <USBD_GetLen+0x1e>
  {
    len++;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	3301      	adds	r3, #1
 80098ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	3301      	adds	r3, #1
 80098f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1f5      	bne.n	80098e8 <USBD_GetLen+0x12>
  }

  return len;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b084      	sub	sp, #16
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2202      	movs	r2, #2
 800991a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	2100      	movs	r1, #0
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 fca5 	bl	800a280 <USBD_LL_Transmit>

  return USBD_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	2100      	movs	r1, #0
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 fc94 	bl	800a280 <USBD_LL_Transmit>

  return USBD_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2203      	movs	r2, #3
 8009972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	2100      	movs	r1, #0
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 fc98 	bl	800a2c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	2100      	movs	r1, #0
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f000 fc87 	bl	800a2c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2204      	movs	r2, #4
 80099ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099ce:	2300      	movs	r3, #0
 80099d0:	2200      	movs	r2, #0
 80099d2:	2100      	movs	r1, #0
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fc53 	bl	800a280 <USBD_LL_Transmit>

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2205      	movs	r2, #5
 80099f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099f4:	2300      	movs	r3, #0
 80099f6:	2200      	movs	r2, #0
 80099f8:	2100      	movs	r1, #0
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fc61 	bl	800a2c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009a10:	2200      	movs	r2, #0
 8009a12:	4912      	ldr	r1, [pc, #72]	; (8009a5c <MX_USB_Device_Init+0x50>)
 8009a14:	4812      	ldr	r0, [pc, #72]	; (8009a60 <MX_USB_Device_Init+0x54>)
 8009a16:	f7fe fed9 	bl	80087cc <USBD_Init>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009a20:	f7f7 fb00 	bl	8001024 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009a24:	490f      	ldr	r1, [pc, #60]	; (8009a64 <MX_USB_Device_Init+0x58>)
 8009a26:	480e      	ldr	r0, [pc, #56]	; (8009a60 <MX_USB_Device_Init+0x54>)
 8009a28:	f7fe ff00 	bl	800882c <USBD_RegisterClass>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009a32:	f7f7 faf7 	bl	8001024 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009a36:	490c      	ldr	r1, [pc, #48]	; (8009a68 <MX_USB_Device_Init+0x5c>)
 8009a38:	4809      	ldr	r0, [pc, #36]	; (8009a60 <MX_USB_Device_Init+0x54>)
 8009a3a:	f7fe fe21 	bl	8008680 <USBD_CDC_RegisterInterface>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009a44:	f7f7 faee 	bl	8001024 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009a48:	4805      	ldr	r0, [pc, #20]	; (8009a60 <MX_USB_Device_Init+0x54>)
 8009a4a:	f7fe ff16 	bl	800887a <USBD_Start>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009a54:	f7f7 fae6 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009a58:	bf00      	nop
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20000170 	.word	0x20000170
 8009a60:	20000498 	.word	0x20000498
 8009a64:	20000058 	.word	0x20000058
 8009a68:	2000015c 	.word	0x2000015c

08009a6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a70:	2200      	movs	r2, #0
 8009a72:	4905      	ldr	r1, [pc, #20]	; (8009a88 <CDC_Init_FS+0x1c>)
 8009a74:	4805      	ldr	r0, [pc, #20]	; (8009a8c <CDC_Init_FS+0x20>)
 8009a76:	f7fe fe18 	bl	80086aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a7a:	4905      	ldr	r1, [pc, #20]	; (8009a90 <CDC_Init_FS+0x24>)
 8009a7c:	4803      	ldr	r0, [pc, #12]	; (8009a8c <CDC_Init_FS+0x20>)
 8009a7e:	f7fe fe32 	bl	80086e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	20000b50 	.word	0x20000b50
 8009a8c:	20000498 	.word	0x20000498
 8009a90:	20000768 	.word	0x20000768

08009a94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a94:	b480      	push	{r7}
 8009a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	6039      	str	r1, [r7, #0]
 8009aae:	71fb      	strb	r3, [r7, #7]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	2b23      	cmp	r3, #35	; 0x23
 8009ab8:	d84a      	bhi.n	8009b50 <CDC_Control_FS+0xac>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <CDC_Control_FS+0x1c>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009b51 	.word	0x08009b51
 8009ac4:	08009b51 	.word	0x08009b51
 8009ac8:	08009b51 	.word	0x08009b51
 8009acc:	08009b51 	.word	0x08009b51
 8009ad0:	08009b51 	.word	0x08009b51
 8009ad4:	08009b51 	.word	0x08009b51
 8009ad8:	08009b51 	.word	0x08009b51
 8009adc:	08009b51 	.word	0x08009b51
 8009ae0:	08009b51 	.word	0x08009b51
 8009ae4:	08009b51 	.word	0x08009b51
 8009ae8:	08009b51 	.word	0x08009b51
 8009aec:	08009b51 	.word	0x08009b51
 8009af0:	08009b51 	.word	0x08009b51
 8009af4:	08009b51 	.word	0x08009b51
 8009af8:	08009b51 	.word	0x08009b51
 8009afc:	08009b51 	.word	0x08009b51
 8009b00:	08009b51 	.word	0x08009b51
 8009b04:	08009b51 	.word	0x08009b51
 8009b08:	08009b51 	.word	0x08009b51
 8009b0c:	08009b51 	.word	0x08009b51
 8009b10:	08009b51 	.word	0x08009b51
 8009b14:	08009b51 	.word	0x08009b51
 8009b18:	08009b51 	.word	0x08009b51
 8009b1c:	08009b51 	.word	0x08009b51
 8009b20:	08009b51 	.word	0x08009b51
 8009b24:	08009b51 	.word	0x08009b51
 8009b28:	08009b51 	.word	0x08009b51
 8009b2c:	08009b51 	.word	0x08009b51
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b51 	.word	0x08009b51
 8009b40:	08009b51 	.word	0x08009b51
 8009b44:	08009b51 	.word	0x08009b51
 8009b48:	08009b51 	.word	0x08009b51
 8009b4c:	08009b51 	.word	0x08009b51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b50:	bf00      	nop
  }

  return (USBD_OK);
 8009b52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7f6 fb53 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	4805      	ldr	r0, [pc, #20]	; (8009b8c <CDC_Receive_FS+0x2c>)
 8009b76:	f7fe fdb6 	bl	80086e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b7a:	4804      	ldr	r0, [pc, #16]	; (8009b8c <CDC_Receive_FS+0x2c>)
 8009b7c:	f7fe fdfc 	bl	8008778 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000498 	.word	0x20000498

08009b90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ba0:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <CDC_Transmit_FS+0x48>)
 8009ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ba6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e00b      	b.n	8009bce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009bb6:	887b      	ldrh	r3, [r7, #2]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	4806      	ldr	r0, [pc, #24]	; (8009bd8 <CDC_Transmit_FS+0x48>)
 8009bbe:	f7fe fd74 	bl	80086aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009bc2:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <CDC_Transmit_FS+0x48>)
 8009bc4:	f7fe fda8 	bl	8008718 <USBD_CDC_TransmitPacket>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000498 	.word	0x20000498

08009bdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	4613      	mov	r3, r2
 8009be8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
	...

08009c00 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	4603      	mov	r3, r0
 8009c08:	6039      	str	r1, [r7, #0]
 8009c0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2212      	movs	r2, #18
 8009c10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009c12:	4b03      	ldr	r3, [pc, #12]	; (8009c20 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	20000190 	.word	0x20000190

08009c24 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	6039      	str	r1, [r7, #0]
 8009c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2204      	movs	r2, #4
 8009c34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c36:	4b03      	ldr	r3, [pc, #12]	; (8009c44 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	200001a4 	.word	0x200001a4

08009c48 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	6039      	str	r1, [r7, #0]
 8009c52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d105      	bne.n	8009c66 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	4907      	ldr	r1, [pc, #28]	; (8009c7c <USBD_CDC_ProductStrDescriptor+0x34>)
 8009c5e:	4808      	ldr	r0, [pc, #32]	; (8009c80 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009c60:	f7ff fdf3 	bl	800984a <USBD_GetString>
 8009c64:	e004      	b.n	8009c70 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	4904      	ldr	r1, [pc, #16]	; (8009c7c <USBD_CDC_ProductStrDescriptor+0x34>)
 8009c6a:	4805      	ldr	r0, [pc, #20]	; (8009c80 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009c6c:	f7ff fded 	bl	800984a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c70:	4b02      	ldr	r3, [pc, #8]	; (8009c7c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000f38 	.word	0x20000f38
 8009c80:	0800a4b8 	.word	0x0800a4b8

08009c84 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	6039      	str	r1, [r7, #0]
 8009c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	4904      	ldr	r1, [pc, #16]	; (8009ca4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009c94:	4804      	ldr	r0, [pc, #16]	; (8009ca8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009c96:	f7ff fdd8 	bl	800984a <USBD_GetString>
  return USBD_StrDesc;
 8009c9a:	4b02      	ldr	r3, [pc, #8]	; (8009ca4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20000f38 	.word	0x20000f38
 8009ca8:	0800a4d0 	.word	0x0800a4d0

08009cac <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	6039      	str	r1, [r7, #0]
 8009cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	221a      	movs	r2, #26
 8009cbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cbe:	f000 f843 	bl	8009d48 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009cc2:	4b02      	ldr	r3, [pc, #8]	; (8009ccc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	200001a8 	.word	0x200001a8

08009cd0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	6039      	str	r1, [r7, #0]
 8009cda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	4907      	ldr	r1, [pc, #28]	; (8009d04 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009ce6:	4808      	ldr	r0, [pc, #32]	; (8009d08 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009ce8:	f7ff fdaf 	bl	800984a <USBD_GetString>
 8009cec:	e004      	b.n	8009cf8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4904      	ldr	r1, [pc, #16]	; (8009d04 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009cf2:	4805      	ldr	r0, [pc, #20]	; (8009d08 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009cf4:	f7ff fda9 	bl	800984a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cf8:	4b02      	ldr	r3, [pc, #8]	; (8009d04 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000f38 	.word	0x20000f38
 8009d08:	0800a4e4 	.word	0x0800a4e4

08009d0c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	6039      	str	r1, [r7, #0]
 8009d16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d105      	bne.n	8009d2a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	4907      	ldr	r1, [pc, #28]	; (8009d40 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009d22:	4808      	ldr	r0, [pc, #32]	; (8009d44 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009d24:	f7ff fd91 	bl	800984a <USBD_GetString>
 8009d28:	e004      	b.n	8009d34 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	4904      	ldr	r1, [pc, #16]	; (8009d40 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009d2e:	4805      	ldr	r0, [pc, #20]	; (8009d44 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009d30:	f7ff fd8b 	bl	800984a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d34:	4b02      	ldr	r3, [pc, #8]	; (8009d40 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000f38 	.word	0x20000f38
 8009d44:	0800a4f0 	.word	0x0800a4f0

08009d48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d4e:	4b0f      	ldr	r3, [pc, #60]	; (8009d8c <Get_SerialNum+0x44>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d54:	4b0e      	ldr	r3, [pc, #56]	; (8009d90 <Get_SerialNum+0x48>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d5a:	4b0e      	ldr	r3, [pc, #56]	; (8009d94 <Get_SerialNum+0x4c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4413      	add	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d009      	beq.n	8009d82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d6e:	2208      	movs	r2, #8
 8009d70:	4909      	ldr	r1, [pc, #36]	; (8009d98 <Get_SerialNum+0x50>)
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 f814 	bl	8009da0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d78:	2204      	movs	r2, #4
 8009d7a:	4908      	ldr	r1, [pc, #32]	; (8009d9c <Get_SerialNum+0x54>)
 8009d7c:	68b8      	ldr	r0, [r7, #8]
 8009d7e:	f000 f80f 	bl	8009da0 <IntToUnicode>
  }
}
 8009d82:	bf00      	nop
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	1fff7590 	.word	0x1fff7590
 8009d90:	1fff7594 	.word	0x1fff7594
 8009d94:	1fff7598 	.word	0x1fff7598
 8009d98:	200001aa 	.word	0x200001aa
 8009d9c:	200001ba 	.word	0x200001ba

08009da0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	4613      	mov	r3, r2
 8009dac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009db2:	2300      	movs	r3, #0
 8009db4:	75fb      	strb	r3, [r7, #23]
 8009db6:	e027      	b.n	8009e08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	0f1b      	lsrs	r3, r3, #28
 8009dbc:	2b09      	cmp	r3, #9
 8009dbe:	d80b      	bhi.n	8009dd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	0f1b      	lsrs	r3, r3, #28
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	4619      	mov	r1, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	440b      	add	r3, r1
 8009dd0:	3230      	adds	r2, #48	; 0x30
 8009dd2:	b2d2      	uxtb	r2, r2
 8009dd4:	701a      	strb	r2, [r3, #0]
 8009dd6:	e00a      	b.n	8009dee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	0f1b      	lsrs	r3, r3, #28
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	4619      	mov	r1, r3
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	440b      	add	r3, r1
 8009de8:	3237      	adds	r2, #55	; 0x37
 8009dea:	b2d2      	uxtb	r2, r2
 8009dec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	011b      	lsls	r3, r3, #4
 8009df2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	3301      	adds	r3, #1
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	3301      	adds	r3, #1
 8009e06:	75fb      	strb	r3, [r7, #23]
 8009e08:	7dfa      	ldrb	r2, [r7, #23]
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d3d3      	bcc.n	8009db8 <IntToUnicode+0x18>
  }
}
 8009e10:	bf00      	nop
 8009e12:	bf00      	nop
 8009e14:	371c      	adds	r7, #28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
	...

08009e20 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b094      	sub	sp, #80	; 0x50
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	2244      	movs	r2, #68	; 0x44
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 fb2d 	bl	800a490 <memset>
  if(pcdHandle->Instance==USB)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a15      	ldr	r2, [pc, #84]	; (8009e90 <HAL_PCD_MspInit+0x70>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d122      	bne.n	8009e86 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e44:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009e46:	2300      	movs	r3, #0
 8009e48:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009e4a:	f107 030c 	add.w	r3, r7, #12
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fa f9b6 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009e5a:	f7f7 f8e3 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e5e:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <HAL_PCD_MspInit+0x74>)
 8009e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e62:	4a0c      	ldr	r2, [pc, #48]	; (8009e94 <HAL_PCD_MspInit+0x74>)
 8009e64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e68:	6593      	str	r3, [r2, #88]	; 0x58
 8009e6a:	4b0a      	ldr	r3, [pc, #40]	; (8009e94 <HAL_PCD_MspInit+0x74>)
 8009e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e72:	60bb      	str	r3, [r7, #8]
 8009e74:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009e76:	2200      	movs	r2, #0
 8009e78:	2100      	movs	r1, #0
 8009e7a:	2014      	movs	r0, #20
 8009e7c:	f7f7 fce5 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009e80:	2014      	movs	r0, #20
 8009e82:	f7f7 fcfc 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e86:	bf00      	nop
 8009e88:	3750      	adds	r7, #80	; 0x50
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	40005c00 	.word	0x40005c00
 8009e94:	40021000 	.word	0x40021000

08009e98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009eac:	4619      	mov	r1, r3
 8009eae:	4610      	mov	r0, r2
 8009eb0:	f7fe fd2e 	bl	8008910 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009ece:	78fa      	ldrb	r2, [r7, #3]
 8009ed0:	6879      	ldr	r1, [r7, #4]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	00db      	lsls	r3, r3, #3
 8009eda:	440b      	add	r3, r1
 8009edc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	78fb      	ldrb	r3, [r7, #3]
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	f7fe fd68 	bl	80089ba <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	460b      	mov	r3, r1
 8009efc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009f04:	78fa      	ldrb	r2, [r7, #3]
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	440b      	add	r3, r1
 8009f12:	333c      	adds	r3, #60	; 0x3c
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	78fb      	ldrb	r3, [r7, #3]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	f7fe fdb1 	bl	8008a80 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009f1e:	bf00      	nop
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fec5 	bl	8008cc4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009f3a:	bf00      	nop
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d001      	beq.n	8009f5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f56:	f7f7 f865 	bl	8001024 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f60:	7bfa      	ldrb	r2, [r7, #15]
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe fe6f 	bl	8008c48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe fe1b 	bl	8008bac <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe fe6a 	bl	8008c68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d005      	beq.n	8009fa8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f9c:	4b04      	ldr	r3, [pc, #16]	; (8009fb0 <HAL_PCD_SuspendCallback+0x30>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	4a03      	ldr	r2, [pc, #12]	; (8009fb0 <HAL_PCD_SuspendCallback+0x30>)
 8009fa2:	f043 0306 	orr.w	r3, r3, #6
 8009fa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	e000ed00 	.word	0xe000ed00

08009fb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d007      	beq.n	8009fd4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009fc4:	4b08      	ldr	r3, [pc, #32]	; (8009fe8 <HAL_PCD_ResumeCallback+0x34>)
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	4a07      	ldr	r2, [pc, #28]	; (8009fe8 <HAL_PCD_ResumeCallback+0x34>)
 8009fca:	f023 0306 	bic.w	r3, r3, #6
 8009fce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009fd0:	f000 f9fa 	bl	800a3c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe fe5a 	bl	8008c94 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009fe0:	bf00      	nop
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	e000ed00 	.word	0xe000ed00

08009fec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009ff4:	4a2b      	ldr	r2, [pc, #172]	; (800a0a4 <USBD_LL_Init+0xb8>)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a29      	ldr	r2, [pc, #164]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a000:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a004:	4b27      	ldr	r3, [pc, #156]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a006:	4a28      	ldr	r2, [pc, #160]	; (800a0a8 <USBD_LL_Init+0xbc>)
 800a008:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a00a:	4b26      	ldr	r3, [pc, #152]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a00c:	2208      	movs	r2, #8
 800a00e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a010:	4b24      	ldr	r3, [pc, #144]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a012:	2202      	movs	r2, #2
 800a014:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a016:	4b23      	ldr	r3, [pc, #140]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a018:	2202      	movs	r2, #2
 800a01a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a01c:	4b21      	ldr	r3, [pc, #132]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a01e:	2200      	movs	r2, #0
 800a020:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a022:	4b20      	ldr	r3, [pc, #128]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a024:	2200      	movs	r2, #0
 800a026:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a028:	4b1e      	ldr	r3, [pc, #120]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a02e:	4b1d      	ldr	r3, [pc, #116]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a030:	2200      	movs	r2, #0
 800a032:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a034:	481b      	ldr	r0, [pc, #108]	; (800a0a4 <USBD_LL_Init+0xb8>)
 800a036:	f7f7 fdef 	bl	8001c18 <HAL_PCD_Init>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a040:	f7f6 fff0 	bl	8001024 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a04a:	2318      	movs	r3, #24
 800a04c:	2200      	movs	r2, #0
 800a04e:	2100      	movs	r1, #0
 800a050:	f7f9 faa8 	bl	80035a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a05a:	2358      	movs	r3, #88	; 0x58
 800a05c:	2200      	movs	r2, #0
 800a05e:	2180      	movs	r1, #128	; 0x80
 800a060:	f7f9 faa0 	bl	80035a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a06a:	23c0      	movs	r3, #192	; 0xc0
 800a06c:	2200      	movs	r2, #0
 800a06e:	2181      	movs	r1, #129	; 0x81
 800a070:	f7f9 fa98 	bl	80035a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a07a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a07e:	2200      	movs	r2, #0
 800a080:	2101      	movs	r1, #1
 800a082:	f7f9 fa8f 	bl	80035a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a08c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a090:	2200      	movs	r2, #0
 800a092:	2182      	movs	r1, #130	; 0x82
 800a094:	f7f9 fa86 	bl	80035a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20001138 	.word	0x20001138
 800a0a8:	40005c00 	.word	0x40005c00

0800a0ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7f7 fe8d 	bl	8001de2 <HAL_PCD_Start>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 f980 	bl	800a3d4 <USBD_Get_USB_Status>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	4608      	mov	r0, r1
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	70fb      	strb	r3, [r7, #3]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70bb      	strb	r3, [r7, #2]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a10a:	78bb      	ldrb	r3, [r7, #2]
 800a10c:	883a      	ldrh	r2, [r7, #0]
 800a10e:	78f9      	ldrb	r1, [r7, #3]
 800a110:	f7f7 ffd5 	bl	80020be <HAL_PCD_EP_Open>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f95a 	bl	800a3d4 <USBD_Get_USB_Status>
 800a120:	4603      	mov	r3, r0
 800a122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a124:	7bbb      	ldrb	r3, [r7, #14]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	460b      	mov	r3, r1
 800a138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a148:	78fa      	ldrb	r2, [r7, #3]
 800a14a:	4611      	mov	r1, r2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7f8 f81c 	bl	800218a <HAL_PCD_EP_Close>
 800a152:	4603      	mov	r3, r0
 800a154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 f93b 	bl	800a3d4 <USBD_Get_USB_Status>
 800a15e:	4603      	mov	r3, r0
 800a160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a162:	7bbb      	ldrb	r3, [r7, #14]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a186:	78fa      	ldrb	r2, [r7, #3]
 800a188:	4611      	mov	r1, r2
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7f8 f8dd 	bl	800234a <HAL_PCD_EP_SetStall>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a194:	7bfb      	ldrb	r3, [r7, #15]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f91c 	bl	800a3d4 <USBD_Get_USB_Status>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7f8 f910 	bl	80023ee <HAL_PCD_EP_ClrStall>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 f8fd 	bl	800a3d4 <USBD_Get_USB_Status>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a200:	2b00      	cmp	r3, #0
 800a202:	da0c      	bge.n	800a21e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a20a:	68f9      	ldr	r1, [r7, #12]
 800a20c:	1c5a      	adds	r2, r3, #1
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	440b      	add	r3, r1
 800a218:	3302      	adds	r3, #2
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	e00b      	b.n	800a236 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a224:	68f9      	ldr	r1, [r7, #12]
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	440b      	add	r3, r1
 800a230:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a234:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a25c:	78fa      	ldrb	r2, [r7, #3]
 800a25e:	4611      	mov	r1, r2
 800a260:	4618      	mov	r0, r3
 800a262:	f7f7 ff07 	bl	8002074 <HAL_PCD_SetAddress>
 800a266:	4603      	mov	r3, r0
 800a268:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 f8b1 	bl	800a3d4 <USBD_Get_USB_Status>
 800a272:	4603      	mov	r3, r0
 800a274:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a276:	7bbb      	ldrb	r3, [r7, #14]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	607a      	str	r2, [r7, #4]
 800a28a:	603b      	str	r3, [r7, #0]
 800a28c:	460b      	mov	r3, r1
 800a28e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a29e:	7af9      	ldrb	r1, [r7, #11]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	f7f8 f80e 	bl	80022c4 <HAL_PCD_EP_Transmit>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 f890 	bl	800a3d4 <USBD_Get_USB_Status>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b086      	sub	sp, #24
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2e0:	7af9      	ldrb	r1, [r7, #11]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	f7f7 ff98 	bl	800221a <HAL_PCD_EP_Receive>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 f86f 	bl	800a3d4 <USBD_Get_USB_Status>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a316:	78fa      	ldrb	r2, [r7, #3]
 800a318:	4611      	mov	r1, r2
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7f7 ffba 	bl	8002294 <HAL_PCD_EP_GetRxCount>
 800a320:	4603      	mov	r3, r0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_PCDEx_LPM_Callback+0x18>
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d013      	beq.n	800a36a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a342:	e023      	b.n	800a38c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d007      	beq.n	800a35c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a34c:	f000 f83c 	bl	800a3c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a350:	4b10      	ldr	r3, [pc, #64]	; (800a394 <HAL_PCDEx_LPM_Callback+0x68>)
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	4a0f      	ldr	r2, [pc, #60]	; (800a394 <HAL_PCDEx_LPM_Callback+0x68>)
 800a356:	f023 0306 	bic.w	r3, r3, #6
 800a35a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe fc96 	bl	8008c94 <USBD_LL_Resume>
    break;
 800a368:	e010      	b.n	800a38c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fc79 	bl	8008c68 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a37e:	4b05      	ldr	r3, [pc, #20]	; (800a394 <HAL_PCDEx_LPM_Callback+0x68>)
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	4a04      	ldr	r2, [pc, #16]	; (800a394 <HAL_PCDEx_LPM_Callback+0x68>)
 800a384:	f043 0306 	orr.w	r3, r3, #6
 800a388:	6113      	str	r3, [r2, #16]
    break;
 800a38a:	bf00      	nop
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	e000ed00 	.word	0xe000ed00

0800a398 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3a0:	4b03      	ldr	r3, [pc, #12]	; (800a3b0 <USBD_static_malloc+0x18>)
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	2000142c 	.word	0x2000142c

0800a3b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]

}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a3cc:	f7f6 f986 	bl	80006dc <SystemClock_Config>
}
 800a3d0:	bf00      	nop
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d817      	bhi.n	800a418 <USBD_Get_USB_Status+0x44>
 800a3e8:	a201      	add	r2, pc, #4	; (adr r2, 800a3f0 <USBD_Get_USB_Status+0x1c>)
 800a3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ee:	bf00      	nop
 800a3f0:	0800a401 	.word	0x0800a401
 800a3f4:	0800a407 	.word	0x0800a407
 800a3f8:	0800a40d 	.word	0x0800a40d
 800a3fc:	0800a413 	.word	0x0800a413
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	73fb      	strb	r3, [r7, #15]
    break;
 800a404:	e00b      	b.n	800a41e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a406:	2303      	movs	r3, #3
 800a408:	73fb      	strb	r3, [r7, #15]
    break;
 800a40a:	e008      	b.n	800a41e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
    break;
 800a410:	e005      	b.n	800a41e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a412:	2303      	movs	r3, #3
 800a414:	73fb      	strb	r3, [r7, #15]
    break;
 800a416:	e002      	b.n	800a41e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	73fb      	strb	r3, [r7, #15]
    break;
 800a41c:	bf00      	nop
  }
  return usb_status;
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <__libc_init_array>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	4d0d      	ldr	r5, [pc, #52]	; (800a464 <__libc_init_array+0x38>)
 800a430:	4c0d      	ldr	r4, [pc, #52]	; (800a468 <__libc_init_array+0x3c>)
 800a432:	1b64      	subs	r4, r4, r5
 800a434:	10a4      	asrs	r4, r4, #2
 800a436:	2600      	movs	r6, #0
 800a438:	42a6      	cmp	r6, r4
 800a43a:	d109      	bne.n	800a450 <__libc_init_array+0x24>
 800a43c:	4d0b      	ldr	r5, [pc, #44]	; (800a46c <__libc_init_array+0x40>)
 800a43e:	4c0c      	ldr	r4, [pc, #48]	; (800a470 <__libc_init_array+0x44>)
 800a440:	f000 f82e 	bl	800a4a0 <_init>
 800a444:	1b64      	subs	r4, r4, r5
 800a446:	10a4      	asrs	r4, r4, #2
 800a448:	2600      	movs	r6, #0
 800a44a:	42a6      	cmp	r6, r4
 800a44c:	d105      	bne.n	800a45a <__libc_init_array+0x2e>
 800a44e:	bd70      	pop	{r4, r5, r6, pc}
 800a450:	f855 3b04 	ldr.w	r3, [r5], #4
 800a454:	4798      	blx	r3
 800a456:	3601      	adds	r6, #1
 800a458:	e7ee      	b.n	800a438 <__libc_init_array+0xc>
 800a45a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a45e:	4798      	blx	r3
 800a460:	3601      	adds	r6, #1
 800a462:	e7f2      	b.n	800a44a <__libc_init_array+0x1e>
 800a464:	0800a510 	.word	0x0800a510
 800a468:	0800a510 	.word	0x0800a510
 800a46c:	0800a510 	.word	0x0800a510
 800a470:	0800a514 	.word	0x0800a514

0800a474 <memcpy>:
 800a474:	440a      	add	r2, r1
 800a476:	4291      	cmp	r1, r2
 800a478:	f100 33ff 	add.w	r3, r0, #4294967295
 800a47c:	d100      	bne.n	800a480 <memcpy+0xc>
 800a47e:	4770      	bx	lr
 800a480:	b510      	push	{r4, lr}
 800a482:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a48a:	4291      	cmp	r1, r2
 800a48c:	d1f9      	bne.n	800a482 <memcpy+0xe>
 800a48e:	bd10      	pop	{r4, pc}

0800a490 <memset>:
 800a490:	4402      	add	r2, r0
 800a492:	4603      	mov	r3, r0
 800a494:	4293      	cmp	r3, r2
 800a496:	d100      	bne.n	800a49a <memset+0xa>
 800a498:	4770      	bx	lr
 800a49a:	f803 1b01 	strb.w	r1, [r3], #1
 800a49e:	e7f9      	b.n	800a494 <memset+0x4>

0800a4a0 <_init>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	bf00      	nop
 800a4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a6:	bc08      	pop	{r3}
 800a4a8:	469e      	mov	lr, r3
 800a4aa:	4770      	bx	lr

0800a4ac <_fini>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	bf00      	nop
 800a4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b2:	bc08      	pop	{r3}
 800a4b4:	469e      	mov	lr, r3
 800a4b6:	4770      	bx	lr
