
gibibot_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2a8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a480  0800a480  0001a480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4d8  0800a4d8  000201c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4d8  0800a4d8  000201c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4d8  0800a4d8  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4dc  0800a4dc  0001a4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0800a4e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001488  200001c4  0800a6a4  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000164c  0800a6a4  0002164c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016763  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a4  00000000  00000000  00036957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c3f  00000000  00000000  0003c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166b7  00000000  00000000  0005d087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6546  00000000  00000000  0007373e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139c84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005060  00000000  00000000  00139cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c4 	.word	0x200001c4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a468 	.word	0x0800a468

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c8 	.word	0x200001c8
 8000214:	0800a468 	.word	0x0800a468

08000218 <CDC_On_Receive>:
		.throwerGrab = 4800,
		.delimiter = 0};

volatile uint8_t isCommandReceived = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0e      	cmp	r3, #14
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command));
 800022a:	220e      	movs	r2, #14
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f00a f904 	bl	800a43c <memcpy>

    if (command.delimiter == 0xAAAA) {
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	899b      	ldrh	r3, [r3, #12]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000030 	.word	0x20000030
 8000254:	2000048e 	.word	0x2000048e

08000258 <ClampValue>:

int32_t ClampValue(int32_t val, int32_t min, int32_t max) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (val < min) {
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	da01      	bge.n	8000270 <ClampValue+0x18>
		return min;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	e006      	b.n	800027e <ClampValue+0x26>
	}
	if (val > max) {
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	dd01      	ble.n	800027c <ClampValue+0x24>
		return max;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	e000      	b.n	800027e <ClampValue+0x26>
	}
	return val;
 800027c:	68fb      	ldr	r3, [r7, #12]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr

0800028a <ClampValue2>:

uint16_t ClampValue2(uint16_t val, uint16_t min, uint16_t max) {
 800028a:	b480      	push	{r7}
 800028c:	b083      	sub	sp, #12
 800028e:	af00      	add	r7, sp, #0
 8000290:	4603      	mov	r3, r0
 8000292:	80fb      	strh	r3, [r7, #6]
 8000294:	460b      	mov	r3, r1
 8000296:	80bb      	strh	r3, [r7, #4]
 8000298:	4613      	mov	r3, r2
 800029a:	807b      	strh	r3, [r7, #2]
	if (val < min) {
 800029c:	88fa      	ldrh	r2, [r7, #6]
 800029e:	88bb      	ldrh	r3, [r7, #4]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d201      	bcs.n	80002a8 <ClampValue2+0x1e>
		return min;
 80002a4:	88bb      	ldrh	r3, [r7, #4]
 80002a6:	e006      	b.n	80002b6 <ClampValue2+0x2c>
	}
	if (val > max) {
 80002a8:	88fa      	ldrh	r2, [r7, #6]
 80002aa:	887b      	ldrh	r3, [r7, #2]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d901      	bls.n	80002b4 <ClampValue2+0x2a>
		return max;
 80002b0:	887b      	ldrh	r3, [r7, #2]
 80002b2:	e000      	b.n	80002b6 <ClampValue2+0x2c>
	}
	return val;
 80002b4:	88fb      	ldrh	r3, [r7, #6]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
	...

080002c4 <ControlMotor>:

int32_t ControlMotor(MotorControl* motorControl, int16_t position, int16_t set_speed) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	807b      	strh	r3, [r7, #2]
 80002d0:	4613      	mov	r3, r2
 80002d2:	803b      	strh	r3, [r7, #0]
	motorControl->positionChange = (position-motorControl->position); //Calculates the position change
 80002d4:	887a      	ldrh	r2, [r7, #2]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	819a      	strh	r2, [r3, #12]
	int16_t error = (set_speed-motorControl->positionChange); //Calculates the error
 80002e8:	883a      	ldrh	r2, [r7, #0]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	1ad3      	subs	r3, r2, r3
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	81fb      	strh	r3, [r7, #14]
	motorControl->integral+=error;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000300:	441a      	add	r2, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	609a      	str	r2, [r3, #8]
	motorControl->integral=ClampValue(motorControl->integral, -65535/motorControl->gainI, 65535/motorControl->gainI); //Adds the errors together and clamps the value
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	6898      	ldr	r0, [r3, #8]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000310:	461a      	mov	r2, r3
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <ControlMotor+0xb4>)
 8000314:	fb93 f1f2 	sdiv	r1, r3, r2
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800031e:	461a      	mov	r2, r3
 8000320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000324:	fb93 f3f2 	sdiv	r3, r3, r2
 8000328:	461a      	mov	r2, r3
 800032a:	f7ff ff95 	bl	8000258 <ClampValue>
 800032e:	4602      	mov	r2, r0
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	609a      	str	r2, [r3, #8]
	motorControl->position = position; //Previous position is now the current position
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	887a      	ldrh	r2, [r7, #2]
 8000338:	81da      	strh	r2, [r3, #14]
	return (error*motorControl->gainP + motorControl->gainI*motorControl->integral + motorControl->positionChange*motorControl->gainD);
 800033a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000344:	fb03 f202 	mul.w	r2, r3, r2
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800034e:	4619      	mov	r1, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	fb01 f303 	mul.w	r3, r1, r3
 8000358:	441a      	add	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000360:	4619      	mov	r1, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000368:	fb01 f303 	mul.w	r3, r1, r3
 800036c:	4413      	add	r3, r2
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	ffff0001 	.word	0xffff0001

0800037c <EnableMotorDrivers>:

void EnableMotorDrivers() {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2102      	movs	r1, #2
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f001 fc11 	bl	8001bb0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 350; i++) {
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	e003      	b.n	800039c <EnableMotorDrivers+0x20>
	  __asm("nop");
 8000394:	bf00      	nop
	for (int i = 0; i < 350; i++) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80003a2:	dbf7      	blt.n	8000394 <EnableMotorDrivers+0x18>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2102      	movs	r1, #2
 80003a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ac:	f001 fc00 	bl	8001bb0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 350; i++) {
 80003b0:	2300      	movs	r3, #0
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	e003      	b.n	80003be <EnableMotorDrivers+0x42>
	  __asm("nop");
 80003b6:	bf00      	nop
	for (int i = 0; i < 350; i++) {
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80003c4:	dbf7      	blt.n	80003b6 <EnableMotorDrivers+0x3a>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2102      	movs	r1, #2
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ce:	f001 fbef 	bl	8001bb0 <HAL_GPIO_WritePin>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <UpdateServosAndThrower>:

void UpdateServosAndThrower() {
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	//Start thrower speed < 3200
	//Thrower speed between 3200 and 6400
	TIM15->CCR2 = command.throwerSpeed+3150;
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <UpdateServosAndThrower+0x48>)
 80003e2:	88db      	ldrh	r3, [r3, #6]
 80003e4:	f603 424e 	addw	r2, r3, #3150	; 0xc4e
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <UpdateServosAndThrower+0x4c>)
 80003ea:	639a      	str	r2, [r3, #56]	; 0x38
	//Thrower angle
	TIM8->CCR2 = ClampValue2(command.throwerAngle, 2700, 6900);
 80003ec:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <UpdateServosAndThrower+0x48>)
 80003ee:	891b      	ldrh	r3, [r3, #8]
 80003f0:	f641 22f4 	movw	r2, #6900	; 0x1af4
 80003f4:	f640 218c 	movw	r1, #2700	; 0xa8c
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff46 	bl	800028a <ClampValue2>
 80003fe:	4603      	mov	r3, r0
 8000400:	461a      	mov	r2, r3
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <UpdateServosAndThrower+0x50>)
 8000404:	639a      	str	r2, [r3, #56]	; 0x38
	//Grabber
	TIM16->CCR1 = ClampValue2(command.throwerGrab, 2700, 6900);
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <UpdateServosAndThrower+0x48>)
 8000408:	895b      	ldrh	r3, [r3, #10]
 800040a:	f641 22f4 	movw	r2, #6900	; 0x1af4
 800040e:	f640 218c 	movw	r1, #2700	; 0xa8c
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff39 	bl	800028a <ClampValue2>
 8000418:	4603      	mov	r3, r0
 800041a:	461a      	mov	r2, r3
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <UpdateServosAndThrower+0x54>)
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000030 	.word	0x20000030
 8000428:	40014000 	.word	0x40014000
 800042c:	40013400 	.word	0x40013400
 8000430:	40014400 	.word	0x40014400

08000434 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	//Reading the motor encoders and calculating motor pwm
	int32_t motor1PWM = ClampValue(ControlMotor(&motorControl1, (int16_t)TIM2->CNT, command.speed1), -65535, 65535);
 800043c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000442:	b21b      	sxth	r3, r3
 8000444:	4a3d      	ldr	r2, [pc, #244]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000446:	f9b2 2000 	ldrsh.w	r2, [r2]
 800044a:	4619      	mov	r1, r3
 800044c:	483c      	ldr	r0, [pc, #240]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800044e:	f7ff ff39 	bl	80002c4 <ControlMotor>
 8000452:	4603      	mov	r3, r0
 8000454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000458:	493a      	ldr	r1, [pc, #232]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff fefc 	bl	8000258 <ClampValue>
 8000460:	6178      	str	r0, [r7, #20]
	//Direction M1
	if (motor1PWM < 0) {
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	2b00      	cmp	r3, #0
 8000466:	da07      	bge.n	8000478 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f001 fb9d 	bl	8001bb0 <HAL_GPIO_WritePin>
 8000476:	e006      	b.n	8000486 <HAL_TIM_PeriodElapsedCallback+0x52>
	} else {
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f001 fb95 	bl	8001bb0 <HAL_GPIO_WritePin>
	}
	int32_t motor2PWM = ClampValue(ControlMotor(&motorControl2, (int16_t)TIM3->CNT, command.speed2), -65535, 65535);
 8000486:	4b30      	ldr	r3, [pc, #192]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048a:	b21b      	sxth	r3, r3
 800048c:	4a2b      	ldr	r2, [pc, #172]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800048e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000492:	4619      	mov	r1, r3
 8000494:	482d      	ldr	r0, [pc, #180]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000496:	f7ff ff15 	bl	80002c4 <ControlMotor>
 800049a:	4603      	mov	r3, r0
 800049c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004a0:	4928      	ldr	r1, [pc, #160]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fed8 	bl	8000258 <ClampValue>
 80004a8:	6138      	str	r0, [r7, #16]
	//Direction M2
	if (motor2PWM < 0) {
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da05      	bge.n	80004bc <HAL_TIM_PeriodElapsedCallback+0x88>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2101      	movs	r1, #1
 80004b4:	4826      	ldr	r0, [pc, #152]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80004b6:	f001 fb7b 	bl	8001bb0 <HAL_GPIO_WritePin>
 80004ba:	e004      	b.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x92>
	} else {
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2101      	movs	r1, #1
 80004c0:	4823      	ldr	r0, [pc, #140]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80004c2:	f001 fb75 	bl	8001bb0 <HAL_GPIO_WritePin>
	}
	int32_t motor3PWM = ClampValue(ControlMotor(&motorControl3, (int16_t)TIM4->CNT, command.speed3), -65535, 65535);
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80004c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ca:	b21b      	sxth	r3, r3
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80004ce:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4820      	ldr	r0, [pc, #128]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80004d6:	f7ff fef5 	bl	80002c4 <ControlMotor>
 80004da:	4603      	mov	r3, r0
 80004dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e0:	4918      	ldr	r1, [pc, #96]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff feb8 	bl	8000258 <ClampValue>
 80004e8:	60f8      	str	r0, [r7, #12]
	//Direction M3
	if (motor3PWM < 0) {
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	da06      	bge.n	80004fe <HAL_TIM_PeriodElapsedCallback+0xca>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2104      	movs	r1, #4
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f001 fb5a 	bl	8001bb0 <HAL_GPIO_WritePin>
 80004fc:	e005      	b.n	800050a <HAL_TIM_PeriodElapsedCallback+0xd6>
	} else {
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2104      	movs	r1, #4
 8000502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000506:	f001 fb53 	bl	8001bb0 <HAL_GPIO_WritePin>
	}
	//Changing motor pwm
	TIM1->CCR2 = abs(motor1PWM);
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000510:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR1 = abs(motor2PWM);
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800051e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
	TIM17->CCR1 = abs(motor3PWM);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800052c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000030 	.word	0x20000030
 8000540:	20000000 	.word	0x20000000
 8000544:	ffff0001 	.word	0xffff0001
 8000548:	40000400 	.word	0x40000400
 800054c:	20000010 	.word	0x20000010
 8000550:	48000400 	.word	0x48000400
 8000554:	40000800 	.word	0x40000800
 8000558:	20000020 	.word	0x20000020
 800055c:	40012c00 	.word	0x40012c00
 8000560:	40014800 	.word	0x40014800

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f001 f806 	bl	800157a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f899 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 fccb 	bl	8000f0c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000576:	f000 f8e3 	bl	8000740 <MX_TIM1_Init>
  MX_TIM2_Init();
 800057a:	f000 f981 	bl	8000880 <MX_TIM2_Init>
  MX_TIM3_Init();
 800057e:	f000 f9d3 	bl	8000928 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000582:	f000 fa27 	bl	80009d4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000586:	f000 fb47 	bl	8000c18 <MX_TIM15_Init>
  MX_TIM16_Init();
 800058a:	f000 fbcb 	bl	8000d24 <MX_TIM16_Init>
  MX_TIM17_Init();
 800058e:	f000 fc43 	bl	8000e18 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000592:	f009 fa1f 	bl	80099d4 <MX_USB_Device_Init>
  MX_TIM8_Init();
 8000596:	f000 faab 	bl	8000af0 <MX_TIM8_Init>
  MX_TIM6_Init();
 800059a:	f000 fa71 	bl	8000a80 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  Feedback feedback = {
 800059e:	2300      	movs	r3, #0
 80005a0:	803b      	strh	r3, [r7, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	807b      	strh	r3, [r7, #2]
 80005a6:	2300      	movs	r3, #0
 80005a8:	80bb      	strh	r3, [r7, #4]
 80005aa:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80005ae:	80fb      	strh	r3, [r7, #6]
        .speed3 = 0,
        .delimiter = 0xAAAA
    };

  //ECODERS
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2); //M1 encoder
 80005b0:	2104      	movs	r1, #4
 80005b2:	482d      	ldr	r0, [pc, #180]	; (8000668 <main+0x104>)
 80005b4:	f004 fa98 	bl	8004ae8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); //M2 encoder
 80005b8:	2104      	movs	r1, #4
 80005ba:	482c      	ldr	r0, [pc, #176]	; (800066c <main+0x108>)
 80005bc:	f004 fa94 	bl	8004ae8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); //M3 encoder
 80005c0:	2104      	movs	r1, #4
 80005c2:	482b      	ldr	r0, [pc, #172]	; (8000670 <main+0x10c>)
 80005c4:	f004 fa90 	bl	8004ae8 <HAL_TIM_Encoder_Start>
  //PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //M2 PWM
 80005c8:	2100      	movs	r1, #0
 80005ca:	482a      	ldr	r0, [pc, #168]	; (8000674 <main+0x110>)
 80005cc:	f004 f8e6 	bl	800479c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);    //M1 PWM
 80005d0:	2104      	movs	r1, #4
 80005d2:	4828      	ldr	r0, [pc, #160]	; (8000674 <main+0x110>)
 80005d4:	f004 f8e2 	bl	800479c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);   //M3 PWM
 80005d8:	2100      	movs	r1, #0
 80005da:	4827      	ldr	r0, [pc, #156]	; (8000678 <main+0x114>)
 80005dc:	f004 f8de 	bl	800479c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);   //THROWER PWM
 80005e0:	2104      	movs	r1, #4
 80005e2:	4826      	ldr	r0, [pc, #152]	; (800067c <main+0x118>)
 80005e4:	f004 f8da 	bl	800479c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);    //SERVO1
 80005e8:	2104      	movs	r1, #4
 80005ea:	4825      	ldr	r0, [pc, #148]	; (8000680 <main+0x11c>)
 80005ec:	f004 f8d6 	bl	800479c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);   //SERVO2
 80005f0:	2100      	movs	r1, #0
 80005f2:	4824      	ldr	r0, [pc, #144]	; (8000684 <main+0x120>)
 80005f4:	f004 f8d2 	bl	800479c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6); //Timer for motor speed
 80005f8:	4823      	ldr	r0, [pc, #140]	; (8000688 <main+0x124>)
 80005fa:	f004 f80d 	bl	8004618 <HAL_TIM_Base_Start_IT>

  //Wakes up the thrower
  TIM15->CCR2 = 3150;
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <main+0x128>)
 8000600:	f640 424e 	movw	r2, #3150	; 0xc4e
 8000604:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	UpdateServosAndThrower();
 8000606:	f7ff fee9 	bl	80003dc <UpdateServosAndThrower>
	IRsensor = HAL_GPIO_ReadPin(IR_SENSOR_GPIO_Port, IR_SENSOR_Pin);
 800060a:	2101      	movs	r1, #1
 800060c:	4820      	ldr	r0, [pc, #128]	; (8000690 <main+0x12c>)
 800060e:	f001 fab7 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	b21a      	sxth	r2, r3
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <main+0x130>)
 8000618:	801a      	strh	r2, [r3, #0]
	if (IRsensor == 0 && sensorSent == 1) {
		feedback.ballDetected = 0;
		CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback));
		sensorSent = 0;
	}*/
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, IRsensor);
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <main+0x130>)
 800061c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	2101      	movs	r1, #1
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f001 fac1 	bl	8001bb0 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (isCommandReceived) {
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <main+0x134>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0e6      	beq.n	8000606 <main+0xa2>
		isCommandReceived = 0;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <main+0x134>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
		EnableMotorDrivers(); //Sends the nsleep signal to motor drivers
 800063e:	f7ff fe9d 	bl	800037c <EnableMotorDrivers>
		//feedback.speed1 = motorControl1.positionChange;
		feedback.ballDetected = IRsensor;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <main+0x130>)
 8000644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000648:	803b      	strh	r3, [r7, #0]
		feedback.speed2 = motorControl2.positionChange;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <main+0x138>)
 800064c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000650:	807b      	strh	r3, [r7, #2]
		feedback.speed3 = motorControl3.positionChange;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <main+0x13c>)
 8000654:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000658:	80bb      	strh	r3, [r7, #4]

		CDC_Transmit_FS((uint8_t*)&feedback, (uint16_t)sizeof(feedback));
 800065a:	463b      	mov	r3, r7
 800065c:	2108      	movs	r1, #8
 800065e:	4618      	mov	r0, r3
 8000660:	f009 fa7a 	bl	8009b58 <CDC_Transmit_FS>
	UpdateServosAndThrower();
 8000664:	e7cf      	b.n	8000606 <main+0xa2>
 8000666:	bf00      	nop
 8000668:	2000022c 	.word	0x2000022c
 800066c:	20000278 	.word	0x20000278
 8000670:	200002c4 	.word	0x200002c4
 8000674:	200001e0 	.word	0x200001e0
 8000678:	20000440 	.word	0x20000440
 800067c:	200003a8 	.word	0x200003a8
 8000680:	2000035c 	.word	0x2000035c
 8000684:	200003f4 	.word	0x200003f4
 8000688:	20000310 	.word	0x20000310
 800068c:	40014000 	.word	0x40014000
 8000690:	48001400 	.word	0x48001400
 8000694:	2000048c 	.word	0x2000048c
 8000698:	2000048e 	.word	0x2000048e
 800069c:	20000010 	.word	0x20000010
 80006a0:	20000020 	.word	0x20000020

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	2238      	movs	r2, #56	; 0x38
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f009 fed0 	bl	800a458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f002 ffbe 	bl	8003648 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80006cc:	2322      	movs	r3, #34	; 0x22
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	2340      	movs	r3, #64	; 0x40
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006da:	2301      	movs	r3, #1
 80006dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006ea:	2314      	movs	r3, #20
 80006ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0318 	add.w	r3, r7, #24
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 f846 	bl	8003790 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800070a:	f000 fc6f 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2303      	movs	r3, #3
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2104      	movs	r1, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fb4a 	bl	8003dc0 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000732:	f000 fc5b 	bl	8000fec <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b098      	sub	sp, #96	; 0x60
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000752:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2234      	movs	r2, #52	; 0x34
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f009 fe73 	bl	800a458 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000772:	4b41      	ldr	r3, [pc, #260]	; (8000878 <MX_TIM1_Init+0x138>)
 8000774:	4a41      	ldr	r2, [pc, #260]	; (800087c <MX_TIM1_Init+0x13c>)
 8000776:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <MX_TIM1_Init+0x138>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <MX_TIM1_Init+0x138>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000784:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <MX_TIM1_Init+0x138>)
 8000786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800078a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <MX_TIM1_Init+0x138>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000792:	4b39      	ldr	r3, [pc, #228]	; (8000878 <MX_TIM1_Init+0x138>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <MX_TIM1_Init+0x138>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079e:	4836      	ldr	r0, [pc, #216]	; (8000878 <MX_TIM1_Init+0x138>)
 80007a0:	f003 ffa4 	bl	80046ec <HAL_TIM_PWM_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 fc1f 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007be:	4619      	mov	r1, r3
 80007c0:	482d      	ldr	r0, [pc, #180]	; (8000878 <MX_TIM1_Init+0x138>)
 80007c2:	f005 f887 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007cc:	f000 fc0e 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d0:	2360      	movs	r3, #96	; 0x60
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d8:	2300      	movs	r3, #0
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007dc:	2300      	movs	r3, #0
 80007de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4820      	ldr	r0, [pc, #128]	; (8000878 <MX_TIM1_Init+0x138>)
 80007f6:	f004 fb85 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000800:	f000 fbf4 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000804:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000808:	2204      	movs	r2, #4
 800080a:	4619      	mov	r1, r3
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <MX_TIM1_Init+0x138>)
 800080e:	f004 fb79 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000818:	f000 fbe8 	bl	8000fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <MX_TIM1_Init+0x138>)
 800085a:	f005 f8bd 	bl	80059d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000864:	f000 fbc2 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <MX_TIM1_Init+0x138>)
 800086a:	f000 fd3f 	bl	80012ec <HAL_TIM_MspPostInit>

}
 800086e:	bf00      	nop
 8000870:	3760      	adds	r7, #96	; 0x60
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001e0 	.word	0x200001e0
 800087c:	40012c00 	.word	0x40012c00

08000880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	2224      	movs	r2, #36	; 0x24
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f009 fde2 	bl	800a458 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008c6:	2303      	movs	r3, #3
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008de:	2301      	movs	r3, #1
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <MX_TIM2_Init+0xa4>)
 80008f2:	f004 f853 	bl	800499c <HAL_TIM_Encoder_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80008fc:	f000 fb76 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_TIM2_Init+0xa4>)
 800090e:	f004 ffe1 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000918:	f000 fb68 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000022c 	.word	0x2000022c

08000928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2224      	movs	r2, #36	; 0x24
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f009 fd8e 	bl	800a458 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_TIM3_Init+0xa4>)
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <MX_TIM3_Init+0xa8>)
 800094a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_TIM3_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_TIM3_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_TIM3_Init+0xa4>)
 800095a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_TIM3_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_TIM3_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800096c:	2303      	movs	r3, #3
 800096e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000984:	2301      	movs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_TIM3_Init+0xa4>)
 8000998:	f004 f800 	bl	800499c <HAL_TIM_Encoder_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80009a2:	f000 fb23 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_TIM3_Init+0xa4>)
 80009b4:	f004 ff8e 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80009be:	f000 fb15 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	; 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000278 	.word	0x20000278
 80009d0:	40000400 	.word	0x40000400

080009d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2224      	movs	r2, #36	; 0x24
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f009 fd38 	bl	800a458 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_TIM4_Init+0xa4>)
 80009f4:	4a21      	ldr	r2, [pc, #132]	; (8000a7c <MX_TIM4_Init+0xa8>)
 80009f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_TIM4_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_TIM4_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_TIM4_Init+0xa4>)
 8000a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_TIM4_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_TIM4_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a20:	2301      	movs	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a30:	2301      	movs	r3, #1
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_TIM4_Init+0xa4>)
 8000a44:	f003 ffaa 	bl	800499c <HAL_TIM_Encoder_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a4e:	f000 facd 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_TIM4_Init+0xa4>)
 8000a60:	f004 ff38 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a6a:	f000 fabf 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200002c4 	.word	0x200002c4
 8000a7c:	40000800 	.word	0x40000800

08000a80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_TIM6_Init+0x68>)
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <MX_TIM6_Init+0x6c>)
 8000a94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_TIM6_Init+0x68>)
 8000a98:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a9c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_TIM6_Init+0x68>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_TIM6_Init+0x68>)
 8000aa6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aaa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_TIM6_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_TIM6_Init+0x68>)
 8000ab4:	f003 fd58 	bl	8004568 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000abe:	f000 fa95 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_TIM6_Init+0x68>)
 8000ad0:	f004 ff00 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000ada:	f000 fa87 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000310 	.word	0x20000310
 8000aec:	40001000 	.word	0x40001000

08000af0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b098      	sub	sp, #96	; 0x60
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2234      	movs	r2, #52	; 0x34
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f009 fc9b 	bl	800a458 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b22:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000b24:	4a3b      	ldr	r2, [pc, #236]	; (8000c14 <MX_TIM8_Init+0x124>)
 8000b26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 49;
 8000b28:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000b2a:	2231      	movs	r2, #49	; 0x31
 8000b2c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000b36:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b4e:	4830      	ldr	r0, [pc, #192]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000b50:	f003 fdcc 	bl	80046ec <HAL_TIM_PWM_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 fa47 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4827      	ldr	r0, [pc, #156]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000b72:	f004 feaf 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000b7c:	f000 fa36 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b80:	2360      	movs	r3, #96	; 0x60
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481a      	ldr	r0, [pc, #104]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000ba6:	f004 f9ad 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000bb0:	f000 fa1c 	bl	8000fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4807      	ldr	r0, [pc, #28]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000bf2:	f004 fef1 	bl	80059d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000bfc:	f000 f9f6 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <MX_TIM8_Init+0x120>)
 8000c02:	f000 fb73 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000c06:	bf00      	nop
 8000c08:	3760      	adds	r7, #96	; 0x60
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000035c 	.word	0x2000035c
 8000c14:	40013400 	.word	0x40013400

08000c18 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b098      	sub	sp, #96	; 0x60
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
 8000c3a:	615a      	str	r2, [r3, #20]
 8000c3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2234      	movs	r2, #52	; 0x34
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f009 fc07 	bl	800a458 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000c4c:	4a34      	ldr	r2, [pc, #208]	; (8000d20 <MX_TIM15_Init+0x108>)
 8000c4e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 49;
 8000c50:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000c52:	2231      	movs	r2, #49	; 0x31
 8000c54:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000c5e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c62:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c64:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000c76:	4829      	ldr	r0, [pc, #164]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000c78:	f003 fd38 	bl	80046ec <HAL_TIM_PWM_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000c82:	f000 f9b3 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c92:	4619      	mov	r1, r3
 8000c94:	4821      	ldr	r0, [pc, #132]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000c96:	f004 fe1d 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000ca0:	f000 f9a4 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca4:	2360      	movs	r3, #96	; 0x60
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cac:	2300      	movs	r3, #0
 8000cae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000cca:	f004 f91b 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000cd4:	f000 f98a 	bl	8000fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000d00:	f004 fe6a 	bl	80059d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000d0a:	f000 f96f 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <MX_TIM15_Init+0x104>)
 8000d10:	f000 faec 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000d14:	bf00      	nop
 8000d16:	3760      	adds	r7, #96	; 0x60
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200003a8 	.word	0x200003a8
 8000d20:	40014000 	.word	0x40014000

08000d24 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2234      	movs	r2, #52	; 0x34
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f009 fb87 	bl	800a458 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000d4c:	4a31      	ldr	r2, [pc, #196]	; (8000e14 <MX_TIM16_Init+0xf0>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 49;
 8000d50:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000d52:	2231      	movs	r2, #49	; 0x31
 8000d54:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63999;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000d5e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d62:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d76:	4826      	ldr	r0, [pc, #152]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000d78:	f003 fbf6 	bl	8004568 <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000d82:	f000 f933 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000d86:	4822      	ldr	r0, [pc, #136]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000d88:	f003 fcb0 	bl	80046ec <HAL_TIM_PWM_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000d92:	f000 f92b 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d96:	2360      	movs	r3, #96	; 0x60
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da2:	2300      	movs	r3, #0
 8000da4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	4815      	ldr	r0, [pc, #84]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000dbc:	f004 f8a2 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000dc6:	f000 f911 	bl	8000fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000df2:	f004 fdf1 	bl	80059d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000dfc:	f000 f8f6 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <MX_TIM16_Init+0xec>)
 8000e02:	f000 fa73 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000e06:	bf00      	nop
 8000e08:	3750      	adds	r7, #80	; 0x50
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200003f4 	.word	0x200003f4
 8000e14:	40014400 	.word	0x40014400

08000e18 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	; 0x50
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2234      	movs	r2, #52	; 0x34
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f009 fb0d 	bl	800a458 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000e40:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <MX_TIM17_Init+0xf0>)
 8000e42:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000e44:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000e50:	4b2c      	ldr	r3, [pc, #176]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e56:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e6a:	4826      	ldr	r0, [pc, #152]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000e6c:	f003 fb7c 	bl	8004568 <HAL_TIM_Base_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000e76:	f000 f8b9 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000e7a:	4822      	ldr	r0, [pc, #136]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000e7c:	f003 fc36 	bl	80046ec <HAL_TIM_PWM_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000e86:	f000 f8b1 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8a:	2360      	movs	r3, #96	; 0x60
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e92:	2300      	movs	r3, #0
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e96:	2300      	movs	r3, #0
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4815      	ldr	r0, [pc, #84]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000eb0:	f004 f828 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000eba:	f000 f897 	bl	8000fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000ee6:	f004 fd77 	bl	80059d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000ef0:	f000 f87c 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <MX_TIM17_Init+0xec>)
 8000ef6:	f000 f9f9 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000efa:	bf00      	nop
 8000efc:	3750      	adds	r7, #80	; 0x50
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000440 	.word	0x20000440
 8000f08:	40014800 	.word	0x40014800

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a2e      	ldr	r2, [pc, #184]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a28      	ldr	r2, [pc, #160]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|GPIO_PIN_1|M3_DIR_Pin|M1_DIR_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f240 4107 	movw	r1, #1031	; 0x407
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f000 fe1c 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4819      	ldr	r0, [pc, #100]	; (8000fe4 <MX_GPIO_Init+0xd8>)
 8000f7e:	f000 fe17 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IR_SENSOR_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_Pin;
 8000f82:	2301      	movs	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <MX_GPIO_Init+0xdc>)
 8000f96:	f000 fc71 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_Pin PA1 M3_DIR_Pin M1_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|GPIO_PIN_1|M3_DIR_Pin|M1_DIR_Pin;
 8000f9a:	f240 4307 	movw	r3, #1031	; 0x407
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f000 fc61 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_GPIO_Init+0xd8>)
 8000fd2:	f000 fc53 	bl	800187c <HAL_GPIO_Init>

}
 8000fd6:	bf00      	nop
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	48001400 	.word	0x48001400

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>
	...

08000ff8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_MspInit+0x44>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_MspInit+0x44>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6613      	str	r3, [r2, #96]	; 0x60
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_MspInit+0x44>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_MspInit+0x44>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_MspInit+0x44>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	6593      	str	r3, [r2, #88]	; 0x58
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_MspInit+0x44>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_TIM_PWM_MspInit+0x80>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10c      	bne.n	800106c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_TIM_PWM_MspInit+0x84>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <HAL_TIM_PWM_MspInit+0x84>)
 8001058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800105c:	6613      	str	r3, [r2, #96]	; 0x60
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_TIM_PWM_MspInit+0x84>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800106a:	e022      	b.n	80010b2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <HAL_TIM_PWM_MspInit+0x88>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10c      	bne.n	8001090 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_TIM_PWM_MspInit+0x84>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <HAL_TIM_PWM_MspInit+0x84>)
 800107c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_TIM_PWM_MspInit+0x84>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
}
 800108e:	e010      	b.n	80010b2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_TIM_PWM_MspInit+0x8c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d10b      	bne.n	80010b2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_TIM_PWM_MspInit+0x84>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_TIM_PWM_MspInit+0x84>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6613      	str	r3, [r2, #96]	; 0x60
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <HAL_TIM_PWM_MspInit+0x84>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
}
 80010b2:	bf00      	nop
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40013400 	.word	0x40013400
 80010cc:	40014000 	.word	0x40014000

080010d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d146      	bne.n	8001180 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	4b53      	ldr	r3, [pc, #332]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	4a52      	ldr	r2, [pc, #328]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6593      	str	r3, [r2, #88]	; 0x58
 80010fe:	4b50      	ldr	r3, [pc, #320]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b47      	ldr	r3, [pc, #284]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a46      	ldr	r2, [pc, #280]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b44      	ldr	r3, [pc, #272]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC1_M1_Pin;
 800113a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800114c:	2301      	movs	r3, #1
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC1_M1_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f000 fb8f 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC2_M1_Pin;
 800115e:	2308      	movs	r3, #8
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800116e:	2301      	movs	r3, #1
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC2_M1_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	4832      	ldr	r0, [pc, #200]	; (8001244 <HAL_TIM_Encoder_MspInit+0x174>)
 800117a:	f000 fb7f 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800117e:	e05a      	b.n	8001236 <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a30      	ldr	r2, [pc, #192]	; (8001248 <HAL_TIM_Encoder_MspInit+0x178>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d128      	bne.n	80011dc <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	4a2c      	ldr	r2, [pc, #176]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6593      	str	r3, [r2, #88]	; 0x58
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1_M2_Pin|ENC2_M2_Pin;
 80011ba:	2330      	movs	r3, #48	; 0x30
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ca:	2302      	movs	r3, #2
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	4619      	mov	r1, r3
 80011d4:	481b      	ldr	r0, [pc, #108]	; (8001244 <HAL_TIM_Encoder_MspInit+0x174>)
 80011d6:	f000 fb51 	bl	800187c <HAL_GPIO_Init>
}
 80011da:	e02c      	b.n	8001236 <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM4)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1a      	ldr	r2, [pc, #104]	; (800124c <HAL_TIM_Encoder_MspInit+0x17c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d127      	bne.n	8001236 <HAL_TIM_Encoder_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_TIM_Encoder_MspInit+0x170>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1_M3_Pin|ENC2_M3_Pin;
 8001216:	23c0      	movs	r3, #192	; 0xc0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001226:	2302      	movs	r3, #2
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <HAL_TIM_Encoder_MspInit+0x174>)
 8001232:	f000 fb23 	bl	800187c <HAL_GPIO_Init>
}
 8001236:	bf00      	nop
 8001238:	3738      	adds	r7, #56	; 0x38
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	48000400 	.word	0x48000400
 8001248:	40000400 	.word	0x40000400
 800124c:	40000800 	.word	0x40000800

08001250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_TIM_Base_MspInit+0x8c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d114      	bne.n	800128c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_TIM_Base_MspInit+0x90>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_TIM_Base_MspInit+0x90>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6593      	str	r3, [r2, #88]	; 0x58
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_TIM_Base_MspInit+0x90>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2036      	movs	r0, #54	; 0x36
 8001280:	f000 fac7 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001284:	2036      	movs	r0, #54	; 0x36
 8001286:	f000 fade 	bl	8001846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800128a:	e022      	b.n	80012d2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_TIM_Base_MspInit+0x94>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d10c      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_TIM_Base_MspInit+0x90>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_TIM_Base_MspInit+0x90>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	6613      	str	r3, [r2, #96]	; 0x60
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_TIM_Base_MspInit+0x90>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
}
 80012ae:	e010      	b.n	80012d2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <HAL_TIM_Base_MspInit+0x98>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10b      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_TIM_Base_MspInit+0x90>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_TIM_Base_MspInit+0x90>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6613      	str	r3, [r2, #96]	; 0x60
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_TIM_Base_MspInit+0x90>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40001000 	.word	0x40001000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40014400 	.word	0x40014400
 80012e8:	40014800 	.word	0x40014800

080012ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a58      	ldr	r2, [pc, #352]	; (800146c <HAL_TIM_MspPostInit+0x180>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d11e      	bne.n	800134c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b58      	ldr	r3, [pc, #352]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a57      	ldr	r2, [pc, #348]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M2_PWM_Pin|M1_PWM_Pin;
 8001326:	f44f 7340 	mov.w	r3, #768	; 0x300
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001338:	2306      	movs	r3, #6
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f000 fa99 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800134a:	e08a      	b.n	8001462 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM8)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a48      	ldr	r2, [pc, #288]	; (8001474 <HAL_TIM_MspPostInit+0x188>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d11d      	bne.n	8001392 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b46      	ldr	r3, [pc, #280]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a45      	ldr	r2, [pc, #276]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b43      	ldr	r3, [pc, #268]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO1_PWM_Pin;
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001380:	230a      	movs	r3, #10
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	483b      	ldr	r0, [pc, #236]	; (8001478 <HAL_TIM_MspPostInit+0x18c>)
 800138c:	f000 fa76 	bl	800187c <HAL_GPIO_Init>
}
 8001390:	e067      	b.n	8001462 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM15)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a39      	ldr	r2, [pc, #228]	; (800147c <HAL_TIM_MspPostInit+0x190>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d11d      	bne.n	80013d8 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b31      	ldr	r3, [pc, #196]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = THRW_PWM_Pin;
 80013b4:	2308      	movs	r3, #8
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80013c4:	2309      	movs	r3, #9
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THRW_PWM_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f000 fa53 	bl	800187c <HAL_GPIO_Init>
}
 80013d6:	e044      	b.n	8001462 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM16)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a28      	ldr	r2, [pc, #160]	; (8001480 <HAL_TIM_MspPostInit+0x194>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d11d      	bne.n	800141e <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a22      	ldr	r2, [pc, #136]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 80013fa:	2340      	movs	r3, #64	; 0x40
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800140a:	2301      	movs	r3, #1
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f000 fa30 	bl	800187c <HAL_GPIO_Init>
}
 800141c:	e021      	b.n	8001462 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM17)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <HAL_TIM_MspPostInit+0x198>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d11c      	bne.n	8001462 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_TIM_MspPostInit+0x184>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001450:	2301      	movs	r3, #1
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145e:	f000 fa0d 	bl	800187c <HAL_GPIO_Init>
}
 8001462:	bf00      	nop
 8001464:	3730      	adds	r7, #48	; 0x30
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40012c00 	.word	0x40012c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40013400 	.word	0x40013400
 8001478:	48000400 	.word	0x48000400
 800147c:	40014000 	.word	0x40014000
 8001480:	40014400 	.word	0x40014400
 8001484:	40014800 	.word	0x40014800

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x4>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d4:	f000 f8a4 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <USB_LP_IRQHandler+0x10>)
 80014e2:	f000 fc84 	bl	8001dee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20001138 	.word	0x20001138

080014f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <TIM6_DAC_IRQHandler+0x10>)
 80014f6:	f003 fb85 	bl	8004c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000310 	.word	0x20000310

08001504 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <SystemInit+0x20>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <SystemInit+0x20>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800152a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490e      	ldr	r1, [pc, #56]	; (8001568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0b      	ldr	r4, [pc, #44]	; (8001574 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001552:	f7ff ffd7 	bl	8001504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f008 ff4d 	bl	800a3f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155a:	f7ff f803 	bl	8000564 <main>

0800155e <LoopForever>:

LoopForever:
    b LoopForever
 800155e:	e7fe      	b.n	800155e <LoopForever>
  ldr   r0, =_estack
 8001560:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 800156c:	0800a4e0 	.word	0x0800a4e0
  ldr r2, =_sbss
 8001570:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8001574:	2000164c 	.word	0x2000164c

08001578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_2_IRQHandler>

0800157a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 f939 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f80e 	bl	80015ac <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	e001      	b.n	80015a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800159c:	f7ff fd2c 	bl	8000ff8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a0:	79fb      	ldrb	r3, [r7, #7]

}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_InitTick+0x68>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d022      	beq.n	8001606 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_InitTick+0x6c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_InitTick+0x68>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 f944 	bl	8001862 <HAL_SYSTICK_Config>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10f      	bne.n	8001600 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	d809      	bhi.n	80015fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e6:	2200      	movs	r2, #0
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	f04f 30ff 	mov.w	r0, #4294967295
 80015ee:	f000 f910 	bl	8001812 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_InitTick+0x70>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e007      	b.n	800160a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e004      	b.n	800160a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e001      	b.n	800160a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000048 	.word	0x20000048
 8001618:	20000040 	.word	0x20000040
 800161c:	20000044 	.word	0x20000044

08001620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_IncTick+0x1c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_IncTick+0x20>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4413      	add	r3, r2
 800162e:	4a03      	ldr	r2, [pc, #12]	; (800163c <HAL_IncTick+0x1c>)
 8001630:	6013      	str	r3, [r2, #0]
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	20000490 	.word	0x20000490
 8001640:	20000048 	.word	0x20000048

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000490 	.word	0x20000490

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	; (80016f8 <__NVIC_EnableIRQ+0x38>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff8e 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff29 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff40 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff90 	bl	8001750 <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5f 	bl	80016fc <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff33 	bl	80016c0 <__NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffa4 	bl	80017b8 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800188a:	e15a      	b.n	8001b42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 814c 	beq.w	8001b3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d005      	beq.n	80018bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d130      	bne.n	800191e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018f2:	2201      	movs	r2, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 0201 	and.w	r2, r3, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b03      	cmp	r3, #3
 8001928:	d017      	beq.n	800195a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d123      	bne.n	80019ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0203 	and.w	r2, r3, #3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80a6 	beq.w	8001b3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b5b      	ldr	r3, [pc, #364]	; (8001b60 <HAL_GPIO_Init+0x2e4>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f4:	4a5a      	ldr	r2, [pc, #360]	; (8001b60 <HAL_GPIO_Init+0x2e4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6613      	str	r3, [r2, #96]	; 0x60
 80019fc:	4b58      	ldr	r3, [pc, #352]	; (8001b60 <HAL_GPIO_Init+0x2e4>)
 80019fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a08:	4a56      	ldr	r2, [pc, #344]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a32:	d01f      	beq.n	8001a74 <HAL_GPIO_Init+0x1f8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a4c      	ldr	r2, [pc, #304]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d019      	beq.n	8001a70 <HAL_GPIO_Init+0x1f4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a4b      	ldr	r2, [pc, #300]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x1f0>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a4a      	ldr	r2, [pc, #296]	; (8001b70 <HAL_GPIO_Init+0x2f4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1ec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a49      	ldr	r2, [pc, #292]	; (8001b74 <HAL_GPIO_Init+0x2f8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1e8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a48      	ldr	r2, [pc, #288]	; (8001b78 <HAL_GPIO_Init+0x2fc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1e4>
 8001a5c:	2305      	movs	r3, #5
 8001a5e:	e00a      	b.n	8001a76 <HAL_GPIO_Init+0x1fa>
 8001a60:	2306      	movs	r3, #6
 8001a62:	e008      	b.n	8001a76 <HAL_GPIO_Init+0x1fa>
 8001a64:	2304      	movs	r3, #4
 8001a66:	e006      	b.n	8001a76 <HAL_GPIO_Init+0x1fa>
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e004      	b.n	8001a76 <HAL_GPIO_Init+0x1fa>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x1fa>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_GPIO_Init+0x1fa>
 8001a74:	2300      	movs	r3, #0
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	f002 0203 	and.w	r2, r2, #3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a86:	4937      	ldr	r1, [pc, #220]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a94:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab8:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae2:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b36:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f47f ae9d 	bne.w	800188c <HAL_GPIO_Init+0x10>
  }
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	48000800 	.word	0x48000800
 8001b70:	48000c00 	.word	0x48000c00
 8001b74:	48001000 	.word	0x48001000
 8001b78:	48001400 	.word	0x48001400
 8001b7c:	40010400 	.word	0x40010400

08001b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be2:	b08b      	sub	sp, #44	; 0x2c
 8001be4:	af06      	add	r7, sp, #24
 8001be6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0d7      	b.n	8001da2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f008 f8ee 	bl	8009de8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2203      	movs	r2, #3
 8001c10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 ffda 	bl	8005bd2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	e04c      	b.n	8001cbe <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3301      	adds	r3, #1
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	b298      	uxth	r0, r3
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	3336      	adds	r3, #54	; 0x36
 8001c62:	4602      	mov	r2, r0
 8001c64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	3303      	adds	r3, #3
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	3338      	adds	r3, #56	; 0x38
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	333c      	adds	r3, #60	; 0x3c
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3340      	adds	r3, #64	; 0x40
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d3ad      	bcc.n	8001c24 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e044      	b.n	8001d58 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3301      	adds	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d3b5      	bcc.n	8001cce <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	687e      	ldr	r6, [r7, #4]
 8001d6a:	466d      	mov	r5, sp
 8001d6c:	f106 0410 	add.w	r4, r6, #16
 8001d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	602b      	str	r3, [r5, #0]
 8001d78:	1d33      	adds	r3, r6, #4
 8001d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f003 ff43 	bl	8005c08 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f001 fc29 	bl	80035f2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001daa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_PCD_Start+0x16>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e012      	b.n	8001de6 <HAL_PCD_Start+0x3c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fee9 	bl	8005ba4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f006 f902 	bl	8007fe0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f006 f907 	bl	800800e <USB_ReadInterrupts>
 8001e00:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fb26 	bl	800245e <PCD_EP_ISR_Handler>

    return;
 8001e12:	e110      	b.n	8002036 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d013      	beq.n	8001e46 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e30:	b292      	uxth	r2, r2
 8001e32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f008 f867 	bl	8009f0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8fc 	bl	800203c <HAL_PCD_SetAddress>

    return;
 8001e44:	e0f7      	b.n	8002036 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00c      	beq.n	8001e6a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e68:	e0e5      	b.n	8002036 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00c      	beq.n	8001e8e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e86:	b292      	uxth	r2, r2
 8001e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e8c:	e0d3      	b.n	8002036 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d034      	beq.n	8001f02 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0208 	bic.w	r2, r2, #8
 8001ec2:	b292      	uxth	r2, r2
 8001ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eda:	2100      	movs	r1, #0
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f008 fa09 	bl	800a2f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f008 f84a 	bl	8009f7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001efa:	b292      	uxth	r2, r2
 8001efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f00:	e099      	b.n	8002036 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d027      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f36:	b292      	uxth	r2, r2
 8001f38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0204 	orr.w	r2, r2, #4
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f007 fff7 	bl	8009f48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f5a:	e06c      	b.n	8002036 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d040      	beq.n	8001fe8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d12b      	bne.n	8001fe0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0204 	orr.w	r2, r2, #4
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	b292      	uxth	r2, r2
 8001fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f008 f98b 	bl	800a2f4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001fde:	e02a      	b.n	8002036 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f007 ffb1 	bl	8009f48 <HAL_PCD_SuspendCallback>
    return;
 8001fe6:	e026      	b.n	8002036 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00f      	beq.n	8002012 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002004:	b292      	uxth	r2, r2
 8002006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f007 ff6f 	bl	8009eee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002010:	e011      	b.n	8002036 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00c      	beq.n	8002036 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202e:	b292      	uxth	r2, r2
 8002030:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002034:	bf00      	nop
  }
}
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_PCD_SetAddress+0x1a>
 8002052:	2302      	movs	r3, #2
 8002054:	e013      	b.n	800207e <HAL_PCD_SetAddress+0x42>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f005 ffa2 	bl	8007fb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	4608      	mov	r0, r1
 8002090:	4611      	mov	r1, r2
 8002092:	461a      	mov	r2, r3
 8002094:	4603      	mov	r3, r0
 8002096:	70fb      	strb	r3, [r7, #3]
 8002098:	460b      	mov	r3, r1
 800209a:	803b      	strh	r3, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da0e      	bge.n	80020ca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	705a      	strb	r2, [r3, #1]
 80020c8:	e00e      	b.n	80020e8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 0207 	and.w	r2, r3, #7
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020f4:	883a      	ldrh	r2, [r7, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	78ba      	ldrb	r2, [r7, #2]
 80020fe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	785b      	ldrb	r3, [r3, #1]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002112:	78bb      	ldrb	r3, [r7, #2]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d102      	bne.n	800211e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_PCD_EP_Open+0xa6>
 8002128:	2302      	movs	r3, #2
 800212a:	e00e      	b.n	800214a <HAL_PCD_EP_Open+0xc4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68f9      	ldr	r1, [r7, #12]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 fd86 	bl	8005c4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002148:	7afb      	ldrb	r3, [r7, #11]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800215e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002162:	2b00      	cmp	r3, #0
 8002164:	da0e      	bge.n	8002184 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	705a      	strb	r2, [r3, #1]
 8002182:	e00e      	b.n	80021a2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 0207 	and.w	r2, r3, #7
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_PCD_EP_Close+0x6a>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e00e      	b.n	80021da <HAL_PCD_EP_Close+0x88>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 f8d2 	bl	8006374 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	460b      	mov	r3, r1
 80021f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021f2:	7afb      	ldrb	r3, [r7, #11]
 80021f4:	f003 0207 	and.w	r2, r3, #7
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2200      	movs	r2, #0
 8002220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	b2da      	uxtb	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	2b00      	cmp	r3, #0
 8002236:	d106      	bne.n	8002246 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6979      	ldr	r1, [r7, #20]
 800223e:	4618      	mov	r0, r3
 8002240:	f004 fa85 	bl	800674e <USB_EPStartXfer>
 8002244:	e005      	b.n	8002252 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6979      	ldr	r1, [r7, #20]
 800224c:	4618      	mov	r0, r3
 800224e:	f004 fa7e 	bl	800674e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	f003 0207 	and.w	r2, r3, #7
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	460b      	mov	r3, r1
 800229a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2201      	movs	r2, #1
 80022d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6979      	ldr	r1, [r7, #20]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 fa2a 	bl	800674e <USB_EPStartXfer>
 80022fa:	e005      	b.n	8002308 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6979      	ldr	r1, [r7, #20]
 8002302:	4618      	mov	r0, r3
 8002304:	f004 fa23 	bl	800674e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 0207 	and.w	r2, r3, #7
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	d901      	bls.n	8002330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e03e      	b.n	80023ae <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002334:	2b00      	cmp	r3, #0
 8002336:	da0e      	bge.n	8002356 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	705a      	strb	r2, [r3, #1]
 8002354:	e00c      	b.n	8002370 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_PCD_EP_SetStall+0x7e>
 800238c:	2302      	movs	r3, #2
 800238e:	e00e      	b.n	80023ae <HAL_PCD_EP_SetStall+0x9c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	4618      	mov	r0, r3
 80023a0:	f005 fd0b 	bl	8007dba <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 020f 	and.w	r2, r3, #15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d901      	bls.n	80023d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e040      	b.n	8002456 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	da0e      	bge.n	80023fa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	705a      	strb	r2, [r3, #1]
 80023f8:	e00e      	b.n	8002418 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	f003 0207 	and.w	r2, r3, #7
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_PCD_EP_ClrStall+0x82>
 8002434:	2302      	movs	r3, #2
 8002436:	e00e      	b.n	8002456 <HAL_PCD_EP_ClrStall+0xa0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	4618      	mov	r0, r3
 8002448:	f005 fd08 	bl	8007e5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b096      	sub	sp, #88	; 0x58
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002466:	e39c      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002470:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002474:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002482:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 815e 	bne.w	8002748 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800248c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d150      	bne.n	800253a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a8:	81fb      	strh	r3, [r7, #14]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	89fb      	ldrh	r3, [r7, #14]
 80024b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3328      	adds	r3, #40	; 0x28
 80024c0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	441a      	add	r2, r3
 80024f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024f8:	2100      	movs	r1, #0
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f007 fcdd 	bl	8009eba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 834a 	beq.w	8002ba2 <PCD_EP_ISR_Handler+0x744>
 800250e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8345 	bne.w	8002ba2 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002524:	b2da      	uxtb	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b292      	uxth	r2, r2
 800252c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002538:	e333      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002540:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800254c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002554:	2b00      	cmp	r3, #0
 8002556:	d032      	beq.n	80025be <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002560:	b29b      	uxth	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	4413      	add	r3, r2
 8002572:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800257c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800258a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800258e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002590:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002592:	b29b      	uxth	r3, r3
 8002594:	f005 fd8d 	bl	80080b2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025a4:	4013      	ands	r3, r2
 80025a6:	823b      	strh	r3, [r7, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	8a3a      	ldrh	r2, [r7, #16]
 80025ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b2:	b292      	uxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f007 fc52 	bl	8009e60 <HAL_PCD_SetupStageCallback>
 80025bc:	e2f1      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025be:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f280 82ed 	bge.w	8002ba2 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d4:	4013      	ands	r3, r2
 80025d6:	83fb      	strh	r3, [r7, #30]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	8bfa      	ldrh	r2, [r7, #30]
 80025de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e2:	b292      	uxth	r2, r2
 80025e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800260a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800260e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d019      	beq.n	800264a <PCD_EP_ISR_Handler+0x1ec>
 8002616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d015      	beq.n	800264a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	6959      	ldr	r1, [r3, #20]
 8002626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002628:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800262a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800262e:	b29b      	uxth	r3, r3
 8002630:	f005 fd3f 	bl	80080b2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	441a      	add	r2, r3
 800263e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002640:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002642:	2100      	movs	r1, #0
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f007 fc1d 	bl	8009e84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 82a3 	bne.w	8002ba2 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4413      	add	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b3e      	cmp	r3, #62	; 0x3e
 8002682:	d918      	bls.n	80026b6 <PCD_EP_ISR_Handler+0x258>
 8002684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	647b      	str	r3, [r7, #68]	; 0x44
 800268c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <PCD_EP_ISR_Handler+0x240>
 8002698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269a:	3b01      	subs	r3, #1
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
 800269e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	029b      	lsls	r3, r3, #10
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	e029      	b.n	800270a <PCD_EP_ISR_Handler+0x2ac>
 80026b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d112      	bne.n	80026e4 <PCD_EP_ISR_Handler+0x286>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	e012      	b.n	800270a <PCD_EP_ISR_Handler+0x2ac>
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	647b      	str	r3, [r7, #68]	; 0x44
 80026ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <PCD_EP_ISR_Handler+0x2a0>
 80026f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fa:	3301      	adds	r3, #1
 80026fc:	647b      	str	r3, [r7, #68]	; 0x44
 80026fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002700:	b29b      	uxth	r3, r3
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	b29a      	uxth	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	827b      	strh	r3, [r7, #18]
 800271c:	8a7b      	ldrh	r3, [r7, #18]
 800271e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002722:	827b      	strh	r3, [r7, #18]
 8002724:	8a7b      	ldrh	r3, [r7, #18]
 8002726:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800272a:	827b      	strh	r3, [r7, #18]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	8a7b      	ldrh	r3, [r7, #18]
 8002732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800273a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002742:	b29b      	uxth	r3, r3
 8002744:	8013      	strh	r3, [r2, #0]
 8002746:	e22c      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800275c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002760:	2b00      	cmp	r3, #0
 8002762:	f280 80f6 	bge.w	8002952 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29a      	uxth	r2, r3
 8002778:	f640 738f 	movw	r3, #3983	; 0xf8f
 800277c:	4013      	ands	r3, r2
 800277e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002794:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002798:	b292      	uxth	r2, r2
 800279a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800279c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b4:	7b1b      	ldrb	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d123      	bne.n	8002802 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80027e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 808e 	beq.w	8002908 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f2:	6959      	ldr	r1, [r3, #20]
 80027f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f6:	88da      	ldrh	r2, [r3, #6]
 80027f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027fc:	f005 fc59 	bl	80080b2 <USB_ReadPMA>
 8002800:	e082      	b.n	8002908 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	78db      	ldrb	r3, [r3, #3]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d10a      	bne.n	8002820 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800280a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800280e:	461a      	mov	r2, r3
 8002810:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f9d3 	bl	8002bbe <HAL_PCD_EP_DB_Receive>
 8002818:	4603      	mov	r3, r0
 800281a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800281e:	e073      	b.n	8002908 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	441a      	add	r2, r3
 800284c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002860:	b29b      	uxth	r3, r3
 8002862:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d022      	beq.n	80028c4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	4413      	add	r3, r2
 8002898:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80028a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02c      	beq.n	8002908 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	6959      	ldr	r1, [r3, #20]
 80028b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b8:	891a      	ldrh	r2, [r3, #8]
 80028ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028be:	f005 fbf8 	bl	80080b2 <USB_ReadPMA>
 80028c2:	e021      	b.n	8002908 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80028ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fa:	6959      	ldr	r1, [r3, #20]
 80028fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fe:	895a      	ldrh	r2, [r3, #10]
 8002900:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002904:	f005 fbd5 	bl	80080b2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002910:	441a      	add	r2, r3
 8002912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002914:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800291e:	441a      	add	r2, r3
 8002920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002922:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <PCD_EP_ISR_Handler+0x4da>
 800292c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	429a      	cmp	r2, r3
 8002936:	d206      	bcs.n	8002946 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f007 faa0 	bl	8009e84 <HAL_PCD_DataOutStageCallback>
 8002944:	e005      	b.n	8002952 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800294c:	4618      	mov	r0, r3
 800294e:	f003 fefe 	bl	800674e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002952:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8121 	beq.w	8002ba2 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002960:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	441a      	add	r2, r3
 80029a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80029a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80029b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b2:	78db      	ldrb	r3, [r3, #3]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	f000 80a2 	beq.w	8002afe <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80029ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80029c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c2:	7b1b      	ldrb	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8093 	beq.w	8002af0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d046      	beq.n	8002a64 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d8:	785b      	ldrb	r3, [r3, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d126      	bne.n	8002a2c <PCD_EP_ISR_Handler+0x5ce>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	4413      	add	r3, r2
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	00da      	lsls	r2, r3, #3
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	4413      	add	r3, r2
 8002a00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a04:	623b      	str	r3, [r7, #32]
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	801a      	strh	r2, [r3, #0]
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	801a      	strh	r2, [r3, #0]
 8002a2a:	e061      	b.n	8002af0 <PCD_EP_ISR_Handler+0x692>
 8002a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d15d      	bne.n	8002af0 <PCD_EP_ISR_Handler+0x692>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	4413      	add	r3, r2
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	00da      	lsls	r2, r3, #3
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a54:	4413      	add	r3, r2
 8002a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	2200      	movs	r2, #0
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	e045      	b.n	8002af0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d126      	bne.n	8002ac0 <PCD_EP_ISR_Handler+0x662>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	4413      	add	r3, r2
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	00da      	lsls	r2, r3, #3
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	4413      	add	r3, r2
 8002a94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	e017      	b.n	8002af0 <PCD_EP_ISR_Handler+0x692>
 8002ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d113      	bne.n	8002af0 <PCD_EP_ISR_Handler+0x692>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad6:	4413      	add	r3, r2
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	00da      	lsls	r2, r3, #3
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	2200      	movs	r2, #0
 8002aee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f007 f9df 	bl	8009eba <HAL_PCD_DataInStageCallback>
 8002afc:	e051      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002afe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d144      	bne.n	8002b94 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d907      	bls.n	8002b4e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b46:	1ad2      	subs	r2, r2, r3
 8002b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4a:	619a      	str	r2, [r3, #24]
 8002b4c:	e002      	b.n	8002b54 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f007 f9a9 	bl	8009eba <HAL_PCD_DataInStageCallback>
 8002b68:	e01b      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b72:	441a      	add	r2, r3
 8002b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b76:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b80:	441a      	add	r2, r3
 8002b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b84:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 fdde 	bl	800674e <USB_EPStartXfer>
 8002b92:	e006      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b94:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f917 	bl	8002dd0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f6ff ac5a 	blt.w	8002468 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3758      	adds	r7, #88	; 0x58
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b088      	sub	sp, #32
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d07c      	beq.n	8002cd0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bfa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	8b7b      	ldrh	r3, [r7, #26]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d306      	bcc.n	8002c14 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	8b7b      	ldrh	r3, [r7, #26]
 8002c0c:	1ad2      	subs	r2, r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	619a      	str	r2, [r3, #24]
 8002c12:	e002      	b.n	8002c1a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2200      	movs	r2, #0
 8002c18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d123      	bne.n	8002c6a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3c:	833b      	strh	r3, [r7, #24]
 8002c3e:	8b3b      	ldrh	r3, [r7, #24]
 8002c40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c44:	833b      	strh	r3, [r7, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	441a      	add	r2, r3
 8002c54:	8b3b      	ldrh	r3, [r7, #24]
 8002c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01f      	beq.n	8002cb4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8e:	82fb      	strh	r3, [r7, #22]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	8afb      	ldrh	r3, [r7, #22]
 8002ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cb4:	8b7b      	ldrh	r3, [r7, #26]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8085 	beq.w	8002dc6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	6959      	ldr	r1, [r3, #20]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	891a      	ldrh	r2, [r3, #8]
 8002cc8:	8b7b      	ldrh	r3, [r7, #26]
 8002cca:	f005 f9f2 	bl	80080b2 <USB_ReadPMA>
 8002cce:	e07a      	b.n	8002dc6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	8b7b      	ldrh	r3, [r7, #26]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d306      	bcc.n	8002d0e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	8b7b      	ldrh	r3, [r7, #26]
 8002d06:	1ad2      	subs	r2, r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	619a      	str	r2, [r3, #24]
 8002d0c:	e002      	b.n	8002d14 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d123      	bne.n	8002d64 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	83fb      	strh	r3, [r7, #30]
 8002d38:	8bfb      	ldrh	r3, [r7, #30]
 8002d3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d3e:	83fb      	strh	r3, [r7, #30]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	8bfb      	ldrh	r3, [r7, #30]
 8002d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d11f      	bne.n	8002dae <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d88:	83bb      	strh	r3, [r7, #28]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	8bbb      	ldrh	r3, [r7, #28]
 8002d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dae:	8b7b      	ldrh	r3, [r7, #26]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6959      	ldr	r1, [r3, #20]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	895a      	ldrh	r2, [r3, #10]
 8002dc0:	8b7b      	ldrh	r3, [r7, #26]
 8002dc2:	f005 f976 	bl	80080b2 <USB_ReadPMA>
    }
  }

  return count;
 8002dc6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b0a2      	sub	sp, #136	; 0x88
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 81c5 	beq.w	8003174 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d907      	bls.n	8002e2e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e26:	1ad2      	subs	r2, r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	619a      	str	r2, [r3, #24]
 8002e2c:	e002      	b.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f040 80b9 	bne.w	8002fb0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d126      	bne.n	8002e94 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	4413      	add	r3, r2
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	00da      	lsls	r2, r3, #3
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	4413      	add	r3, r2
 8002e68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	801a      	strh	r2, [r3, #0]
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	801a      	strh	r2, [r3, #0]
 8002e92:	e01a      	b.n	8002eca <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d116      	bne.n	8002eca <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	4413      	add	r3, r2
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	00da      	lsls	r2, r3, #3
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	785b      	ldrb	r3, [r3, #1]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d126      	bne.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x156>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4413      	add	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	00da      	lsls	r2, r3, #3
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	801a      	strh	r2, [r3, #0]
 8002f24:	e017      	b.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d113      	bne.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	623b      	str	r3, [r7, #32]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	00da      	lsls	r2, r3, #3
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2200      	movs	r2, #0
 8002f54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f006 ffac 	bl	8009eba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 82d2 	beq.w	8003512 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f88:	827b      	strh	r3, [r7, #18]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	441a      	add	r2, r3
 8002f98:	8a7b      	ldrh	r3, [r7, #18]
 8002f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	8013      	strh	r3, [r2, #0]
 8002fae:	e2b0      	b.n	8003512 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d021      	beq.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	441a      	add	r2, r3
 8002fe6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003004:	2b01      	cmp	r3, #1
 8003006:	f040 8284 	bne.w	8003512 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003012:	441a      	add	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003020:	441a      	add	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	429a      	cmp	r2, r3
 8003030:	d309      	bcc.n	8003046 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303e:	1ad2      	subs	r2, r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	621a      	str	r2, [r3, #32]
 8003044:	e015      	b.n	8003072 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d107      	bne.n	800305e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800304e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003052:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800305c:	e009      	b.n	8003072 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d155      	bne.n	8003126 <HAL_PCD_EP_DB_Transmit+0x356>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003088:	b29b      	uxth	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	4413      	add	r3, r2
 8003090:	63bb      	str	r3, [r7, #56]	; 0x38
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	00da      	lsls	r2, r3, #3
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	4413      	add	r3, r2
 800309c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
 80030a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a4:	2b3e      	cmp	r3, #62	; 0x3e
 80030a6:	d916      	bls.n	80030d6 <HAL_PCD_EP_DB_Transmit+0x306>
 80030a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <HAL_PCD_EP_DB_Transmit+0x2ee>
 80030b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ba:	3b01      	subs	r3, #1
 80030bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80030be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	801a      	strh	r2, [r3, #0]
 80030d4:	e043      	b.n	800315e <HAL_PCD_EP_DB_Transmit+0x38e>
 80030d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d112      	bne.n	8003102 <HAL_PCD_EP_DB_Transmit+0x332>
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ea:	801a      	strh	r2, [r3, #0]
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	e02d      	b.n	800315e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
 8003108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_PCD_EP_DB_Transmit+0x348>
 8003112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003114:	3301      	adds	r3, #1
 8003116:	64bb      	str	r3, [r7, #72]	; 0x48
 8003118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311a:	b29b      	uxth	r3, r3
 800311c:	029b      	lsls	r3, r3, #10
 800311e:	b29a      	uxth	r2, r3
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	e01b      	b.n	800315e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	785b      	ldrb	r3, [r3, #1]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d117      	bne.n	800315e <HAL_PCD_EP_DB_Transmit+0x38e>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	643b      	str	r3, [r7, #64]	; 0x40
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313c:	b29b      	uxth	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003142:	4413      	add	r3, r2
 8003144:	643b      	str	r3, [r7, #64]	; 0x40
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	00da      	lsls	r2, r3, #3
 800314c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314e:	4413      	add	r3, r2
 8003150:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003158:	b29a      	uxth	r2, r3
 800315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	6959      	ldr	r1, [r3, #20]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	891a      	ldrh	r2, [r3, #8]
 800316a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316c:	b29b      	uxth	r3, r3
 800316e:	f004 ff5e 	bl	800802e <USB_WritePMA>
 8003172:	e1ce      	b.n	8003512 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317c:	b29b      	uxth	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	4413      	add	r3, r2
 800318e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003198:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d307      	bcc.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031b0:	1ad2      	subs	r2, r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	619a      	str	r2, [r3, #24]
 80031b6:	e002      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f040 80c4 	bne.w	8003350 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	785b      	ldrb	r3, [r3, #1]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d126      	bne.n	800321e <HAL_PCD_EP_DB_Transmit+0x44e>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031de:	b29b      	uxth	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031e4:	4413      	add	r3, r2
 80031e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	00da      	lsls	r2, r3, #3
 80031ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f0:	4413      	add	r3, r2
 80031f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031f6:	667b      	str	r3, [r7, #100]	; 0x64
 80031f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003202:	b29a      	uxth	r2, r3
 8003204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003216:	b29a      	uxth	r2, r3
 8003218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800321a:	801a      	strh	r2, [r3, #0]
 800321c:	e01a      	b.n	8003254 <HAL_PCD_EP_DB_Transmit+0x484>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d116      	bne.n	8003254 <HAL_PCD_EP_DB_Transmit+0x484>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	673b      	str	r3, [r7, #112]	; 0x70
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003234:	b29b      	uxth	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800323a:	4413      	add	r3, r2
 800323c:	673b      	str	r3, [r7, #112]	; 0x70
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	00da      	lsls	r2, r3, #3
 8003244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003246:	4413      	add	r3, r2
 8003248:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800324c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800324e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003250:	2200      	movs	r2, #0
 8003252:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	67fb      	str	r3, [r7, #124]	; 0x7c
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d12f      	bne.n	80032c2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003272:	b29b      	uxth	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327a:	4413      	add	r3, r2
 800327c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	00da      	lsls	r2, r3, #3
 8003286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800328a:	4413      	add	r3, r2
 800328c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032a6:	801a      	strh	r2, [r3, #0]
 80032a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032be:	801a      	strh	r2, [r3, #0]
 80032c0:	e017      	b.n	80032f2 <HAL_PCD_EP_DB_Transmit+0x522>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d113      	bne.n	80032f2 <HAL_PCD_EP_DB_Transmit+0x522>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032d8:	4413      	add	r3, r2
 80032da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	00da      	lsls	r2, r3, #3
 80032e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032e4:	4413      	add	r3, r2
 80032e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ee:	2200      	movs	r2, #0
 80032f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	4619      	mov	r1, r3
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f006 fdde 	bl	8009eba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003304:	2b00      	cmp	r3, #0
 8003306:	f040 8104 	bne.w	8003512 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003324:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	441a      	add	r2, r3
 8003336:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800333a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334a:	b29b      	uxth	r3, r3
 800334c:	8013      	strh	r3, [r2, #0]
 800334e:	e0e0      	b.n	8003512 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d121      	bne.n	800339e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003374:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	441a      	add	r2, r3
 8003386:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800338a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800338e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003392:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339a:	b29b      	uxth	r3, r3
 800339c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	f040 80b4 	bne.w	8003512 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033b2:	441a      	add	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033c0:	441a      	add	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6a1a      	ldr	r2, [r3, #32]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d309      	bcc.n	80033e6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033de:	1ad2      	subs	r2, r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	621a      	str	r2, [r3, #32]
 80033e4:	e015      	b.n	8003412 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80033ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033fc:	e009      	b.n	8003412 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2200      	movs	r2, #0
 8003408:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	663b      	str	r3, [r7, #96]	; 0x60
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d155      	bne.n	80034cc <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	65bb      	str	r3, [r7, #88]	; 0x58
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342e:	b29b      	uxth	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003434:	4413      	add	r3, r2
 8003436:	65bb      	str	r3, [r7, #88]	; 0x58
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	00da      	lsls	r2, r3, #3
 800343e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003440:	4413      	add	r3, r2
 8003442:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003446:	657b      	str	r3, [r7, #84]	; 0x54
 8003448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344a:	2b3e      	cmp	r3, #62	; 0x3e
 800344c:	d916      	bls.n	800347c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800344e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	677b      	str	r3, [r7, #116]	; 0x74
 8003454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <HAL_PCD_EP_DB_Transmit+0x694>
 800345e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003460:	3b01      	subs	r3, #1
 8003462:	677b      	str	r3, [r7, #116]	; 0x74
 8003464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003466:	b29b      	uxth	r3, r3
 8003468:	029b      	lsls	r3, r3, #10
 800346a:	b29b      	uxth	r3, r3
 800346c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003474:	b29a      	uxth	r2, r3
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	801a      	strh	r2, [r3, #0]
 800347a:	e040      	b.n	80034fe <HAL_PCD_EP_DB_Transmit+0x72e>
 800347c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347e:	2b00      	cmp	r3, #0
 8003480:	d112      	bne.n	80034a8 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800348c:	b29a      	uxth	r2, r3
 800348e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800349c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	e02a      	b.n	80034fe <HAL_PCD_EP_DB_Transmit+0x72e>
 80034a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	677b      	str	r3, [r7, #116]	; 0x74
 80034ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_PCD_EP_DB_Transmit+0x6ee>
 80034b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ba:	3301      	adds	r3, #1
 80034bc:	677b      	str	r3, [r7, #116]	; 0x74
 80034be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	029b      	lsls	r3, r3, #10
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	e018      	b.n	80034fe <HAL_PCD_EP_DB_Transmit+0x72e>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d114      	bne.n	80034fe <HAL_PCD_EP_DB_Transmit+0x72e>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e2:	4413      	add	r3, r2
 80034e4:	663b      	str	r3, [r7, #96]	; 0x60
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	00da      	lsls	r2, r3, #3
 80034ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ee:	4413      	add	r3, r2
 80034f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6959      	ldr	r1, [r3, #20]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	895a      	ldrh	r2, [r3, #10]
 800350a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800350c:	b29b      	uxth	r3, r3
 800350e:	f004 fd8e 	bl	800802e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800352c:	823b      	strh	r3, [r7, #16]
 800352e:	8a3b      	ldrh	r3, [r7, #16]
 8003530:	f083 0310 	eor.w	r3, r3, #16
 8003534:	823b      	strh	r3, [r7, #16]
 8003536:	8a3b      	ldrh	r3, [r7, #16]
 8003538:	f083 0320 	eor.w	r3, r3, #32
 800353c:	823b      	strh	r3, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	8a3b      	ldrh	r3, [r7, #16]
 800354e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3788      	adds	r7, #136	; 0x88
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	4613      	mov	r3, r2
 800357c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	e009      	b.n	80035b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035a2:	897a      	ldrh	r2, [r7, #10]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035b6:	893b      	ldrh	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d107      	bne.n	80035cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2200      	movs	r2, #0
 80035c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	80da      	strh	r2, [r3, #6]
 80035ca:	e00b      	b.n	80035e4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2201      	movs	r2, #1
 80035d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	b29a      	uxth	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003616:	b29b      	uxth	r3, r3
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800362a:	b29b      	uxth	r3, r3
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d141      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003656:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d131      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003664:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366a:	4a46      	ldr	r2, [pc, #280]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003674:	4b43      	ldr	r3, [pc, #268]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800367c:	4a41      	ldr	r2, [pc, #260]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003684:	4b40      	ldr	r3, [pc, #256]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2232      	movs	r2, #50	; 0x32
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	4a3f      	ldr	r2, [pc, #252]	; (800378c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	0c9b      	lsrs	r3, r3, #18
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369a:	e002      	b.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3b01      	subs	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a2:	4b38      	ldr	r3, [pc, #224]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ae:	d102      	bne.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f2      	bne.n	800369c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b6:	4b33      	ldr	r3, [pc, #204]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c2:	d158      	bne.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e057      	b.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c8:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ce:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036d8:	e04d      	b.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e0:	d141      	bne.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036e2:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ee:	d131      	bne.n	8003754 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f6:	4a23      	ldr	r2, [pc, #140]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003708:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800370e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2232      	movs	r2, #50	; 0x32
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	0c9b      	lsrs	r3, r3, #18
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003726:	e002      	b.n	800372e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3b01      	subs	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373a:	d102      	bne.n	8003742 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f2      	bne.n	8003728 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374e:	d112      	bne.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e011      	b.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003764:	e007      	b.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800376e:	4a05      	ldr	r2, [pc, #20]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003770:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003774:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40007000 	.word	0x40007000
 8003788:	20000040 	.word	0x20000040
 800378c:	431bde83 	.word	0x431bde83

08003790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e306      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d075      	beq.n	800389a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ae:	4b97      	ldr	r3, [pc, #604]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037b8:	4b94      	ldr	r3, [pc, #592]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_OscConfig+0x3e>
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d002      	beq.n	80037d4 <HAL_RCC_OscConfig+0x44>
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d10b      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	4b8d      	ldr	r3, [pc, #564]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d05b      	beq.n	8003898 <HAL_RCC_OscConfig+0x108>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d157      	bne.n	8003898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e2e1      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f4:	d106      	bne.n	8003804 <HAL_RCC_OscConfig+0x74>
 80037f6:	4b85      	ldr	r3, [pc, #532]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a84      	ldr	r2, [pc, #528]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e01d      	b.n	8003840 <HAL_RCC_OscConfig+0xb0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x98>
 800380e:	4b7f      	ldr	r3, [pc, #508]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a7e      	ldr	r2, [pc, #504]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b7c      	ldr	r3, [pc, #496]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a7b      	ldr	r2, [pc, #492]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0xb0>
 8003828:	4b78      	ldr	r3, [pc, #480]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a77      	ldr	r2, [pc, #476]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 800382e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b75      	ldr	r3, [pc, #468]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a74      	ldr	r2, [pc, #464]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 800383a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fd fefc 	bl	8001644 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7fd fef8 	bl	8001644 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e2a6      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003862:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0xc0>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fee8 	bl	8001644 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7fd fee4 	bl	8001644 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e292      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388a:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0xe8>
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d075      	beq.n	8003992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a6:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b0:	4b56      	ldr	r3, [pc, #344]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	d102      	bne.n	80038c6 <HAL_RCC_OscConfig+0x136>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d002      	beq.n	80038cc <HAL_RCC_OscConfig+0x13c>
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d11f      	bne.n	800390c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038cc:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_OscConfig+0x154>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e265      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e4:	4b49      	ldr	r3, [pc, #292]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	4946      	ldr	r1, [pc, #280]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038f8:	4b45      	ldr	r3, [pc, #276]	; (8003a10 <HAL_RCC_OscConfig+0x280>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fd fe55 	bl	80015ac <HAL_InitTick>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d043      	beq.n	8003990 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e251      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003914:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a3c      	ldr	r2, [pc, #240]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 800391a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fe90 	bl	8001644 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7fd fe8c 	bl	8001644 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e23a      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800393a:	4b34      	ldr	r3, [pc, #208]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	492d      	ldr	r1, [pc, #180]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
 800395a:	e01a      	b.n	8003992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fd fe6c 	bl	8001644 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7fd fe68 	bl	8001644 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e216      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x1e0>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003990:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d041      	beq.n	8003a22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a6:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ac:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fd fe45 	bl	8001644 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039be:	f7fd fe41 	bl	8001644 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1ef      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ef      	beq.n	80039be <HAL_RCC_OscConfig+0x22e>
 80039de:	e020      	b.n	8003a22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e6:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fd fe28 	bl	8001644 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f6:	e00d      	b.n	8003a14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f8:	f7fd fe24 	bl	8001644 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d906      	bls.n	8003a14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1d2      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a14:	4b8c      	ldr	r3, [pc, #560]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1ea      	bne.n	80039f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80a6 	beq.w	8003b7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a30:	2300      	movs	r3, #0
 8003a32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a34:	4b84      	ldr	r3, [pc, #528]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_OscConfig+0x2b4>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x2b6>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00d      	beq.n	8003a66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	4b7f      	ldr	r3, [pc, #508]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	4a7e      	ldr	r2, [pc, #504]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a54:	6593      	str	r3, [r2, #88]	; 0x58
 8003a56:	4b7c      	ldr	r3, [pc, #496]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a62:	2301      	movs	r3, #1
 8003a64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a66:	4b79      	ldr	r3, [pc, #484]	; (8003c4c <HAL_RCC_OscConfig+0x4bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d118      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a72:	4b76      	ldr	r3, [pc, #472]	; (8003c4c <HAL_RCC_OscConfig+0x4bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a75      	ldr	r2, [pc, #468]	; (8003c4c <HAL_RCC_OscConfig+0x4bc>)
 8003a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7e:	f7fd fde1 	bl	8001644 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a86:	f7fd fddd 	bl	8001644 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e18b      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a98:	4b6c      	ldr	r3, [pc, #432]	; (8003c4c <HAL_RCC_OscConfig+0x4bc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d108      	bne.n	8003abe <HAL_RCC_OscConfig+0x32e>
 8003aac:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	4a65      	ldr	r2, [pc, #404]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003abc:	e024      	b.n	8003b08 <HAL_RCC_OscConfig+0x378>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d110      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x358>
 8003ac6:	4b60      	ldr	r3, [pc, #384]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	4a5e      	ldr	r2, [pc, #376]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad6:	4b5c      	ldr	r3, [pc, #368]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	4a5a      	ldr	r2, [pc, #360]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae6:	e00f      	b.n	8003b08 <HAL_RCC_OscConfig+0x378>
 8003ae8:	4b57      	ldr	r3, [pc, #348]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a56      	ldr	r2, [pc, #344]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af8:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	4a52      	ldr	r2, [pc, #328]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d016      	beq.n	8003b3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fd fd98 	bl	8001644 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fd fd94 	bl	8001644 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e140      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2e:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ed      	beq.n	8003b18 <HAL_RCC_OscConfig+0x388>
 8003b3c:	e015      	b.n	8003b6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fd fd81 	bl	8001644 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fd fd7d 	bl	8001644 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e129      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b5c:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1ed      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b6a:	7ffb      	ldrb	r3, [r7, #31]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b70:	4b35      	ldr	r3, [pc, #212]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	4a34      	ldr	r2, [pc, #208]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d03c      	beq.n	8003c02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01c      	beq.n	8003bca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b90:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b96:	4a2c      	ldr	r2, [pc, #176]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fd fd50 	bl	8001644 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ba8:	f7fd fd4c 	bl	8001644 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0fa      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bba:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ef      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x418>
 8003bc8:	e01b      	b.n	8003c02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bca:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bda:	f7fd fd33 	bl	8001644 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be2:	f7fd fd2f 	bl	8001644 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0dd      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1ef      	bne.n	8003be2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80d1 	beq.w	8003dae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b0c      	cmp	r3, #12
 8003c16:	f000 808b 	beq.w	8003d30 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d15e      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <HAL_RCC_OscConfig+0x4b8>)
 8003c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fd fd09 	bl	8001644 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c34:	e00c      	b.n	8003c50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fd fd05 	bl	8001644 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d905      	bls.n	8003c50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e0b3      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ec      	bne.n	8003c36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c5c:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	4b56      	ldr	r3, [pc, #344]	; (8003dbc <HAL_RCC_OscConfig+0x62c>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6a11      	ldr	r1, [r2, #32]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0112      	lsls	r2, r2, #4
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c76:	0212      	lsls	r2, r2, #8
 8003c78:	4311      	orrs	r1, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c7e:	0852      	lsrs	r2, r2, #1
 8003c80:	3a01      	subs	r2, #1
 8003c82:	0552      	lsls	r2, r2, #21
 8003c84:	4311      	orrs	r1, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0652      	lsls	r2, r2, #25
 8003c90:	4311      	orrs	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c96:	06d2      	lsls	r2, r2, #27
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	4947      	ldr	r1, [pc, #284]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca0:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a44      	ldr	r2, [pc, #272]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cac:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a41      	ldr	r2, [pc, #260]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd fcc4 	bl	8001644 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fd fcc0 	bl	8001644 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e06e      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x530>
 8003cde:	e066      	b.n	8003dae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce0:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cec:	4b32      	ldr	r3, [pc, #200]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a31      	ldr	r2, [pc, #196]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003cf2:	f023 0303 	bic.w	r3, r3, #3
 8003cf6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cf8:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a2e      	ldr	r2, [pc, #184]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003cfe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fd fc9c 	bl	8001644 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd fc98 	bl	8001644 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e046      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d22:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x580>
 8003d2e:	e03e      	b.n	8003dae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e039      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_RCC_OscConfig+0x628>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0203 	and.w	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d12c      	bne.n	8003daa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d123      	bne.n	8003daa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d11b      	bne.n	8003daa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d113      	bne.n	8003daa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d109      	bne.n	8003daa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	3b01      	subs	r3, #1
 8003da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	019f800c 	.word	0x019f800c

08003dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e11e      	b.n	8004016 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b91      	ldr	r3, [pc, #580]	; (8004020 <HAL_RCC_ClockConfig+0x260>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d910      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b8e      	ldr	r3, [pc, #568]	; (8004020 <HAL_RCC_ClockConfig+0x260>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 020f 	bic.w	r2, r3, #15
 8003dee:	498c      	ldr	r1, [pc, #560]	; (8004020 <HAL_RCC_ClockConfig+0x260>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b8a      	ldr	r3, [pc, #552]	; (8004020 <HAL_RCC_ClockConfig+0x260>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e106      	b.n	8004016 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d073      	beq.n	8003efc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d129      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1c:	4b81      	ldr	r3, [pc, #516]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0f4      	b.n	8004016 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e2c:	f000 f966 	bl	80040fc <RCC_GetSysClockFreqFromPLLSource>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4a7c      	ldr	r2, [pc, #496]	; (8004028 <HAL_RCC_ClockConfig+0x268>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d93f      	bls.n	8003eba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e3a:	4b7a      	ldr	r3, [pc, #488]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d033      	beq.n	8003eba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d12f      	bne.n	8003eba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e5a:	4b72      	ldr	r3, [pc, #456]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e62:	4a70      	ldr	r2, [pc, #448]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e024      	b.n	8003eba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e78:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0c6      	b.n	8004016 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e88:	4b66      	ldr	r3, [pc, #408]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0be      	b.n	8004016 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e98:	f000 f8ce 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4a61      	ldr	r2, [pc, #388]	; (8004028 <HAL_RCC_ClockConfig+0x268>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d909      	bls.n	8003eba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ea6:	4b5f      	ldr	r3, [pc, #380]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eae:	4a5d      	ldr	r2, [pc, #372]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eba:	4b5a      	ldr	r3, [pc, #360]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4957      	ldr	r1, [pc, #348]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ecc:	f7fd fbba 	bl	8001644 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed4:	f7fd fbb6 	bl	8001644 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e095      	b.n	8004016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	4b4e      	ldr	r3, [pc, #312]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 020c 	and.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1eb      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d023      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f14:	4b43      	ldr	r3, [pc, #268]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a42      	ldr	r2, [pc, #264]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f2c:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f34:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b39      	ldr	r3, [pc, #228]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4936      	ldr	r1, [pc, #216]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b80      	cmp	r3, #128	; 0x80
 8003f54:	d105      	bne.n	8003f62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f56:	4b33      	ldr	r3, [pc, #204]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	4a32      	ldr	r2, [pc, #200]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f62:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <HAL_RCC_ClockConfig+0x260>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d21d      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f70:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <HAL_RCC_ClockConfig+0x260>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 020f 	bic.w	r2, r3, #15
 8003f78:	4929      	ldr	r1, [pc, #164]	; (8004020 <HAL_RCC_ClockConfig+0x260>)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f80:	f7fd fb60 	bl	8001644 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fd fb5c 	bl	8001644 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e03b      	b.n	8004016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x260>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d1ed      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4917      	ldr	r1, [pc, #92]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd6:	4b13      	ldr	r3, [pc, #76]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	490f      	ldr	r1, [pc, #60]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fea:	f000 f825 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <HAL_RCC_ClockConfig+0x264>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490c      	ldr	r1, [pc, #48]	; (800402c <HAL_RCC_ClockConfig+0x26c>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x270>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCC_ClockConfig+0x274>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd facc 	bl	80015ac <HAL_InitTick>
 8004014:	4603      	mov	r3, r0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40022000 	.word	0x40022000
 8004024:	40021000 	.word	0x40021000
 8004028:	04c4b400 	.word	0x04c4b400
 800402c:	0800a4c8 	.word	0x0800a4c8
 8004030:	20000040 	.word	0x20000040
 8004034:	20000044 	.word	0x20000044

08004038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b04      	cmp	r3, #4
 8004048:	d102      	bne.n	8004050 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	e047      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004050:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b08      	cmp	r3, #8
 800405a:	d102      	bne.n	8004062 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800405c:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	e03e      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004062:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d136      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	3301      	adds	r3, #1
 8004084:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d10c      	bne.n	80040a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800408c:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004096:	68d2      	ldr	r2, [r2, #12]
 8004098:	0a12      	lsrs	r2, r2, #8
 800409a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	617b      	str	r3, [r7, #20]
      break;
 80040a4:	e00c      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b0:	68d2      	ldr	r2, [r2, #12]
 80040b2:	0a12      	lsrs	r2, r2, #8
 80040b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]
      break;
 80040be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	0e5b      	lsrs	r3, r3, #25
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	3301      	adds	r3, #1
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e001      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040e0:	693b      	ldr	r3, [r7, #16]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	007a1200 	.word	0x007a1200

080040fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004102:	4b1e      	ldr	r3, [pc, #120]	; (800417c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	3301      	adds	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d10c      	bne.n	800413a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004120:	4a17      	ldr	r2, [pc, #92]	; (8004180 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	4a14      	ldr	r2, [pc, #80]	; (800417c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800412a:	68d2      	ldr	r2, [r2, #12]
 800412c:	0a12      	lsrs	r2, r2, #8
 800412e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	617b      	str	r3, [r7, #20]
    break;
 8004138:	e00c      	b.n	8004154 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004142:	4a0e      	ldr	r2, [pc, #56]	; (800417c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004144:	68d2      	ldr	r2, [r2, #12]
 8004146:	0a12      	lsrs	r2, r2, #8
 8004148:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800414c:	fb02 f303 	mul.w	r3, r2, r3
 8004150:	617b      	str	r3, [r7, #20]
    break;
 8004152:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	0e5b      	lsrs	r3, r3, #25
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	3301      	adds	r3, #1
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800416e:	687b      	ldr	r3, [r7, #4]
}
 8004170:	4618      	mov	r0, r3
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40021000 	.word	0x40021000
 8004180:	007a1200 	.word	0x007a1200
 8004184:	00f42400 	.word	0x00f42400

08004188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004190:	2300      	movs	r3, #0
 8004192:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004194:	2300      	movs	r3, #0
 8004196:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8098 	beq.w	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041aa:	4b43      	ldr	r3, [pc, #268]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	4b40      	ldr	r3, [pc, #256]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	4a3f      	ldr	r2, [pc, #252]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c0:	6593      	str	r3, [r2, #88]	; 0x58
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ce:	2301      	movs	r3, #1
 80041d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d2:	4b3a      	ldr	r3, [pc, #232]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a39      	ldr	r2, [pc, #228]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041de:	f7fd fa31 	bl	8001644 <HAL_GetTick>
 80041e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041e4:	e009      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e6:	f7fd fa2d 	bl	8001644 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d902      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	74fb      	strb	r3, [r7, #19]
        break;
 80041f8:	e005      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041fa:	4b30      	ldr	r3, [pc, #192]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ef      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d159      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800420c:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004216:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01e      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	429a      	cmp	r2, r3
 8004226:	d019      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004232:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004234:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004244:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004254:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d016      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd f9ed 	bl	8001644 <HAL_GetTick>
 800426a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426c:	e00b      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426e:	f7fd f9e9 	bl	8001644 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f241 3288 	movw	r2, #5000	; 0x1388
 800427c:	4293      	cmp	r3, r2
 800427e:	d902      	bls.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	74fb      	strb	r3, [r7, #19]
            break;
 8004284:	e006      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004286:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ec      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800429a:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	4903      	ldr	r1, [pc, #12]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042b0:	e008      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	74bb      	strb	r3, [r7, #18]
 80042b6:	e005      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c4:	7c7b      	ldrb	r3, [r7, #17]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d105      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ca:	4ba6      	ldr	r3, [pc, #664]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ce:	4aa5      	ldr	r2, [pc, #660]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042e2:	4ba0      	ldr	r3, [pc, #640]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f023 0203 	bic.w	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	499c      	ldr	r1, [pc, #624]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004304:	4b97      	ldr	r3, [pc, #604]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f023 020c 	bic.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	4994      	ldr	r1, [pc, #592]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004326:	4b8f      	ldr	r3, [pc, #572]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	498b      	ldr	r1, [pc, #556]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004348:	4b86      	ldr	r3, [pc, #536]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	4983      	ldr	r1, [pc, #524]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800436a:	4b7e      	ldr	r3, [pc, #504]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	497a      	ldr	r1, [pc, #488]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800438c:	4b75      	ldr	r3, [pc, #468]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	4972      	ldr	r1, [pc, #456]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ae:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4969      	ldr	r1, [pc, #420]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043d0:	4b64      	ldr	r3, [pc, #400]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4961      	ldr	r1, [pc, #388]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043f2:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	4958      	ldr	r1, [pc, #352]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004414:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	4950      	ldr	r1, [pc, #320]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004432:	d105      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004434:	4b4b      	ldr	r3, [pc, #300]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a4a      	ldr	r2, [pc, #296]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800444c:	4b45      	ldr	r3, [pc, #276]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	4942      	ldr	r1, [pc, #264]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446a:	d105      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446c:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a3c      	ldr	r2, [pc, #240]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004476:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004484:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	4934      	ldr	r1, [pc, #208]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a2:	d105      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a4:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a2e      	ldr	r2, [pc, #184]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d015      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044bc:	4b29      	ldr	r3, [pc, #164]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	4926      	ldr	r1, [pc, #152]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044da:	d105      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044dc:	4b21      	ldr	r3, [pc, #132]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a20      	ldr	r2, [pc, #128]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d015      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	4918      	ldr	r1, [pc, #96]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004512:	d105      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a12      	ldr	r2, [pc, #72]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800451e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d015      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800452c:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	490a      	ldr	r1, [pc, #40]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800454a:	d105      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a04      	ldr	r2, [pc, #16]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004556:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004558:	7cbb      	ldrb	r3, [r7, #18]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e049      	b.n	800460e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fe5e 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f000 fde8 	bl	800517c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	d001      	beq.n	8004630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e04a      	b.n	80046c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a21      	ldr	r2, [pc, #132]	; (80046d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d018      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x6c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d013      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x6c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00e      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x6c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1c      	ldr	r2, [pc, #112]	; (80046dc <HAL_TIM_Base_Start_IT+0xc4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x6c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d004      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x6c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d115      	bne.n	80046b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800468c:	4013      	ands	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b06      	cmp	r3, #6
 8004694:	d015      	beq.n	80046c2 <HAL_TIM_Base_Start_IT+0xaa>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d011      	beq.n	80046c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	e008      	b.n	80046c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e000      	b.n	80046c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40013400 	.word	0x40013400
 80046e4:	40014000 	.word	0x40014000
 80046e8:	00010007 	.word	0x00010007

080046ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e049      	b.n	8004792 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fc94 	bl	8001040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f000 fd26 	bl	800517c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_TIM_PWM_Start+0x24>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e03c      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d109      	bne.n	80047da <HAL_TIM_PWM_Start+0x3e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	e02f      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d109      	bne.n	80047f4 <HAL_TIM_PWM_Start+0x58>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e022      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d109      	bne.n	800480e <HAL_TIM_PWM_Start+0x72>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	bf14      	ite	ne
 8004806:	2301      	movne	r3, #1
 8004808:	2300      	moveq	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e015      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b10      	cmp	r3, #16
 8004812:	d109      	bne.n	8004828 <HAL_TIM_PWM_Start+0x8c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e008      	b.n	800483a <HAL_TIM_PWM_Start+0x9e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e097      	b.n	8004972 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start+0xb6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004850:	e023      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Start+0xc6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	e01b      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Start+0xd6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	e013      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b0c      	cmp	r3, #12
 8004876:	d104      	bne.n	8004882 <HAL_TIM_PWM_Start+0xe6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004880:	e00b      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b10      	cmp	r3, #16
 8004886:	d104      	bne.n	8004892 <HAL_TIM_PWM_Start+0xf6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004890:	e003      	b.n	800489a <HAL_TIM_PWM_Start+0xfe>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2201      	movs	r2, #1
 80048a0:	6839      	ldr	r1, [r7, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fff0 	bl	8005888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a33      	ldr	r2, [pc, #204]	; (800497c <HAL_TIM_PWM_Start+0x1e0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_TIM_PWM_Start+0x13e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a32      	ldr	r2, [pc, #200]	; (8004980 <HAL_TIM_PWM_Start+0x1e4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <HAL_TIM_PWM_Start+0x13e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_TIM_PWM_Start+0x1e8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_TIM_PWM_Start+0x13e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2f      	ldr	r2, [pc, #188]	; (8004988 <HAL_TIM_PWM_Start+0x1ec>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_TIM_PWM_Start+0x13e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2d      	ldr	r2, [pc, #180]	; (800498c <HAL_TIM_PWM_Start+0x1f0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_TIM_PWM_Start+0x142>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_TIM_PWM_Start+0x144>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a20      	ldr	r2, [pc, #128]	; (800497c <HAL_TIM_PWM_Start+0x1e0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d018      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d013      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a20      	ldr	r2, [pc, #128]	; (8004990 <HAL_TIM_PWM_Start+0x1f4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_TIM_PWM_Start+0x1f8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a17      	ldr	r2, [pc, #92]	; (8004980 <HAL_TIM_PWM_Start+0x1e4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_TIM_PWM_Start+0x194>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a16      	ldr	r2, [pc, #88]	; (8004984 <HAL_TIM_PWM_Start+0x1e8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d115      	bne.n	800495c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_TIM_PWM_Start+0x1fc>)
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b06      	cmp	r3, #6
 8004940:	d015      	beq.n	800496e <HAL_TIM_PWM_Start+0x1d2>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004948:	d011      	beq.n	800496e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495a:	e008      	b.n	800496e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e000      	b.n	8004970 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40013400 	.word	0x40013400
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	00010007 	.word	0x00010007

0800499c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e097      	b.n	8004ae0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fc fb83 	bl	80010d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80049e0:	f023 0307 	bic.w	r3, r3, #7
 80049e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f000 fbc3 	bl	800517c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a3c:	f023 030c 	bic.w	r3, r3, #12
 8004a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	011a      	lsls	r2, r3, #4
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	031b      	lsls	r3, r3, #12
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d110      	bne.n	8004b3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d102      	bne.n	8004b24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b1e:	7b7b      	ldrb	r3, [r7, #13]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d001      	beq.n	8004b28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e069      	b.n	8004bfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b38:	e031      	b.n	8004b9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d110      	bne.n	8004b62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d102      	bne.n	8004b4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b46:	7b3b      	ldrb	r3, [r7, #12]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d001      	beq.n	8004b50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e055      	b.n	8004bfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b60:	e01d      	b.n	8004b9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d108      	bne.n	8004b7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b68:	7bbb      	ldrb	r3, [r7, #14]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d105      	bne.n	8004b7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b6e:	7b7b      	ldrb	r3, [r7, #13]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d102      	bne.n	8004b7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b74:	7b3b      	ldrb	r3, [r7, #12]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d001      	beq.n	8004b7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e03e      	b.n	8004bfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_TIM_Encoder_Start+0xc4>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d008      	beq.n	8004bbc <HAL_TIM_Encoder_Start+0xd4>
 8004baa:	e00f      	b.n	8004bcc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fe67 	bl	8005888 <TIM_CCxChannelCmd>
      break;
 8004bba:	e016      	b.n	8004bea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	2104      	movs	r1, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fe5f 	bl	8005888 <TIM_CCxChannelCmd>
      break;
 8004bca:	e00e      	b.n	8004bea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fe57 	bl	8005888 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2201      	movs	r2, #1
 8004be0:	2104      	movs	r1, #4
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fe50 	bl	8005888 <TIM_CCxChannelCmd>
      break;
 8004be8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d122      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d11b      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0202 	mvn.w	r2, #2
 8004c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa7a 	bl	8005140 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fa6c 	bl	800512c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fa7d 	bl	8005154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d122      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d11b      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0204 	mvn.w	r2, #4
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa50 	bl	8005140 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fa42 	bl	800512c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fa53 	bl	8005154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d122      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d11b      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0208 	mvn.w	r2, #8
 8004cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa26 	bl	8005140 <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa18 	bl	800512c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fa29 	bl	8005154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d122      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d11b      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0210 	mvn.w	r2, #16
 8004d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2208      	movs	r2, #8
 8004d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f9fc 	bl	8005140 <HAL_TIM_IC_CaptureCallback>
 8004d48:	e005      	b.n	8004d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f9ee 	bl	800512c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f9ff 	bl	8005154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d10e      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0201 	mvn.w	r2, #1
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fb fb56 	bl	8000434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d10e      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da0:	2b80      	cmp	r3, #128	; 0x80
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 febc 	bl	8005b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc2:	d10e      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d107      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 feaf 	bl	8005b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d10e      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d107      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f9ad 	bl	8005168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d10e      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d107      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f06f 0220 	mvn.w	r2, #32
 8004e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fe6f 	bl	8005b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e48:	d10f      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e58:	d107      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fe75 	bl	8005b54 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e78:	d10f      	bne.n	8004e9a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e88:	d107      	bne.n	8004e9a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fe67 	bl	8005b68 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea8:	d10f      	bne.n	8004eca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb8:	d107      	bne.n	8004eca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fe59 	bl	8005b7c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ed8:	d10f      	bne.n	8004efa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fe4b 	bl	8005b90 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0ff      	b.n	8005122 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b14      	cmp	r3, #20
 8004f2e:	f200 80f0 	bhi.w	8005112 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08005113 	.word	0x08005113
 8004f40:	08005113 	.word	0x08005113
 8004f44:	08005113 	.word	0x08005113
 8004f48:	08004fcd 	.word	0x08004fcd
 8004f4c:	08005113 	.word	0x08005113
 8004f50:	08005113 	.word	0x08005113
 8004f54:	08005113 	.word	0x08005113
 8004f58:	0800500f 	.word	0x0800500f
 8004f5c:	08005113 	.word	0x08005113
 8004f60:	08005113 	.word	0x08005113
 8004f64:	08005113 	.word	0x08005113
 8004f68:	0800504f 	.word	0x0800504f
 8004f6c:	08005113 	.word	0x08005113
 8004f70:	08005113 	.word	0x08005113
 8004f74:	08005113 	.word	0x08005113
 8004f78:	08005091 	.word	0x08005091
 8004f7c:	08005113 	.word	0x08005113
 8004f80:	08005113 	.word	0x08005113
 8004f84:	08005113 	.word	0x08005113
 8004f88:	080050d1 	.word	0x080050d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f982 	bl	800529c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0208 	orr.w	r2, r2, #8
 8004fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0204 	bic.w	r2, r2, #4
 8004fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6999      	ldr	r1, [r3, #24]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	619a      	str	r2, [r3, #24]
      break;
 8004fca:	e0a5      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f9f2 	bl	80053bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6999      	ldr	r1, [r3, #24]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	619a      	str	r2, [r3, #24]
      break;
 800500c:	e084      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fa5b 	bl	80054d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0208 	orr.w	r2, r2, #8
 8005028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0204 	bic.w	r2, r2, #4
 8005038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69d9      	ldr	r1, [r3, #28]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	61da      	str	r2, [r3, #28]
      break;
 800504c:	e064      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fac3 	bl	80055e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69d9      	ldr	r1, [r3, #28]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	021a      	lsls	r2, r3, #8
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	61da      	str	r2, [r3, #28]
      break;
 800508e:	e043      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fb2c 	bl	80056f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0208 	orr.w	r2, r2, #8
 80050aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050ce:	e023      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fb70 	bl	80057bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005110:	e002      	b.n	8005118 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
      break;
 8005116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop

0800512c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a3c      	ldr	r2, [pc, #240]	; (8005280 <TIM_Base_SetConfig+0x104>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_Base_SetConfig+0x38>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519a:	d00b      	beq.n	80051b4 <TIM_Base_SetConfig+0x38>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a39      	ldr	r2, [pc, #228]	; (8005284 <TIM_Base_SetConfig+0x108>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_Base_SetConfig+0x38>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a38      	ldr	r2, [pc, #224]	; (8005288 <TIM_Base_SetConfig+0x10c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0x38>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a37      	ldr	r2, [pc, #220]	; (800528c <TIM_Base_SetConfig+0x110>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d108      	bne.n	80051c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a2d      	ldr	r2, [pc, #180]	; (8005280 <TIM_Base_SetConfig+0x104>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01b      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d4:	d017      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2a      	ldr	r2, [pc, #168]	; (8005284 <TIM_Base_SetConfig+0x108>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a29      	ldr	r2, [pc, #164]	; (8005288 <TIM_Base_SetConfig+0x10c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00f      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a28      	ldr	r2, [pc, #160]	; (800528c <TIM_Base_SetConfig+0x110>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00b      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a27      	ldr	r2, [pc, #156]	; (8005290 <TIM_Base_SetConfig+0x114>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a26      	ldr	r2, [pc, #152]	; (8005294 <TIM_Base_SetConfig+0x118>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_Base_SetConfig+0x8a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a25      	ldr	r2, [pc, #148]	; (8005298 <TIM_Base_SetConfig+0x11c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d108      	bne.n	8005218 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a10      	ldr	r2, [pc, #64]	; (8005280 <TIM_Base_SetConfig+0x104>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00f      	beq.n	8005264 <TIM_Base_SetConfig+0xe8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a11      	ldr	r2, [pc, #68]	; (800528c <TIM_Base_SetConfig+0x110>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00b      	beq.n	8005264 <TIM_Base_SetConfig+0xe8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a10      	ldr	r2, [pc, #64]	; (8005290 <TIM_Base_SetConfig+0x114>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <TIM_Base_SetConfig+0xe8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a0f      	ldr	r2, [pc, #60]	; (8005294 <TIM_Base_SetConfig+0x118>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0xe8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a0e      	ldr	r2, [pc, #56]	; (8005298 <TIM_Base_SetConfig+0x11c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	615a      	str	r2, [r3, #20]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40012c00 	.word	0x40012c00
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800
 800528c:	40013400 	.word	0x40013400
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800

0800529c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f023 0302 	bic.w	r3, r3, #2
 80052e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a2c      	ldr	r2, [pc, #176]	; (80053a8 <TIM_OC1_SetConfig+0x10c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00f      	beq.n	800531c <TIM_OC1_SetConfig+0x80>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a2b      	ldr	r2, [pc, #172]	; (80053ac <TIM_OC1_SetConfig+0x110>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <TIM_OC1_SetConfig+0x80>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <TIM_OC1_SetConfig+0x114>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_OC1_SetConfig+0x80>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <TIM_OC1_SetConfig+0x118>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC1_SetConfig+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <TIM_OC1_SetConfig+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10c      	bne.n	8005336 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0308 	bic.w	r3, r3, #8
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 0304 	bic.w	r3, r3, #4
 8005334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <TIM_OC1_SetConfig+0x10c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <TIM_OC1_SetConfig+0xc2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <TIM_OC1_SetConfig+0x110>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_OC1_SetConfig+0xc2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <TIM_OC1_SetConfig+0x114>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_OC1_SetConfig+0xc2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <TIM_OC1_SetConfig+0x118>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_OC1_SetConfig+0xc2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <TIM_OC1_SetConfig+0x11c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d111      	bne.n	8005382 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800536c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40013400 	.word	0x40013400
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800

080053bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0210 	bic.w	r2, r3, #16
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0320 	bic.w	r3, r3, #32
 800540a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a28      	ldr	r2, [pc, #160]	; (80054bc <TIM_OC2_SetConfig+0x100>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d003      	beq.n	8005428 <TIM_OC2_SetConfig+0x6c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <TIM_OC2_SetConfig+0x104>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d10d      	bne.n	8005444 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005442:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <TIM_OC2_SetConfig+0x100>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00f      	beq.n	800546c <TIM_OC2_SetConfig+0xb0>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <TIM_OC2_SetConfig+0x104>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00b      	beq.n	800546c <TIM_OC2_SetConfig+0xb0>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <TIM_OC2_SetConfig+0x108>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_OC2_SetConfig+0xb0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a1a      	ldr	r2, [pc, #104]	; (80054c8 <TIM_OC2_SetConfig+0x10c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC2_SetConfig+0xb0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a19      	ldr	r2, [pc, #100]	; (80054cc <TIM_OC2_SetConfig+0x110>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d113      	bne.n	8005494 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40013400 	.word	0x40013400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800

080054d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a27      	ldr	r2, [pc, #156]	; (80055cc <TIM_OC3_SetConfig+0xfc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_OC3_SetConfig+0x6a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <TIM_OC3_SetConfig+0x100>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10d      	bne.n	8005556 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <TIM_OC3_SetConfig+0xfc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00f      	beq.n	800557e <TIM_OC3_SetConfig+0xae>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <TIM_OC3_SetConfig+0x100>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00b      	beq.n	800557e <TIM_OC3_SetConfig+0xae>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1a      	ldr	r2, [pc, #104]	; (80055d4 <TIM_OC3_SetConfig+0x104>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_OC3_SetConfig+0xae>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <TIM_OC3_SetConfig+0x108>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC3_SetConfig+0xae>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a18      	ldr	r2, [pc, #96]	; (80055dc <TIM_OC3_SetConfig+0x10c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d113      	bne.n	80055a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	621a      	str	r2, [r3, #32]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40013400 	.word	0x40013400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800

080055e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800562e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	031b      	lsls	r3, r3, #12
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <TIM_OC4_SetConfig+0x100>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_OC4_SetConfig+0x6c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a27      	ldr	r2, [pc, #156]	; (80056e4 <TIM_OC4_SetConfig+0x104>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d10d      	bne.n	8005668 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	031b      	lsls	r3, r3, #12
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005666:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a1d      	ldr	r2, [pc, #116]	; (80056e0 <TIM_OC4_SetConfig+0x100>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00f      	beq.n	8005690 <TIM_OC4_SetConfig+0xb0>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a1c      	ldr	r2, [pc, #112]	; (80056e4 <TIM_OC4_SetConfig+0x104>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_OC4_SetConfig+0xb0>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a1b      	ldr	r2, [pc, #108]	; (80056e8 <TIM_OC4_SetConfig+0x108>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_OC4_SetConfig+0xb0>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a1a      	ldr	r2, [pc, #104]	; (80056ec <TIM_OC4_SetConfig+0x10c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_OC4_SetConfig+0xb0>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <TIM_OC4_SetConfig+0x110>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d113      	bne.n	80056b8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005696:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800569e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	019b      	lsls	r3, r3, #6
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <TIM_OC5_SetConfig+0xb4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00f      	beq.n	800576e <TIM_OC5_SetConfig+0x7a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a16      	ldr	r2, [pc, #88]	; (80057ac <TIM_OC5_SetConfig+0xb8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_OC5_SetConfig+0x7a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <TIM_OC5_SetConfig+0xbc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_OC5_SetConfig+0x7a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a14      	ldr	r2, [pc, #80]	; (80057b4 <TIM_OC5_SetConfig+0xc0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_OC5_SetConfig+0x7a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <TIM_OC5_SetConfig+0xc4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d109      	bne.n	8005782 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40013400 	.word	0x40013400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800

080057bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	051b      	lsls	r3, r3, #20
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a18      	ldr	r2, [pc, #96]	; (8005874 <TIM_OC6_SetConfig+0xb8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00f      	beq.n	8005838 <TIM_OC6_SetConfig+0x7c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <TIM_OC6_SetConfig+0xbc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00b      	beq.n	8005838 <TIM_OC6_SetConfig+0x7c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a16      	ldr	r2, [pc, #88]	; (800587c <TIM_OC6_SetConfig+0xc0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d007      	beq.n	8005838 <TIM_OC6_SetConfig+0x7c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a15      	ldr	r2, [pc, #84]	; (8005880 <TIM_OC6_SetConfig+0xc4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_OC6_SetConfig+0x7c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a14      	ldr	r2, [pc, #80]	; (8005884 <TIM_OC6_SetConfig+0xc8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d109      	bne.n	800584c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	029b      	lsls	r3, r3, #10
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40013400 	.word	0x40013400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	2201      	movs	r2, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a1a      	ldr	r2, [r3, #32]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	401a      	ands	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e065      	b.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a2c      	ldr	r2, [pc, #176]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2b      	ldr	r2, [pc, #172]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d108      	bne.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005926:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d018      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d013      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a12      	ldr	r2, [pc, #72]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10c      	bne.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005992:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	4313      	orrs	r3, r2
 800599c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40013400 	.word	0x40013400
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40014000 	.word	0x40014000

080059d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e087      	b.n	8005b04 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a27      	ldr	r2, [pc, #156]	; (8005b10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a25      	ldr	r2, [pc, #148]	; (8005b14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d106      	bne.n	8005a90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d126      	bne.n	8005af2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	051b      	lsls	r3, r3, #20
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a0e      	ldr	r2, [pc, #56]	; (8005b10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d106      	bne.n	8005af2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40013400 	.word	0x40013400

08005b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bb4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005bb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bda:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005bde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c08:	b084      	sub	sp, #16
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	f107 0014 	add.w	r0, r7, #20
 8005c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	b004      	add	sp, #16
 8005c48:	4770      	bx	lr
	...

08005c4c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b09d      	sub	sp, #116	; 0x74
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	78db      	ldrb	r3, [r3, #3]
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d81f      	bhi.n	8005cbe <USB_ActivateEndpoint+0x72>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <USB_ActivateEndpoint+0x38>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cc7 	.word	0x08005cc7
 8005c90:	08005ca3 	.word	0x08005ca3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005ca0:	e012      	b.n	8005cc8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ca2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ca6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005caa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cae:	e00b      	b.n	8005cc8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005cb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cbc:	e004      	b.n	8005cc8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005cc4:	e000      	b.n	8005cc8 <USB_ActivateEndpoint+0x7c>
      break;
 8005cc6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	441a      	add	r2, r3
 8005cd2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	b21b      	sxth	r3, r3
 8005cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	b21a      	sxth	r2, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b21b      	sxth	r3, r3
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	7b1b      	ldrb	r3, [r3, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 8149 	bne.w	8005fd0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 8084 	beq.w	8005e50 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	4413      	add	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	00da      	lsls	r2, r3, #3
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	88db      	ldrh	r3, [r3, #6]
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	827b      	strh	r3, [r7, #18]
 8005d8a:	8a7b      	ldrh	r3, [r7, #18]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01b      	beq.n	8005dcc <USB_ActivateEndpoint+0x180>
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	823b      	strh	r3, [r7, #16]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	441a      	add	r2, r3
 8005db6:	8a3b      	ldrh	r3, [r7, #16]
 8005db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	78db      	ldrb	r3, [r3, #3]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d020      	beq.n	8005e16 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dea:	81bb      	strh	r3, [r7, #12]
 8005dec:	89bb      	ldrh	r3, [r7, #12]
 8005dee:	f083 0320 	eor.w	r3, r3, #32
 8005df2:	81bb      	strh	r3, [r7, #12]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	441a      	add	r2, r3
 8005dfe:	89bb      	ldrh	r3, [r7, #12]
 8005e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	8013      	strh	r3, [r2, #0]
 8005e14:	e2a6      	b.n	8006364 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e2c:	81fb      	strh	r3, [r7, #14]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	441a      	add	r2, r3
 8005e38:	89fb      	ldrh	r3, [r7, #14]
 8005e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	8013      	strh	r3, [r2, #0]
 8005e4e:	e289      	b.n	8006364 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	633b      	str	r3, [r7, #48]	; 0x30
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	4413      	add	r3, r2
 8005e62:	633b      	str	r3, [r7, #48]	; 0x30
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	00da      	lsls	r2, r3, #3
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	88db      	ldrh	r3, [r3, #6]
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	4413      	add	r3, r2
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	00da      	lsls	r2, r3, #3
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b3e      	cmp	r3, #62	; 0x3e
 8005eae:	d918      	bls.n	8005ee2 <USB_ActivateEndpoint+0x296>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <USB_ActivateEndpoint+0x27e>
 8005ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	029b      	lsls	r3, r3, #10
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	e029      	b.n	8005f36 <USB_ActivateEndpoint+0x2ea>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d112      	bne.n	8005f10 <USB_ActivateEndpoint+0x2c4>
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	e012      	b.n	8005f36 <USB_ActivateEndpoint+0x2ea>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <USB_ActivateEndpoint+0x2de>
 8005f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f26:	3301      	adds	r3, #1
 8005f28:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	029b      	lsls	r3, r3, #10
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01b      	beq.n	8005f86 <USB_ActivateEndpoint+0x33a>
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	843b      	strh	r3, [r7, #32]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	8c3b      	ldrh	r3, [r7, #32]
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9c:	83fb      	strh	r3, [r7, #30]
 8005f9e:	8bfb      	ldrh	r3, [r7, #30]
 8005fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fa4:	83fb      	strh	r3, [r7, #30]
 8005fa6:	8bfb      	ldrh	r3, [r7, #30]
 8005fa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fac:	83fb      	strh	r3, [r7, #30]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	8bfb      	ldrh	r3, [r7, #30]
 8005fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	8013      	strh	r3, [r2, #0]
 8005fce:	e1c9      	b.n	8006364 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	78db      	ldrb	r3, [r3, #3]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d11e      	bne.n	8006016 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006008:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800600c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]
 8006014:	e01d      	b.n	8006052 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	441a      	add	r2, r3
 800603a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800603e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604e:	b29b      	uxth	r3, r3
 8006050:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605c:	b29b      	uxth	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006062:	4413      	add	r3, r2
 8006064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	00da      	lsls	r2, r3, #3
 800606c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800606e:	4413      	add	r3, r2
 8006070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006074:	65bb      	str	r3, [r7, #88]	; 0x58
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	891b      	ldrh	r3, [r3, #8]
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	b29b      	uxth	r3, r3
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	b29a      	uxth	r2, r3
 8006082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	657b      	str	r3, [r7, #84]	; 0x54
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006090:	b29b      	uxth	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006096:	4413      	add	r3, r2
 8006098:	657b      	str	r3, [r7, #84]	; 0x54
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	00da      	lsls	r2, r3, #3
 80060a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a2:	4413      	add	r3, r2
 80060a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060a8:	653b      	str	r3, [r7, #80]	; 0x50
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	895b      	ldrh	r3, [r3, #10]
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f040 8093 	bne.w	80061ea <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01b      	beq.n	8006118 <USB_ActivateEndpoint+0x4cc>
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006114:	b29b      	uxth	r3, r3
 8006116:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006126:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01b      	beq.n	8006168 <USB_ActivateEndpoint+0x51c>
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	441a      	add	r2, r3
 8006152:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006160:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006164:	b29b      	uxth	r3, r3
 8006166:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800617a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006180:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006182:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006186:	873b      	strh	r3, [r7, #56]	; 0x38
 8006188:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800618a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800618e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	441a      	add	r2, r3
 800619a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800619c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]
 80061e8:	e0bc      	b.n	8006364 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80061fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01d      	beq.n	8006242 <USB_ActivateEndpoint+0x5f6>
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800622e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800623a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623e:	b29b      	uxth	r3, r3
 8006240:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006252:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01d      	beq.n	800629a <USB_ActivateEndpoint+0x64e>
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006274:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006292:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006296:	b29b      	uxth	r3, r3
 8006298:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	78db      	ldrb	r3, [r3, #3]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d024      	beq.n	80062ec <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80062bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80062c0:	f083 0320 	eor.w	r3, r3, #32
 80062c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80062d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8013      	strh	r3, [r2, #0]
 80062ea:	e01d      	b.n	8006328 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006302:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	441a      	add	r2, r3
 8006310:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006324:	b29b      	uxth	r3, r3
 8006326:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	441a      	add	r2, r3
 800634c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006360:	b29b      	uxth	r3, r3
 8006362:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006364:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006368:	4618      	mov	r0, r3
 800636a:	3774      	adds	r7, #116	; 0x74
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006374:	b480      	push	{r7}
 8006376:	b08d      	sub	sp, #52	; 0x34
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	7b1b      	ldrb	r3, [r3, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 808e 	bne.w	80064a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d044      	beq.n	800641a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	81bb      	strh	r3, [r7, #12]
 800639e:	89bb      	ldrh	r3, [r7, #12]
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01b      	beq.n	80063e0 <USB_DeactivateEndpoint+0x6c>
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	817b      	strh	r3, [r7, #10]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	441a      	add	r2, r3
 80063ca:	897b      	ldrh	r3, [r7, #10]
 80063cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063dc:	b29b      	uxth	r3, r3
 80063de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f6:	813b      	strh	r3, [r7, #8]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	441a      	add	r2, r3
 8006402:	893b      	ldrh	r3, [r7, #8]
 8006404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006414:	b29b      	uxth	r3, r3
 8006416:	8013      	strh	r3, [r2, #0]
 8006418:	e192      	b.n	8006740 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	827b      	strh	r3, [r7, #18]
 8006428:	8a7b      	ldrh	r3, [r7, #18]
 800642a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01b      	beq.n	800646a <USB_DeactivateEndpoint+0xf6>
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006448:	823b      	strh	r3, [r7, #16]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	441a      	add	r2, r3
 8006454:	8a3b      	ldrh	r3, [r7, #16]
 8006456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800647c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006480:	81fb      	strh	r3, [r7, #14]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	89fb      	ldrh	r3, [r7, #14]
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
 80064a2:	e14d      	b.n	8006740 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f040 80a5 	bne.w	80065f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	843b      	strh	r3, [r7, #32]
 80064bc:	8c3b      	ldrh	r3, [r7, #32]
 80064be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d01b      	beq.n	80064fe <USB_DeactivateEndpoint+0x18a>
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064dc:	83fb      	strh	r3, [r7, #30]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	441a      	add	r2, r3
 80064e8:	8bfb      	ldrh	r3, [r7, #30]
 80064ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	83bb      	strh	r3, [r7, #28]
 800650c:	8bbb      	ldrh	r3, [r7, #28]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01b      	beq.n	800654e <USB_DeactivateEndpoint+0x1da>
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652c:	837b      	strh	r3, [r7, #26]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	441a      	add	r2, r3
 8006538:	8b7b      	ldrh	r3, [r7, #26]
 800653a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800653e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006546:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800654a:	b29b      	uxth	r3, r3
 800654c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006564:	833b      	strh	r3, [r7, #24]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	441a      	add	r2, r3
 8006570:	8b3b      	ldrh	r3, [r7, #24]
 8006572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006582:	b29b      	uxth	r3, r3
 8006584:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659c:	82fb      	strh	r3, [r7, #22]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	8afb      	ldrh	r3, [r7, #22]
 80065aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d4:	82bb      	strh	r3, [r7, #20]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	441a      	add	r2, r3
 80065e0:	8abb      	ldrh	r3, [r7, #20]
 80065e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8013      	strh	r3, [r2, #0]
 80065f6:	e0a3      	b.n	8006740 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006606:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01b      	beq.n	8006648 <USB_DeactivateEndpoint+0x2d4>
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006626:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006644:	b29b      	uxth	r3, r3
 8006646:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01b      	beq.n	8006698 <USB_DeactivateEndpoint+0x324>
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	853b      	strh	r3, [r7, #40]	; 0x28
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006694:	b29b      	uxth	r3, r3
 8006696:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	441a      	add	r2, r3
 80066ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	441a      	add	r2, r3
 80066f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006704:	b29b      	uxth	r3, r3
 8006706:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800672c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673c:	b29b      	uxth	r3, r3
 800673e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3734      	adds	r7, #52	; 0x34
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b0c2      	sub	sp, #264	; 0x108
 8006752:	af00      	add	r7, sp, #0
 8006754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675c:	6018      	str	r0, [r3, #0]
 800675e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006766:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	f040 867b 	bne.w	8007470 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	429a      	cmp	r2, r3
 8006794:	d908      	bls.n	80067a8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067a6:	e007      	b.n	80067b8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80067a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80067b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	7b1b      	ldrb	r3, [r3, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d13a      	bne.n	800683e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80067c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6959      	ldr	r1, [r3, #20]
 80067d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	88da      	ldrh	r2, [r3, #6]
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067ee:	6800      	ldr	r0, [r0, #0]
 80067f0:	f001 fc1d 	bl	800802e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80067f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	4413      	add	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	00da      	lsls	r2, r3, #3
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	f000 bde3 	b.w	8007404 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800683e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	78db      	ldrb	r3, [r3, #3]
 800684a:	2b02      	cmp	r3, #2
 800684c:	f040 843a 	bne.w	80070c4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6a1a      	ldr	r2, [r3, #32]
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	429a      	cmp	r2, r3
 800686a:	f240 83b7 	bls.w	8006fdc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800686e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006894:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	441a      	add	r2, r3
 80068b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068be:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80068ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6a1a      	ldr	r2, [r3, #32]
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 81b3 	beq.w	8006c76 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006914:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	633b      	str	r3, [r7, #48]	; 0x30
 800691c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d16d      	bne.n	8006a08 <USB_EPStartXfer+0x2ba>
 800692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	62bb      	str	r3, [r7, #40]	; 0x28
 8006938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006946:	b29b      	uxth	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	4413      	add	r3, r2
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	00da      	lsls	r2, r3, #3
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	4413      	add	r3, r2
 8006962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696c:	2b3e      	cmp	r3, #62	; 0x3e
 800696e:	d91c      	bls.n	80069aa <USB_EPStartXfer+0x25c>
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006974:	095b      	lsrs	r3, r3, #5
 8006976:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <USB_EPStartXfer+0x242>
 8006986:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800698a:	3b01      	subs	r3, #1
 800698c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006990:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006994:	b29b      	uxth	r3, r3
 8006996:	029b      	lsls	r3, r3, #10
 8006998:	b29b      	uxth	r3, r3
 800699a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	801a      	strh	r2, [r3, #0]
 80069a8:	e053      	b.n	8006a52 <USB_EPStartXfer+0x304>
 80069aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d112      	bne.n	80069d8 <USB_EPStartXfer+0x28a>
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069bc:	b29a      	uxth	r2, r3
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	801a      	strh	r2, [r3, #0]
 80069d6:	e03c      	b.n	8006a52 <USB_EPStartXfer+0x304>
 80069d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069dc:	085b      	lsrs	r3, r3, #1
 80069de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <USB_EPStartXfer+0x2aa>
 80069ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069f2:	3301      	adds	r3, #1
 80069f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	029b      	lsls	r3, r3, #10
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	e024      	b.n	8006a52 <USB_EPStartXfer+0x304>
 8006a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d11c      	bne.n	8006a52 <USB_EPStartXfer+0x304>
 8006a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	4413      	add	r3, r2
 8006a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	00da      	lsls	r2, r3, #3
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	4413      	add	r3, r2
 8006a42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	895b      	ldrh	r3, [r3, #10]
 8006a5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6959      	ldr	r1, [r3, #20]
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a80:	6800      	ldr	r0, [r0, #0]
 8006a82:	f001 fad4 	bl	800802e <USB_WritePMA>
            ep->xfer_buff += len;
 8006a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695a      	ldr	r2, [r3, #20]
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a96:	441a      	add	r2, r3
 8006a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d90f      	bls.n	8006ae0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a1a      	ldr	r2, [r3, #32]
 8006acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	621a      	str	r2, [r3, #32]
 8006ade:	e00e      	b.n	8006afe <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d16d      	bne.n	8006bea <USB_EPStartXfer+0x49c>
 8006b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	4413      	add	r3, r2
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	00da      	lsls	r2, r3, #3
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	4413      	add	r3, r2
 8006b44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b50:	d91c      	bls.n	8006b8c <USB_EPStartXfer+0x43e>
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b60:	f003 031f 	and.w	r3, r3, #31
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <USB_EPStartXfer+0x424>
 8006b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	029b      	lsls	r3, r3, #10
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	801a      	strh	r2, [r3, #0]
 8006b8a:	e059      	b.n	8006c40 <USB_EPStartXfer+0x4f2>
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d112      	bne.n	8006bba <USB_EPStartXfer+0x46c>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	e042      	b.n	8006c40 <USB_EPStartXfer+0x4f2>
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbe:	085b      	lsrs	r3, r3, #1
 8006bc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <USB_EPStartXfer+0x48c>
 8006bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	029b      	lsls	r3, r3, #10
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	801a      	strh	r2, [r3, #0]
 8006be8:	e02a      	b.n	8006c40 <USB_EPStartXfer+0x4f2>
 8006bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d122      	bne.n	8006c40 <USB_EPStartXfer+0x4f2>
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	623b      	str	r3, [r7, #32]
 8006c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	00da      	lsls	r2, r3, #3
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	891b      	ldrh	r3, [r3, #8]
 8006c4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6959      	ldr	r1, [r3, #20]
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c6e:	6800      	ldr	r0, [r0, #0]
 8006c70:	f001 f9dd 	bl	800802e <USB_WritePMA>
 8006c74:	e3c6      	b.n	8007404 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d16d      	bne.n	8006d62 <USB_EPStartXfer+0x614>
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca6:	4413      	add	r3, r2
 8006ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	00da      	lsls	r2, r3, #3
 8006cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cba:	4413      	add	r3, r2
 8006cbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006cc8:	d91c      	bls.n	8006d04 <USB_EPStartXfer+0x5b6>
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <USB_EPStartXfer+0x59c>
 8006ce0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e059      	b.n	8006db8 <USB_EPStartXfer+0x66a>
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d112      	bne.n	8006d32 <USB_EPStartXfer+0x5e4>
 8006d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	e042      	b.n	8006db8 <USB_EPStartXfer+0x66a>
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <USB_EPStartXfer+0x604>
 8006d48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	029b      	lsls	r3, r3, #10
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	e02a      	b.n	8006db8 <USB_EPStartXfer+0x66a>
 8006d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d122      	bne.n	8006db8 <USB_EPStartXfer+0x66a>
 8006d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d92:	4413      	add	r3, r2
 8006d94:	653b      	str	r3, [r7, #80]	; 0x50
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	00da      	lsls	r2, r3, #3
 8006da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da6:	4413      	add	r3, r2
 8006da8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	891b      	ldrh	r3, [r3, #8]
 8006dc4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6959      	ldr	r1, [r3, #20]
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dde:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006de2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006de6:	6800      	ldr	r0, [r0, #0]
 8006de8:	f001 f921 	bl	800802e <USB_WritePMA>
            ep->xfer_buff += len;
 8006dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695a      	ldr	r2, [r3, #20]
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfc:	441a      	add	r2, r3
 8006dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d90f      	bls.n	8006e46 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6a1a      	ldr	r2, [r3, #32]
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e36:	1ad2      	subs	r2, r2, r3
 8006e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	621a      	str	r2, [r3, #32]
 8006e44:	e00e      	b.n	8006e64 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2200      	movs	r2, #0
 8006e62:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d16d      	bne.n	8006f5c <USB_EPStartXfer+0x80e>
 8006e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	4413      	add	r3, r2
 8006ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	00da      	lsls	r2, r3, #3
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ec2:	d91c      	bls.n	8006efe <USB_EPStartXfer+0x7b0>
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <USB_EPStartXfer+0x796>
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	e053      	b.n	8006fa6 <USB_EPStartXfer+0x858>
 8006efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d112      	bne.n	8006f2c <USB_EPStartXfer+0x7de>
 8006f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	e03c      	b.n	8006fa6 <USB_EPStartXfer+0x858>
 8006f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <USB_EPStartXfer+0x7fe>
 8006f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f46:	3301      	adds	r3, #1
 8006f48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	029b      	lsls	r3, r3, #10
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	e024      	b.n	8006fa6 <USB_EPStartXfer+0x858>
 8006f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d11c      	bne.n	8006fa6 <USB_EPStartXfer+0x858>
 8006f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f80:	4413      	add	r3, r2
 8006f82:	643b      	str	r3, [r7, #64]	; 0x40
 8006f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	00da      	lsls	r2, r3, #3
 8006f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f94:	4413      	add	r3, r2
 8006f96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	895b      	ldrh	r3, [r3, #10]
 8006fb2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6959      	ldr	r1, [r3, #20]
 8006fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fcc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fd0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fd4:	6800      	ldr	r0, [r0, #0]
 8006fd6:	f001 f82a 	bl	800802e <USB_WritePMA>
 8006fda:	e213      	b.n	8007404 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	441a      	add	r2, r3
 8007030:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	b29b      	uxth	r3, r3
 8007046:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007062:	b29b      	uxth	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007068:	4413      	add	r3, r2
 800706a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800706c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	00da      	lsls	r2, r3, #3
 800707a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800707c:	4413      	add	r3, r2
 800707e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007082:	65bb      	str	r3, [r7, #88]	; 0x58
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007088:	b29a      	uxth	r2, r3
 800708a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800708c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	891b      	ldrh	r3, [r3, #8]
 800709a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800709e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6959      	ldr	r1, [r3, #20]
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070bc:	6800      	ldr	r0, [r0, #0]
 80070be:	f000 ffb6 	bl	800802e <USB_WritePMA>
 80070c2:	e19f      	b.n	8007404 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80070c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6a1a      	ldr	r2, [r3, #32]
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80bc 	beq.w	8007282 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800710a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	673b      	str	r3, [r7, #112]	; 0x70
 8007116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d16d      	bne.n	8007202 <USB_EPStartXfer+0xab4>
 8007126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	66bb      	str	r3, [r7, #104]	; 0x68
 8007132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007140:	b29b      	uxth	r3, r3
 8007142:	461a      	mov	r2, r3
 8007144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007146:	4413      	add	r3, r2
 8007148:	66bb      	str	r3, [r7, #104]	; 0x68
 800714a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	00da      	lsls	r2, r3, #3
 8007158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800715a:	4413      	add	r3, r2
 800715c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007160:	667b      	str	r3, [r7, #100]	; 0x64
 8007162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007166:	2b3e      	cmp	r3, #62	; 0x3e
 8007168:	d91c      	bls.n	80071a4 <USB_EPStartXfer+0xa56>
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <USB_EPStartXfer+0xa3c>
 8007180:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007184:	3b01      	subs	r3, #1
 8007186:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800718a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719c:	b29a      	uxth	r2, r3
 800719e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	e053      	b.n	800724c <USB_EPStartXfer+0xafe>
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d112      	bne.n	80071d2 <USB_EPStartXfer+0xa84>
 80071ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	e03c      	b.n	800724c <USB_EPStartXfer+0xafe>
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <USB_EPStartXfer+0xaa4>
 80071e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071ec:	3301      	adds	r3, #1
 80071ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	029b      	lsls	r3, r3, #10
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	e024      	b.n	800724c <USB_EPStartXfer+0xafe>
 8007202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d11c      	bne.n	800724c <USB_EPStartXfer+0xafe>
 8007212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007220:	b29b      	uxth	r3, r3
 8007222:	461a      	mov	r2, r3
 8007224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007226:	4413      	add	r3, r2
 8007228:	673b      	str	r3, [r7, #112]	; 0x70
 800722a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	00da      	lsls	r2, r3, #3
 8007238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800723a:	4413      	add	r3, r2
 800723c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007240:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007246:	b29a      	uxth	r2, r3
 8007248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800724c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	895b      	ldrh	r3, [r3, #10]
 8007258:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800725c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6959      	ldr	r1, [r3, #20]
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726c:	b29b      	uxth	r3, r3
 800726e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007272:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007276:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	f000 fed7 	bl	800802e <USB_WritePMA>
 8007280:	e0c0      	b.n	8007404 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d16d      	bne.n	800736e <USB_EPStartXfer+0xc20>
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800729e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072b2:	4413      	add	r3, r2
 80072b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	00da      	lsls	r2, r3, #3
 80072c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072c6:	4413      	add	r3, r2
 80072c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d2:	2b3e      	cmp	r3, #62	; 0x3e
 80072d4:	d91c      	bls.n	8007310 <USB_EPStartXfer+0xbc2>
 80072d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e4:	f003 031f 	and.w	r3, r3, #31
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d104      	bne.n	80072f6 <USB_EPStartXfer+0xba8>
 80072ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80072f0:	3b01      	subs	r3, #1
 80072f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	029b      	lsls	r3, r3, #10
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007308:	b29a      	uxth	r2, r3
 800730a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730c:	801a      	strh	r2, [r3, #0]
 800730e:	e05f      	b.n	80073d0 <USB_EPStartXfer+0xc82>
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007314:	2b00      	cmp	r3, #0
 8007316:	d112      	bne.n	800733e <USB_EPStartXfer+0xbf0>
 8007318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007322:	b29a      	uxth	r2, r3
 8007324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007336:	b29a      	uxth	r2, r3
 8007338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800733a:	801a      	strh	r2, [r3, #0]
 800733c:	e048      	b.n	80073d0 <USB_EPStartXfer+0xc82>
 800733e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <USB_EPStartXfer+0xc10>
 8007354:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007358:	3301      	adds	r3, #1
 800735a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800735e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007362:	b29b      	uxth	r3, r3
 8007364:	029b      	lsls	r3, r3, #10
 8007366:	b29a      	uxth	r2, r3
 8007368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800736a:	801a      	strh	r2, [r3, #0]
 800736c:	e030      	b.n	80073d0 <USB_EPStartXfer+0xc82>
 800736e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d128      	bne.n	80073d0 <USB_EPStartXfer+0xc82>
 800737e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800738c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739a:	b29b      	uxth	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073a2:	4413      	add	r3, r2
 80073a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	00da      	lsls	r2, r3, #3
 80073b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ba:	4413      	add	r3, r2
 80073bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	891b      	ldrh	r3, [r3, #8]
 80073dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6959      	ldr	r1, [r3, #20]
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073fe:	6800      	ldr	r0, [r0, #0]
 8007400:	f000 fe15 	bl	800802e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800742a:	817b      	strh	r3, [r7, #10]
 800742c:	897b      	ldrh	r3, [r7, #10]
 800742e:	f083 0310 	eor.w	r3, r3, #16
 8007432:	817b      	strh	r3, [r7, #10]
 8007434:	897b      	ldrh	r3, [r7, #10]
 8007436:	f083 0320 	eor.w	r3, r3, #32
 800743a:	817b      	strh	r3, [r7, #10]
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	441a      	add	r2, r3
 8007456:	897b      	ldrh	r3, [r7, #10]
 8007458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007468:	b29b      	uxth	r3, r3
 800746a:	8013      	strh	r3, [r2, #0]
 800746c:	f000 bc9f 	b.w	8007dae <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	7b1b      	ldrb	r3, [r3, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f040 80ae 	bne.w	80075de <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	429a      	cmp	r2, r3
 800749c:	d917      	bls.n	80074ce <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800749e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80074ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	619a      	str	r2, [r3, #24]
 80074cc:	e00e      	b.n	80074ec <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80074ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80074de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2200      	movs	r2, #0
 80074ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80074ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007508:	b29b      	uxth	r3, r3
 800750a:	461a      	mov	r2, r3
 800750c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007510:	4413      	add	r3, r2
 8007512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	00da      	lsls	r2, r3, #3
 8007524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007528:	4413      	add	r3, r2
 800752a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800752e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007536:	2b3e      	cmp	r3, #62	; 0x3e
 8007538:	d91d      	bls.n	8007576 <USB_EPStartXfer+0xe28>
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <USB_EPStartXfer+0xe0c>
 8007550:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007554:	3b01      	subs	r3, #1
 8007556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800755a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800755e:	b29b      	uxth	r3, r3
 8007560:	029b      	lsls	r3, r3, #10
 8007562:	b29b      	uxth	r3, r3
 8007564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800756c:	b29a      	uxth	r2, r3
 800756e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	e3e1      	b.n	8007d3a <USB_EPStartXfer+0x15ec>
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800757a:	2b00      	cmp	r3, #0
 800757c:	d116      	bne.n	80075ac <USB_EPStartXfer+0xe5e>
 800757e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800758a:	b29a      	uxth	r2, r3
 800758c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007590:	801a      	strh	r2, [r3, #0]
 8007592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	e3c6      	b.n	8007d3a <USB_EPStartXfer+0x15ec>
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d004      	beq.n	80075cc <USB_EPStartXfer+0xe7e>
 80075c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075c6:	3301      	adds	r3, #1
 80075c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	029b      	lsls	r3, r3, #10
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e3ad      	b.n	8007d3a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	78db      	ldrb	r3, [r3, #3]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	f040 8200 	bne.w	80079f0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8091 	bne.w	8007724 <USB_EPStartXfer+0xfd6>
 8007602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800761e:	b29b      	uxth	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007626:	4413      	add	r3, r2
 8007628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800762c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	00da      	lsls	r2, r3, #3
 800763a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800763e:	4413      	add	r3, r2
 8007640:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b3e      	cmp	r3, #62	; 0x3e
 8007656:	d925      	bls.n	80076a4 <USB_EPStartXfer+0xf56>
 8007658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800766a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 031f 	and.w	r3, r3, #31
 800767a:	2b00      	cmp	r3, #0
 800767c:	d104      	bne.n	8007688 <USB_EPStartXfer+0xf3a>
 800767e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007682:	3b01      	subs	r3, #1
 8007684:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768c:	b29b      	uxth	r3, r3
 800768e:	029b      	lsls	r3, r3, #10
 8007690:	b29b      	uxth	r3, r3
 8007692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769a:	b29a      	uxth	r2, r3
 800769c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076a0:	801a      	strh	r2, [r3, #0]
 80076a2:	e074      	b.n	800778e <USB_EPStartXfer+0x1040>
 80076a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d116      	bne.n	80076e2 <USB_EPStartXfer+0xf94>
 80076b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d8:	b29a      	uxth	r2, r3
 80076da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e055      	b.n	800778e <USB_EPStartXfer+0x1040>
 80076e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	085b      	lsrs	r3, r3, #1
 80076f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d004      	beq.n	8007712 <USB_EPStartXfer+0xfc4>
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770c:	3301      	adds	r3, #1
 800770e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007716:	b29b      	uxth	r3, r3
 8007718:	029b      	lsls	r3, r3, #10
 800771a:	b29a      	uxth	r2, r3
 800771c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	e034      	b.n	800778e <USB_EPStartXfer+0x1040>
 8007724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d12c      	bne.n	800778e <USB_EPStartXfer+0x1040>
 8007734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007750:	b29b      	uxth	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007758:	4413      	add	r3, r2
 800775a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800775e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	00da      	lsls	r2, r3, #3
 800776c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007770:	4413      	add	r3, r2
 8007772:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800777a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	b29a      	uxth	r2, r3
 8007788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800779c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f040 8091 	bne.w	80078d0 <USB_EPStartXfer+0x1182>
 80077ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077d2:	4413      	add	r3, r2
 80077d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	00da      	lsls	r2, r3, #3
 80077e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077ea:	4413      	add	r3, r2
 80077ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b3e      	cmp	r3, #62	; 0x3e
 8007802:	d925      	bls.n	8007850 <USB_EPStartXfer+0x1102>
 8007804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	095b      	lsrs	r3, r3, #5
 8007812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <USB_EPStartXfer+0x10e6>
 800782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782e:	3b01      	subs	r3, #1
 8007830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007838:	b29b      	uxth	r3, r3
 800783a:	029b      	lsls	r3, r3, #10
 800783c:	b29b      	uxth	r3, r3
 800783e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007846:	b29a      	uxth	r2, r3
 8007848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	e06d      	b.n	800792c <USB_EPStartXfer+0x11de>
 8007850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d116      	bne.n	800788e <USB_EPStartXfer+0x1140>
 8007860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29b      	uxth	r3, r3
 8007868:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800786c:	b29a      	uxth	r2, r3
 800786e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007872:	801a      	strh	r2, [r3, #0]
 8007874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007884:	b29a      	uxth	r2, r3
 8007886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	e04e      	b.n	800792c <USB_EPStartXfer+0x11de>
 800788e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	085b      	lsrs	r3, r3, #1
 800789c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <USB_EPStartXfer+0x1170>
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b8:	3301      	adds	r3, #1
 80078ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	029b      	lsls	r3, r3, #10
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	e02d      	b.n	800792c <USB_EPStartXfer+0x11de>
 80078d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d125      	bne.n	800792c <USB_EPStartXfer+0x11de>
 80078e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078f6:	4413      	add	r3, r2
 80078f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	00da      	lsls	r2, r3, #3
 800790a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800790e:	4413      	add	r3, r2
 8007910:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	b29a      	uxth	r2, r3
 8007926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800792a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800792c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 81fe 	beq.w	8007d3a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800793e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800795e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <USB_EPStartXfer+0x1228>
 800796a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800796e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10d      	bne.n	8007992 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007976:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800797a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800797e:	2b00      	cmp	r3, #0
 8007980:	f040 81db 	bne.w	8007d3a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007984:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	f040 81d4 	bne.w	8007d3a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80079bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	441a      	add	r2, r3
 80079d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80079da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	8013      	strh	r3, [r2, #0]
 80079ee:	e1a4      	b.n	8007d3a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80079f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	78db      	ldrb	r3, [r3, #3]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	f040 819a 	bne.w	8007d36 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d917      	bls.n	8007a4e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3e:	1ad2      	subs	r2, r2, r3
 8007a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	619a      	str	r2, [r3, #24]
 8007a4c:	e00e      	b.n	8007a6c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d178      	bne.n	8007b6e <USB_EPStartXfer+0x1420>
 8007a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	00da      	lsls	r2, r3, #3
 8007ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ab8:	4413      	add	r3, r2
 8007aba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ac8:	d91d      	bls.n	8007b06 <USB_EPStartXfer+0x13b8>
 8007aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d104      	bne.n	8007aea <USB_EPStartXfer+0x139c>
 8007ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	029b      	lsls	r3, r3, #10
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	e064      	b.n	8007bd0 <USB_EPStartXfer+0x1482>
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d116      	bne.n	8007b3c <USB_EPStartXfer+0x13ee>
 8007b0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b38:	801a      	strh	r2, [r3, #0]
 8007b3a:	e049      	b.n	8007bd0 <USB_EPStartXfer+0x1482>
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <USB_EPStartXfer+0x140e>
 8007b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b56:	3301      	adds	r3, #1
 8007b58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	029b      	lsls	r3, r3, #10
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	e030      	b.n	8007bd0 <USB_EPStartXfer+0x1482>
 8007b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d128      	bne.n	8007bd0 <USB_EPStartXfer+0x1482>
 8007b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	00da      	lsls	r2, r3, #3
 8007bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bba:	4413      	add	r3, r2
 8007bbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d178      	bne.n	8007ce0 <USB_EPStartXfer+0x1592>
 8007bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c12:	4413      	add	r3, r2
 8007c14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	00da      	lsls	r2, r3, #3
 8007c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c38:	2b3e      	cmp	r3, #62	; 0x3e
 8007c3a:	d91d      	bls.n	8007c78 <USB_EPStartXfer+0x152a>
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d104      	bne.n	8007c5c <USB_EPStartXfer+0x150e>
 8007c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c56:	3b01      	subs	r3, #1
 8007c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	029b      	lsls	r3, r3, #10
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	e060      	b.n	8007d3a <USB_EPStartXfer+0x15ec>
 8007c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d116      	bne.n	8007cae <USB_EPStartXfer+0x1560>
 8007c80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	e045      	b.n	8007d3a <USB_EPStartXfer+0x15ec>
 8007cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <USB_EPStartXfer+0x1580>
 8007cc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cc8:	3301      	adds	r3, #1
 8007cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	029b      	lsls	r3, r3, #10
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	e02c      	b.n	8007d3a <USB_EPStartXfer+0x15ec>
 8007ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d124      	bne.n	8007d3a <USB_EPStartXfer+0x15ec>
 8007cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d06:	4413      	add	r3, r2
 8007d08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	00da      	lsls	r2, r3, #3
 8007d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d1e:	4413      	add	r3, r2
 8007d20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d32:	801a      	strh	r2, [r3, #0]
 8007d34:	e001      	b.n	8007d3a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e03a      	b.n	8007db0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007d64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007d68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007d70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007d74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d78:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	441a      	add	r2, r3
 8007d96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d020      	beq.n	8007e0e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de2:	81bb      	strh	r3, [r7, #12]
 8007de4:	89bb      	ldrh	r3, [r7, #12]
 8007de6:	f083 0310 	eor.w	r3, r3, #16
 8007dea:	81bb      	strh	r3, [r7, #12]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	441a      	add	r2, r3
 8007df6:	89bb      	ldrh	r3, [r7, #12]
 8007df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	8013      	strh	r3, [r2, #0]
 8007e0c:	e01f      	b.n	8007e4e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e24:	81fb      	strh	r3, [r7, #14]
 8007e26:	89fb      	ldrh	r3, [r7, #14]
 8007e28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e2c:	81fb      	strh	r3, [r7, #14]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	441a      	add	r2, r3
 8007e38:	89fb      	ldrh	r3, [r7, #14]
 8007e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	7b1b      	ldrb	r3, [r3, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f040 809d 	bne.w	8007faa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d04c      	beq.n	8007f12 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	823b      	strh	r3, [r7, #16]
 8007e86:	8a3b      	ldrh	r3, [r7, #16]
 8007e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01b      	beq.n	8007ec8 <USB_EPClearStall+0x6c>
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea6:	81fb      	strh	r3, [r7, #14]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	441a      	add	r2, r3
 8007eb2:	89fb      	ldrh	r3, [r7, #14]
 8007eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	78db      	ldrb	r3, [r3, #3]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d06c      	beq.n	8007faa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee6:	81bb      	strh	r3, [r7, #12]
 8007ee8:	89bb      	ldrh	r3, [r7, #12]
 8007eea:	f083 0320 	eor.w	r3, r3, #32
 8007eee:	81bb      	strh	r3, [r7, #12]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	441a      	add	r2, r3
 8007efa:	89bb      	ldrh	r3, [r7, #12]
 8007efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	8013      	strh	r3, [r2, #0]
 8007f10:	e04b      	b.n	8007faa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	82fb      	strh	r3, [r7, #22]
 8007f20:	8afb      	ldrh	r3, [r7, #22]
 8007f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01b      	beq.n	8007f62 <USB_EPClearStall+0x106>
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f40:	82bb      	strh	r3, [r7, #20]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	441a      	add	r2, r3
 8007f4c:	8abb      	ldrh	r3, [r7, #20]
 8007f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f78:	827b      	strh	r3, [r7, #18]
 8007f7a:	8a7b      	ldrh	r3, [r7, #18]
 8007f7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f80:	827b      	strh	r3, [r7, #18]
 8007f82:	8a7b      	ldrh	r3, [r7, #18]
 8007f84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f88:	827b      	strh	r3, [r7, #18]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	441a      	add	r2, r3
 8007f94:	8a7b      	ldrh	r3, [r7, #18]
 8007f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	371c      	adds	r7, #28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d103      	bne.n	8007fd2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2280      	movs	r2, #128	; 0x80
 8007fce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800801c:	b29b      	uxth	r3, r3
 800801e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008020:	68fb      	ldr	r3, [r7, #12]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800802e:	b480      	push	{r7}
 8008030:	b08d      	sub	sp, #52	; 0x34
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	4611      	mov	r1, r2
 800803a:	461a      	mov	r2, r3
 800803c:	460b      	mov	r3, r1
 800803e:	80fb      	strh	r3, [r7, #6]
 8008040:	4613      	mov	r3, r2
 8008042:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008044:	88bb      	ldrh	r3, [r7, #4]
 8008046:	3301      	adds	r3, #1
 8008048:	085b      	lsrs	r3, r3, #1
 800804a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008054:	88fa      	ldrh	r2, [r7, #6]
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800805e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008064:	e01b      	b.n	800809e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	3301      	adds	r3, #1
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b29b      	uxth	r3, r3
 8008078:	021b      	lsls	r3, r3, #8
 800807a:	b29b      	uxth	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	b29a      	uxth	r2, r3
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	3302      	adds	r3, #2
 8008090:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	3301      	adds	r3, #1
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	3b01      	subs	r3, #1
 800809c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e0      	bne.n	8008066 <USB_WritePMA+0x38>
  }
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	3734      	adds	r7, #52	; 0x34
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b08b      	sub	sp, #44	; 0x2c
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	4611      	mov	r1, r2
 80080be:	461a      	mov	r2, r3
 80080c0:	460b      	mov	r3, r1
 80080c2:	80fb      	strh	r3, [r7, #6]
 80080c4:	4613      	mov	r3, r2
 80080c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80080c8:	88bb      	ldrh	r3, [r7, #4]
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080d8:	88fa      	ldrh	r2, [r7, #6]
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080e2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
 80080e8:	e018      	b.n	800811c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	3302      	adds	r3, #2
 80080f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	3301      	adds	r3, #1
 8008104:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	0a1b      	lsrs	r3, r3, #8
 800810a:	b2da      	uxtb	r2, r3
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	3301      	adds	r3, #1
 8008114:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	3b01      	subs	r3, #1
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e3      	bne.n	80080ea <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008122:	88bb      	ldrh	r3, [r7, #4]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	b2da      	uxtb	r2, r3
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	701a      	strb	r2, [r3, #0]
  }
}
 800813e:	bf00      	nop
 8008140:	372c      	adds	r7, #44	; 0x2c
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008156:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800815a:	f002 f901 	bl	800a360 <USBD_static_malloc>
 800815e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800816e:	2302      	movs	r3, #2
 8008170:	e066      	b.n	8008240 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	7c1b      	ldrb	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d119      	bne.n	80081b6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008186:	2202      	movs	r2, #2
 8008188:	2181      	movs	r1, #129	; 0x81
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 ff8d 	bl	800a0aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800819a:	2202      	movs	r2, #2
 800819c:	2101      	movs	r1, #1
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f001 ff83 	bl	800a0aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2210      	movs	r2, #16
 80081b0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80081b4:	e016      	b.n	80081e4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081b6:	2340      	movs	r3, #64	; 0x40
 80081b8:	2202      	movs	r2, #2
 80081ba:	2181      	movs	r1, #129	; 0x81
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 ff74 	bl	800a0aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081c8:	2340      	movs	r3, #64	; 0x40
 80081ca:	2202      	movs	r2, #2
 80081cc:	2101      	movs	r1, #1
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 ff6b 	bl	800a0aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2210      	movs	r2, #16
 80081e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081e4:	2308      	movs	r3, #8
 80081e6:	2203      	movs	r2, #3
 80081e8:	2182      	movs	r1, #130	; 0x82
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 ff5d 	bl	800a0aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7c1b      	ldrb	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008224:	2101      	movs	r1, #1
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f002 f82f 	bl	800a28a <USBD_LL_PrepareReceive>
 800822c:	e007      	b.n	800823e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	2101      	movs	r1, #1
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f002 f826 	bl	800a28a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008254:	2181      	movs	r1, #129	; 0x81
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 ff4d 	bl	800a0f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008262:	2101      	movs	r1, #1
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 ff46 	bl	800a0f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008272:	2182      	movs	r1, #130	; 0x82
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 ff3e 	bl	800a0f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00e      	beq.n	80082b2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a4:	4618      	mov	r0, r3
 80082a6:	f002 f869 	bl	800a37c <USBD_static_free>
    pdev->pClassData = NULL;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e0af      	b.n	8008444 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d03f      	beq.n	8008370 <USBD_CDC_Setup+0xb4>
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	f040 809f 	bne.w	8008434 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	88db      	ldrh	r3, [r3, #6]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d02e      	beq.n	800835c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	b25b      	sxtb	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	da16      	bge.n	8008336 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008314:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	88d2      	ldrh	r2, [r2, #6]
 800831a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	88db      	ldrh	r3, [r3, #6]
 8008320:	2b07      	cmp	r3, #7
 8008322:	bf28      	it	cs
 8008324:	2307      	movcs	r3, #7
 8008326:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	89fa      	ldrh	r2, [r7, #14]
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 facf 	bl	80098d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008334:	e085      	b.n	8008442 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	785a      	ldrb	r2, [r3, #1]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	88db      	ldrh	r3, [r3, #6]
 8008344:	b2da      	uxtb	r2, r3
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800834c:	6939      	ldr	r1, [r7, #16]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	88db      	ldrh	r3, [r3, #6]
 8008352:	461a      	mov	r2, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 fae8 	bl	800992a <USBD_CtlPrepareRx>
      break;
 800835a:	e072      	b.n	8008442 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	7850      	ldrb	r0, [r2, #1]
 8008368:	2200      	movs	r2, #0
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	4798      	blx	r3
      break;
 800836e:	e068      	b.n	8008442 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	785b      	ldrb	r3, [r3, #1]
 8008374:	2b0b      	cmp	r3, #11
 8008376:	d852      	bhi.n	800841e <USBD_CDC_Setup+0x162>
 8008378:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <USBD_CDC_Setup+0xc4>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	080083b1 	.word	0x080083b1
 8008384:	0800842d 	.word	0x0800842d
 8008388:	0800841f 	.word	0x0800841f
 800838c:	0800841f 	.word	0x0800841f
 8008390:	0800841f 	.word	0x0800841f
 8008394:	0800841f 	.word	0x0800841f
 8008398:	0800841f 	.word	0x0800841f
 800839c:	0800841f 	.word	0x0800841f
 80083a0:	0800841f 	.word	0x0800841f
 80083a4:	0800841f 	.word	0x0800841f
 80083a8:	080083db 	.word	0x080083db
 80083ac:	08008405 	.word	0x08008405
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d107      	bne.n	80083cc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083bc:	f107 030a 	add.w	r3, r7, #10
 80083c0:	2202      	movs	r2, #2
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 fa84 	bl	80098d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083ca:	e032      	b.n	8008432 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fa0e 	bl	80097f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80083d4:	2303      	movs	r3, #3
 80083d6:	75fb      	strb	r3, [r7, #23]
          break;
 80083d8:	e02b      	b.n	8008432 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d107      	bne.n	80083f6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083e6:	f107 030d 	add.w	r3, r7, #13
 80083ea:	2201      	movs	r2, #1
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 fa6f 	bl	80098d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083f4:	e01d      	b.n	8008432 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 f9f9 	bl	80097f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80083fe:	2303      	movs	r3, #3
 8008400:	75fb      	strb	r3, [r7, #23]
          break;
 8008402:	e016      	b.n	8008432 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b03      	cmp	r3, #3
 800840e:	d00f      	beq.n	8008430 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 f9ec 	bl	80097f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008418:	2303      	movs	r3, #3
 800841a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800841c:	e008      	b.n	8008430 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f9e5 	bl	80097f0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008426:	2303      	movs	r3, #3
 8008428:	75fb      	strb	r3, [r7, #23]
          break;
 800842a:	e002      	b.n	8008432 <USBD_CDC_Setup+0x176>
          break;
 800842c:	bf00      	nop
 800842e:	e008      	b.n	8008442 <USBD_CDC_Setup+0x186>
          break;
 8008430:	bf00      	nop
      }
      break;
 8008432:	e006      	b.n	8008442 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 f9da 	bl	80097f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	75fb      	strb	r3, [r7, #23]
      break;
 8008440:	bf00      	nop
  }

  return (uint8_t)ret;
 8008442:	7dfb      	ldrb	r3, [r7, #23]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800845e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800846a:	2303      	movs	r3, #3
 800846c:	e04f      	b.n	800850e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008474:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008476:	78fa      	ldrb	r2, [r7, #3]
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	3318      	adds	r3, #24
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d029      	beq.n	80084e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800848c:	78fa      	ldrb	r2, [r7, #3]
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	3318      	adds	r3, #24
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	78f9      	ldrb	r1, [r7, #3]
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	460b      	mov	r3, r1
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	4403      	add	r3, r0
 80084ac:	3338      	adds	r3, #56	; 0x38
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d110      	bne.n	80084e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80084be:	78fa      	ldrb	r2, [r7, #3]
 80084c0:	6879      	ldr	r1, [r7, #4]
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	440b      	add	r3, r1
 80084cc:	3318      	adds	r3, #24
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084d2:	78f9      	ldrb	r1, [r7, #3]
 80084d4:	2300      	movs	r3, #0
 80084d6:	2200      	movs	r2, #0
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 feb5 	bl	800a248 <USBD_LL_Transmit>
 80084de:	e015      	b.n	800850c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	460b      	mov	r3, r1
 8008520:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008528:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008534:	2303      	movs	r3, #3
 8008536:	e015      	b.n	8008564 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008538:	78fb      	ldrb	r3, [r7, #3]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 fec5 	bl	800a2cc <USBD_LL_GetRxDataSize>
 8008542:	4602      	mov	r2, r0
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800855e:	4611      	mov	r1, r2
 8008560:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800857a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008582:	2303      	movs	r3, #3
 8008584:	e01b      	b.n	80085be <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d015      	beq.n	80085bc <USBD_CDC_EP0_RxReady+0x50>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008596:	2bff      	cmp	r3, #255	; 0xff
 8008598:	d010      	beq.n	80085bc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80085a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085b0:	b292      	uxth	r2, r2
 80085b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	22ff      	movs	r2, #255	; 0xff
 80085b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2243      	movs	r2, #67	; 0x43
 80085d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80085d6:	4b03      	ldr	r3, [pc, #12]	; (80085e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80085d8:	4618      	mov	r0, r3
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	200000d4 	.word	0x200000d4

080085e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2243      	movs	r2, #67	; 0x43
 80085f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80085f6:	4b03      	ldr	r3, [pc, #12]	; (8008604 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	20000090 	.word	0x20000090

08008608 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2243      	movs	r2, #67	; 0x43
 8008614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008616:	4b03      	ldr	r3, [pc, #12]	; (8008624 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20000118 	.word	0x20000118

08008628 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	220a      	movs	r2, #10
 8008634:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008636:	4b03      	ldr	r3, [pc, #12]	; (8008644 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	2000004c 	.word	0x2000004c

08008648 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	e004      	b.n	8008666 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008672:	b480      	push	{r7}
 8008674:	b087      	sub	sp, #28
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008684:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800868c:	2303      	movs	r3, #3
 800868e:	e008      	b.n	80086a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e004      	b.n	80086d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086fe:	2303      	movs	r3, #3
 8008700:	e01a      	b.n	8008738 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008708:	2b00      	cmp	r3, #0
 800870a:	d114      	bne.n	8008736 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2201      	movs	r2, #1
 8008710:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800872a:	2181      	movs	r1, #129	; 0x81
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fd8b 	bl	800a248 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800874e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800875a:	2303      	movs	r3, #3
 800875c:	e016      	b.n	800878c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7c1b      	ldrb	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800876c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008770:	2101      	movs	r1, #1
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 fd89 	bl	800a28a <USBD_LL_PrepareReceive>
 8008778:	e007      	b.n	800878a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008780:	2340      	movs	r3, #64	; 0x40
 8008782:	2101      	movs	r1, #1
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 fd80 	bl	800a28a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e01f      	b.n	80087ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	79fa      	ldrb	r2, [r7, #7]
 80087de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f001 fbe7 	bl	8009fb4 <USBD_LL_Init>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008808:	2303      	movs	r3, #3
 800880a:	e016      	b.n	800883a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	f107 020e 	add.w	r2, r7, #14
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	4602      	mov	r2, r0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fc12 	bl	800a074 <USBD_LL_Start>
 8008850:	4603      	mov	r3, r0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800887c:	2303      	movs	r3, #3
 800887e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	78fa      	ldrb	r2, [r7, #3]
 8008894:	4611      	mov	r1, r2
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800889e:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d007      	beq.n	80088ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	4611      	mov	r1, r2
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4798      	blx	r3
  }

  return USBD_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 ff46 	bl	800977c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80088fe:	461a      	mov	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800890c:	f003 031f 	and.w	r3, r3, #31
 8008910:	2b02      	cmp	r3, #2
 8008912:	d01a      	beq.n	800894a <USBD_LL_SetupStage+0x72>
 8008914:	2b02      	cmp	r3, #2
 8008916:	d822      	bhi.n	800895e <USBD_LL_SetupStage+0x86>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <USBD_LL_SetupStage+0x4a>
 800891c:	2b01      	cmp	r3, #1
 800891e:	d00a      	beq.n	8008936 <USBD_LL_SetupStage+0x5e>
 8008920:	e01d      	b.n	800895e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f9ee 	bl	8008d0c <USBD_StdDevReq>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]
      break;
 8008934:	e020      	b.n	8008978 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa52 	bl	8008de8 <USBD_StdItfReq>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
      break;
 8008948:	e016      	b.n	8008978 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fa91 	bl	8008e7a <USBD_StdEPReq>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]
      break;
 800895c:	e00c      	b.n	8008978 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008968:	b2db      	uxtb	r3, r3
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 fbe1 	bl	800a134 <USBD_LL_StallEP>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
      break;
 8008976:	bf00      	nop
  }

  return ret;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b086      	sub	sp, #24
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	460b      	mov	r3, r1
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d138      	bne.n	8008a08 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800899c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d14a      	bne.n	8008a3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d913      	bls.n	80089dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	1ad2      	subs	r2, r2, r3
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	4293      	cmp	r3, r2
 80089cc:	bf28      	it	cs
 80089ce:	4613      	movcs	r3, r2
 80089d0:	461a      	mov	r2, r3
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 ffc5 	bl	8009964 <USBD_CtlContinueRx>
 80089da:	e030      	b.n	8008a3e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d10b      	bne.n	8008a00 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 ffc0 	bl	8009986 <USBD_CtlSendStatus>
 8008a06:	e01a      	b.n	8008a3e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d114      	bne.n	8008a3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00e      	beq.n	8008a3e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	7afa      	ldrb	r2, [r7, #11]
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	4798      	blx	r3
 8008a30:	4603      	mov	r3, r0
 8008a32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
 8008a3c:	e000      	b.n	8008a40 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	460b      	mov	r3, r1
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a56:	7afb      	ldrb	r3, [r7, #11]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d16b      	bne.n	8008b34 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d156      	bne.n	8008b1a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d914      	bls.n	8008aa2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	1ad2      	subs	r2, r2, r3
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 ff3a 	bl	8009908 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a94:	2300      	movs	r3, #0
 8008a96:	2200      	movs	r2, #0
 8008a98:	2100      	movs	r1, #0
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f001 fbf5 	bl	800a28a <USBD_LL_PrepareReceive>
 8008aa0:	e03b      	b.n	8008b1a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d11c      	bne.n	8008ae8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d316      	bcc.n	8008ae8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d20f      	bcs.n	8008ae8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2100      	movs	r1, #0
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 ff1b 	bl	8009908 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ada:	2300      	movs	r3, #0
 8008adc:	2200      	movs	r2, #0
 8008ade:	2100      	movs	r1, #0
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f001 fbd2 	bl	800a28a <USBD_LL_PrepareReceive>
 8008ae6:	e018      	b.n	8008b1a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d10b      	bne.n	8008b0c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d005      	beq.n	8008b0c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b0c:	2180      	movs	r1, #128	; 0x80
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f001 fb10 	bl	800a134 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 ff49 	bl	80099ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d122      	bne.n	8008b6a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff fe98 	bl	800885a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b32:	e01a      	b.n	8008b6a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d114      	bne.n	8008b6a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00e      	beq.n	8008b6a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	7afa      	ldrb	r2, [r7, #11]
 8008b56:	4611      	mov	r1, r2
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	4798      	blx	r3
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	e000      	b.n	8008b6c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e02f      	b.n	8008c08 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00f      	beq.n	8008bd2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6852      	ldr	r2, [r2, #4]
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	4611      	mov	r1, r2
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 fa66 	bl	800a0aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2240      	movs	r2, #64	; 0x40
 8008bea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bee:	2340      	movs	r3, #64	; 0x40
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2180      	movs	r1, #128	; 0x80
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 fa58 	bl	800a0aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2240      	movs	r2, #64	; 0x40
 8008c04:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2204      	movs	r2, #4
 8008c4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	d106      	bne.n	8008c7e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e012      	b.n	8008cc8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d10b      	bne.n	8008cc6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cee:	8a3b      	ldrh	r3, [r7, #16]
 8008cf0:	021b      	lsls	r3, r3, #8
 8008cf2:	b21a      	sxth	r2, r3
 8008cf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	b21b      	sxth	r3, r3
 8008cfc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cfe:	89fb      	ldrh	r3, [r7, #14]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d005      	beq.n	8008d32 <USBD_StdDevReq+0x26>
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	d853      	bhi.n	8008dd2 <USBD_StdDevReq+0xc6>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <USBD_StdDevReq+0x3a>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d14f      	bne.n	8008dd2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]
      break;
 8008d44:	e04a      	b.n	8008ddc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	785b      	ldrb	r3, [r3, #1]
 8008d4a:	2b09      	cmp	r3, #9
 8008d4c:	d83b      	bhi.n	8008dc6 <USBD_StdDevReq+0xba>
 8008d4e:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <USBD_StdDevReq+0x48>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008da9 	.word	0x08008da9
 8008d58:	08008dbd 	.word	0x08008dbd
 8008d5c:	08008dc7 	.word	0x08008dc7
 8008d60:	08008db3 	.word	0x08008db3
 8008d64:	08008dc7 	.word	0x08008dc7
 8008d68:	08008d87 	.word	0x08008d87
 8008d6c:	08008d7d 	.word	0x08008d7d
 8008d70:	08008dc7 	.word	0x08008dc7
 8008d74:	08008d9f 	.word	0x08008d9f
 8008d78:	08008d91 	.word	0x08008d91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f9de 	bl	8009140 <USBD_GetDescriptor>
          break;
 8008d84:	e024      	b.n	8008dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fb6d 	bl	8009468 <USBD_SetAddress>
          break;
 8008d8e:	e01f      	b.n	8008dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fbac 	bl	80094f0 <USBD_SetConfig>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]
          break;
 8008d9c:	e018      	b.n	8008dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fc4b 	bl	800963c <USBD_GetConfig>
          break;
 8008da6:	e013      	b.n	8008dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fc7c 	bl	80096a8 <USBD_GetStatus>
          break;
 8008db0:	e00e      	b.n	8008dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fcab 	bl	8009710 <USBD_SetFeature>
          break;
 8008dba:	e009      	b.n	8008dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fcba 	bl	8009738 <USBD_ClrFeature>
          break;
 8008dc4:	e004      	b.n	8008dd0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fd11 	bl	80097f0 <USBD_CtlError>
          break;
 8008dce:	bf00      	nop
      }
      break;
 8008dd0:	e004      	b.n	8008ddc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fd0b 	bl	80097f0 <USBD_CtlError>
      break;
 8008dda:	bf00      	nop
  }

  return ret;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop

08008de8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d005      	beq.n	8008e0e <USBD_StdItfReq+0x26>
 8008e02:	2b40      	cmp	r3, #64	; 0x40
 8008e04:	d82f      	bhi.n	8008e66 <USBD_StdItfReq+0x7e>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <USBD_StdItfReq+0x26>
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d12b      	bne.n	8008e66 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	3b01      	subs	r3, #1
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d81d      	bhi.n	8008e58 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	889b      	ldrh	r3, [r3, #4]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d813      	bhi.n	8008e4e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	4798      	blx	r3
 8008e34:	4603      	mov	r3, r0
 8008e36:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	88db      	ldrh	r3, [r3, #6]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d110      	bne.n	8008e62 <USBD_StdItfReq+0x7a>
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10d      	bne.n	8008e62 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fd9d 	bl	8009986 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e4c:	e009      	b.n	8008e62 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fccd 	bl	80097f0 <USBD_CtlError>
          break;
 8008e56:	e004      	b.n	8008e62 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fcc8 	bl	80097f0 <USBD_CtlError>
          break;
 8008e60:	e000      	b.n	8008e64 <USBD_StdItfReq+0x7c>
          break;
 8008e62:	bf00      	nop
      }
      break;
 8008e64:	e004      	b.n	8008e70 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fcc1 	bl	80097f0 <USBD_CtlError>
      break;
 8008e6e:	bf00      	nop
  }

  return ret;
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	889b      	ldrh	r3, [r3, #4]
 8008e8c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e96:	2b40      	cmp	r3, #64	; 0x40
 8008e98:	d007      	beq.n	8008eaa <USBD_StdEPReq+0x30>
 8008e9a:	2b40      	cmp	r3, #64	; 0x40
 8008e9c:	f200 8145 	bhi.w	800912a <USBD_StdEPReq+0x2b0>
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00c      	beq.n	8008ebe <USBD_StdEPReq+0x44>
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	f040 8140 	bne.w	800912a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
      break;
 8008ebc:	e13a      	b.n	8009134 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d007      	beq.n	8008ed6 <USBD_StdEPReq+0x5c>
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	f300 8129 	bgt.w	800911e <USBD_StdEPReq+0x2a4>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d07f      	beq.n	8008fd0 <USBD_StdEPReq+0x156>
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d03c      	beq.n	8008f4e <USBD_StdEPReq+0xd4>
 8008ed4:	e123      	b.n	800911e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d002      	beq.n	8008ee8 <USBD_StdEPReq+0x6e>
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d016      	beq.n	8008f14 <USBD_StdEPReq+0x9a>
 8008ee6:	e02c      	b.n	8008f42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00d      	beq.n	8008f0a <USBD_StdEPReq+0x90>
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	2b80      	cmp	r3, #128	; 0x80
 8008ef2:	d00a      	beq.n	8008f0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 f91b 	bl	800a134 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008efe:	2180      	movs	r1, #128	; 0x80
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 f917 	bl	800a134 <USBD_LL_StallEP>
 8008f06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f08:	e020      	b.n	8008f4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fc6f 	bl	80097f0 <USBD_CtlError>
              break;
 8008f12:	e01b      	b.n	8008f4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	885b      	ldrh	r3, [r3, #2]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10e      	bne.n	8008f3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00b      	beq.n	8008f3a <USBD_StdEPReq+0xc0>
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	2b80      	cmp	r3, #128	; 0x80
 8008f26:	d008      	beq.n	8008f3a <USBD_StdEPReq+0xc0>
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	88db      	ldrh	r3, [r3, #6]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d104      	bne.n	8008f3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 f8fd 	bl	800a134 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fd23 	bl	8009986 <USBD_CtlSendStatus>

              break;
 8008f40:	e004      	b.n	8008f4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fc53 	bl	80097f0 <USBD_CtlError>
              break;
 8008f4a:	bf00      	nop
          }
          break;
 8008f4c:	e0ec      	b.n	8009128 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d002      	beq.n	8008f60 <USBD_StdEPReq+0xe6>
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d016      	beq.n	8008f8c <USBD_StdEPReq+0x112>
 8008f5e:	e030      	b.n	8008fc2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00d      	beq.n	8008f82 <USBD_StdEPReq+0x108>
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b80      	cmp	r3, #128	; 0x80
 8008f6a:	d00a      	beq.n	8008f82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f8df 	bl	800a134 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f76:	2180      	movs	r1, #128	; 0x80
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f8db 	bl	800a134 <USBD_LL_StallEP>
 8008f7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f80:	e025      	b.n	8008fce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fc33 	bl	80097f0 <USBD_CtlError>
              break;
 8008f8a:	e020      	b.n	8008fce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11b      	bne.n	8008fcc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d004      	beq.n	8008fa8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f001 f8e5 	bl	800a172 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fcec 	bl	8009986 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	4798      	blx	r3
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008fc0:	e004      	b.n	8008fcc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fc13 	bl	80097f0 <USBD_CtlError>
              break;
 8008fca:	e000      	b.n	8008fce <USBD_StdEPReq+0x154>
              break;
 8008fcc:	bf00      	nop
          }
          break;
 8008fce:	e0ab      	b.n	8009128 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d002      	beq.n	8008fe2 <USBD_StdEPReq+0x168>
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d032      	beq.n	8009046 <USBD_StdEPReq+0x1cc>
 8008fe0:	e097      	b.n	8009112 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <USBD_StdEPReq+0x17e>
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b80      	cmp	r3, #128	; 0x80
 8008fec:	d004      	beq.n	8008ff8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fbfd 	bl	80097f0 <USBD_CtlError>
                break;
 8008ff6:	e091      	b.n	800911c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	da0b      	bge.n	8009018 <USBD_StdEPReq+0x19e>
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	3310      	adds	r3, #16
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	4413      	add	r3, r2
 8009014:	3304      	adds	r3, #4
 8009016:	e00b      	b.n	8009030 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	4413      	add	r3, r2
 800902e:	3304      	adds	r3, #4
 8009030:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2202      	movs	r2, #2
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fc47 	bl	80098d2 <USBD_CtlSendData>
              break;
 8009044:	e06a      	b.n	800911c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800904a:	2b00      	cmp	r3, #0
 800904c:	da11      	bge.n	8009072 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	3324      	adds	r3, #36	; 0x24
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d117      	bne.n	8009098 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fbc0 	bl	80097f0 <USBD_CtlError>
                  break;
 8009070:	e054      	b.n	800911c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	f003 020f 	and.w	r2, r3, #15
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	4613      	mov	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	440b      	add	r3, r1
 8009084:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fbad 	bl	80097f0 <USBD_CtlError>
                  break;
 8009096:	e041      	b.n	800911c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800909c:	2b00      	cmp	r3, #0
 800909e:	da0b      	bge.n	80090b8 <USBD_StdEPReq+0x23e>
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	3310      	adds	r3, #16
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	4413      	add	r3, r2
 80090b4:	3304      	adds	r3, #4
 80090b6:	e00b      	b.n	80090d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	4413      	add	r3, r2
 80090ce:	3304      	adds	r3, #4
 80090d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <USBD_StdEPReq+0x264>
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b80      	cmp	r3, #128	; 0x80
 80090dc:	d103      	bne.n	80090e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	e00e      	b.n	8009104 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 f860 	bl	800a1b0 <USBD_LL_IsStallEP>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2201      	movs	r2, #1
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	e002      	b.n	8009104 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2202      	movs	r2, #2
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fbe1 	bl	80098d2 <USBD_CtlSendData>
              break;
 8009110:	e004      	b.n	800911c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fb6b 	bl	80097f0 <USBD_CtlError>
              break;
 800911a:	bf00      	nop
          }
          break;
 800911c:	e004      	b.n	8009128 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fb65 	bl	80097f0 <USBD_CtlError>
          break;
 8009126:	bf00      	nop
      }
      break;
 8009128:	e004      	b.n	8009134 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fb5f 	bl	80097f0 <USBD_CtlError>
      break;
 8009132:	bf00      	nop
  }

  return ret;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009152:	2300      	movs	r3, #0
 8009154:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	885b      	ldrh	r3, [r3, #2]
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	2b0e      	cmp	r3, #14
 8009162:	f200 8152 	bhi.w	800940a <USBD_GetDescriptor+0x2ca>
 8009166:	a201      	add	r2, pc, #4	; (adr r2, 800916c <USBD_GetDescriptor+0x2c>)
 8009168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916c:	080091dd 	.word	0x080091dd
 8009170:	080091f5 	.word	0x080091f5
 8009174:	08009235 	.word	0x08009235
 8009178:	0800940b 	.word	0x0800940b
 800917c:	0800940b 	.word	0x0800940b
 8009180:	080093ab 	.word	0x080093ab
 8009184:	080093d7 	.word	0x080093d7
 8009188:	0800940b 	.word	0x0800940b
 800918c:	0800940b 	.word	0x0800940b
 8009190:	0800940b 	.word	0x0800940b
 8009194:	0800940b 	.word	0x0800940b
 8009198:	0800940b 	.word	0x0800940b
 800919c:	0800940b 	.word	0x0800940b
 80091a0:	0800940b 	.word	0x0800940b
 80091a4:	080091a9 	.word	0x080091a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00b      	beq.n	80091cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	7c12      	ldrb	r2, [r2, #16]
 80091c0:	f107 0108 	add.w	r1, r7, #8
 80091c4:	4610      	mov	r0, r2
 80091c6:	4798      	blx	r3
 80091c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091ca:	e126      	b.n	800941a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fb0e 	bl	80097f0 <USBD_CtlError>
        err++;
 80091d4:	7afb      	ldrb	r3, [r7, #11]
 80091d6:	3301      	adds	r3, #1
 80091d8:	72fb      	strb	r3, [r7, #11]
      break;
 80091da:	e11e      	b.n	800941a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	7c12      	ldrb	r2, [r2, #16]
 80091e8:	f107 0108 	add.w	r1, r7, #8
 80091ec:	4610      	mov	r0, r2
 80091ee:	4798      	blx	r3
 80091f0:	60f8      	str	r0, [r7, #12]
      break;
 80091f2:	e112      	b.n	800941a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	7c1b      	ldrb	r3, [r3, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10d      	bne.n	8009218 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009204:	f107 0208 	add.w	r2, r7, #8
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	2202      	movs	r2, #2
 8009214:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009216:	e100      	b.n	800941a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	f107 0208 	add.w	r2, r7, #8
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
 8009228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3301      	adds	r3, #1
 800922e:	2202      	movs	r2, #2
 8009230:	701a      	strb	r2, [r3, #0]
      break;
 8009232:	e0f2      	b.n	800941a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	885b      	ldrh	r3, [r3, #2]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b05      	cmp	r3, #5
 800923c:	f200 80ac 	bhi.w	8009398 <USBD_GetDescriptor+0x258>
 8009240:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <USBD_GetDescriptor+0x108>)
 8009242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009246:	bf00      	nop
 8009248:	08009261 	.word	0x08009261
 800924c:	08009295 	.word	0x08009295
 8009250:	080092c9 	.word	0x080092c9
 8009254:	080092fd 	.word	0x080092fd
 8009258:	08009331 	.word	0x08009331
 800925c:	08009365 	.word	0x08009365
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	7c12      	ldrb	r2, [r2, #16]
 8009278:	f107 0108 	add.w	r1, r7, #8
 800927c:	4610      	mov	r0, r2
 800927e:	4798      	blx	r3
 8009280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009282:	e091      	b.n	80093a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fab2 	bl	80097f0 <USBD_CtlError>
            err++;
 800928c:	7afb      	ldrb	r3, [r7, #11]
 800928e:	3301      	adds	r3, #1
 8009290:	72fb      	strb	r3, [r7, #11]
          break;
 8009292:	e089      	b.n	80093a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00b      	beq.n	80092b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	7c12      	ldrb	r2, [r2, #16]
 80092ac:	f107 0108 	add.w	r1, r7, #8
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
 80092b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092b6:	e077      	b.n	80093a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fa98 	bl	80097f0 <USBD_CtlError>
            err++;
 80092c0:	7afb      	ldrb	r3, [r7, #11]
 80092c2:	3301      	adds	r3, #1
 80092c4:	72fb      	strb	r3, [r7, #11]
          break;
 80092c6:	e06f      	b.n	80093a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00b      	beq.n	80092ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	7c12      	ldrb	r2, [r2, #16]
 80092e0:	f107 0108 	add.w	r1, r7, #8
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
 80092e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ea:	e05d      	b.n	80093a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fa7e 	bl	80097f0 <USBD_CtlError>
            err++;
 80092f4:	7afb      	ldrb	r3, [r7, #11]
 80092f6:	3301      	adds	r3, #1
 80092f8:	72fb      	strb	r3, [r7, #11]
          break;
 80092fa:	e055      	b.n	80093a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	7c12      	ldrb	r2, [r2, #16]
 8009314:	f107 0108 	add.w	r1, r7, #8
 8009318:	4610      	mov	r0, r2
 800931a:	4798      	blx	r3
 800931c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800931e:	e043      	b.n	80093a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa64 	bl	80097f0 <USBD_CtlError>
            err++;
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	3301      	adds	r3, #1
 800932c:	72fb      	strb	r3, [r7, #11]
          break;
 800932e:	e03b      	b.n	80093a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7c12      	ldrb	r2, [r2, #16]
 8009348:	f107 0108 	add.w	r1, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009352:	e029      	b.n	80093a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa4a 	bl	80097f0 <USBD_CtlError>
            err++;
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	3301      	adds	r3, #1
 8009360:	72fb      	strb	r3, [r7, #11]
          break;
 8009362:	e021      	b.n	80093a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	7c12      	ldrb	r2, [r2, #16]
 800937c:	f107 0108 	add.w	r1, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009386:	e00f      	b.n	80093a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fa30 	bl	80097f0 <USBD_CtlError>
            err++;
 8009390:	7afb      	ldrb	r3, [r7, #11]
 8009392:	3301      	adds	r3, #1
 8009394:	72fb      	strb	r3, [r7, #11]
          break;
 8009396:	e007      	b.n	80093a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fa28 	bl	80097f0 <USBD_CtlError>
          err++;
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	3301      	adds	r3, #1
 80093a4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80093a6:	bf00      	nop
      }
      break;
 80093a8:	e037      	b.n	800941a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	7c1b      	ldrb	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ba:	f107 0208 	add.w	r2, r7, #8
 80093be:	4610      	mov	r0, r2
 80093c0:	4798      	blx	r3
 80093c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093c4:	e029      	b.n	800941a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fa11 	bl	80097f0 <USBD_CtlError>
        err++;
 80093ce:	7afb      	ldrb	r3, [r7, #11]
 80093d0:	3301      	adds	r3, #1
 80093d2:	72fb      	strb	r3, [r7, #11]
      break;
 80093d4:	e021      	b.n	800941a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7c1b      	ldrb	r3, [r3, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10d      	bne.n	80093fa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e6:	f107 0208 	add.w	r2, r7, #8
 80093ea:	4610      	mov	r0, r2
 80093ec:	4798      	blx	r3
 80093ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3301      	adds	r3, #1
 80093f4:	2207      	movs	r2, #7
 80093f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093f8:	e00f      	b.n	800941a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f9f7 	bl	80097f0 <USBD_CtlError>
        err++;
 8009402:	7afb      	ldrb	r3, [r7, #11]
 8009404:	3301      	adds	r3, #1
 8009406:	72fb      	strb	r3, [r7, #11]
      break;
 8009408:	e007      	b.n	800941a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f9ef 	bl	80097f0 <USBD_CtlError>
      err++;
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	3301      	adds	r3, #1
 8009416:	72fb      	strb	r3, [r7, #11]
      break;
 8009418:	bf00      	nop
  }

  if (err != 0U)
 800941a:	7afb      	ldrb	r3, [r7, #11]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d11e      	bne.n	800945e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	88db      	ldrh	r3, [r3, #6]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d016      	beq.n	8009456 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009428:	893b      	ldrh	r3, [r7, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00e      	beq.n	800944c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	88da      	ldrh	r2, [r3, #6]
 8009432:	893b      	ldrh	r3, [r7, #8]
 8009434:	4293      	cmp	r3, r2
 8009436:	bf28      	it	cs
 8009438:	4613      	movcs	r3, r2
 800943a:	b29b      	uxth	r3, r3
 800943c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800943e:	893b      	ldrh	r3, [r7, #8]
 8009440:	461a      	mov	r2, r3
 8009442:	68f9      	ldr	r1, [r7, #12]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fa44 	bl	80098d2 <USBD_CtlSendData>
 800944a:	e009      	b.n	8009460 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f9ce 	bl	80097f0 <USBD_CtlError>
 8009454:	e004      	b.n	8009460 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fa95 	bl	8009986 <USBD_CtlSendStatus>
 800945c:	e000      	b.n	8009460 <USBD_GetDescriptor+0x320>
    return;
 800945e:	bf00      	nop
  }
}
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop

08009468 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	889b      	ldrh	r3, [r3, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d131      	bne.n	80094de <USBD_SetAddress+0x76>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	88db      	ldrh	r3, [r3, #6]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d12d      	bne.n	80094de <USBD_SetAddress+0x76>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	885b      	ldrh	r3, [r3, #2]
 8009486:	2b7f      	cmp	r3, #127	; 0x7f
 8009488:	d829      	bhi.n	80094de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	885b      	ldrh	r3, [r3, #2]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009494:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d104      	bne.n	80094ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f9a3 	bl	80097f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094aa:	e01d      	b.n	80094e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	7bfa      	ldrb	r2, [r7, #15]
 80094b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fea6 	bl	800a20a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa61 	bl	8009986 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2202      	movs	r2, #2
 80094ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d2:	e009      	b.n	80094e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094dc:	e004      	b.n	80094e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f985 	bl	80097f0 <USBD_CtlError>
  }
}
 80094e6:	bf00      	nop
 80094e8:	bf00      	nop
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	885b      	ldrh	r3, [r3, #2]
 8009502:	b2da      	uxtb	r2, r3
 8009504:	4b4c      	ldr	r3, [pc, #304]	; (8009638 <USBD_SetConfig+0x148>)
 8009506:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009508:	4b4b      	ldr	r3, [pc, #300]	; (8009638 <USBD_SetConfig+0x148>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d905      	bls.n	800951c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f96c 	bl	80097f0 <USBD_CtlError>
    return USBD_FAIL;
 8009518:	2303      	movs	r3, #3
 800951a:	e088      	b.n	800962e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d002      	beq.n	800952e <USBD_SetConfig+0x3e>
 8009528:	2b03      	cmp	r3, #3
 800952a:	d025      	beq.n	8009578 <USBD_SetConfig+0x88>
 800952c:	e071      	b.n	8009612 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800952e:	4b42      	ldr	r3, [pc, #264]	; (8009638 <USBD_SetConfig+0x148>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d01c      	beq.n	8009570 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009536:	4b40      	ldr	r3, [pc, #256]	; (8009638 <USBD_SetConfig+0x148>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009540:	4b3d      	ldr	r3, [pc, #244]	; (8009638 <USBD_SetConfig+0x148>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7ff f992 	bl	8008870 <USBD_SetClassConfig>
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f949 	bl	80097f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800955e:	e065      	b.n	800962c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fa10 	bl	8009986 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2203      	movs	r2, #3
 800956a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800956e:	e05d      	b.n	800962c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fa08 	bl	8009986 <USBD_CtlSendStatus>
      break;
 8009576:	e059      	b.n	800962c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009578:	4b2f      	ldr	r3, [pc, #188]	; (8009638 <USBD_SetConfig+0x148>)
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d112      	bne.n	80095a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009588:	4b2b      	ldr	r3, [pc, #172]	; (8009638 <USBD_SetConfig+0x148>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009592:	4b29      	ldr	r3, [pc, #164]	; (8009638 <USBD_SetConfig+0x148>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff f985 	bl	80088a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f9f1 	bl	8009986 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095a4:	e042      	b.n	800962c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80095a6:	4b24      	ldr	r3, [pc, #144]	; (8009638 <USBD_SetConfig+0x148>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d02a      	beq.n	800960a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff f973 	bl	80088a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095c2:	4b1d      	ldr	r3, [pc, #116]	; (8009638 <USBD_SetConfig+0x148>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095cc:	4b1a      	ldr	r3, [pc, #104]	; (8009638 <USBD_SetConfig+0x148>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7ff f94c 	bl	8008870 <USBD_SetClassConfig>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00f      	beq.n	8009602 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f903 	bl	80097f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff f958 	bl	80088a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009600:	e014      	b.n	800962c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f9bf 	bl	8009986 <USBD_CtlSendStatus>
      break;
 8009608:	e010      	b.n	800962c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f9bb 	bl	8009986 <USBD_CtlSendStatus>
      break;
 8009610:	e00c      	b.n	800962c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f8eb 	bl	80097f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800961a:	4b07      	ldr	r3, [pc, #28]	; (8009638 <USBD_SetConfig+0x148>)
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff f941 	bl	80088a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009626:	2303      	movs	r3, #3
 8009628:	73fb      	strb	r3, [r7, #15]
      break;
 800962a:	bf00      	nop
  }

  return ret;
 800962c:	7bfb      	ldrb	r3, [r7, #15]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20000494 	.word	0x20000494

0800963c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	88db      	ldrh	r3, [r3, #6]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d004      	beq.n	8009658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f8cd 	bl	80097f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009656:	e023      	b.n	80096a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b02      	cmp	r3, #2
 8009662:	dc02      	bgt.n	800966a <USBD_GetConfig+0x2e>
 8009664:	2b00      	cmp	r3, #0
 8009666:	dc03      	bgt.n	8009670 <USBD_GetConfig+0x34>
 8009668:	e015      	b.n	8009696 <USBD_GetConfig+0x5a>
 800966a:	2b03      	cmp	r3, #3
 800966c:	d00b      	beq.n	8009686 <USBD_GetConfig+0x4a>
 800966e:	e012      	b.n	8009696 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	3308      	adds	r3, #8
 800967a:	2201      	movs	r2, #1
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f927 	bl	80098d2 <USBD_CtlSendData>
        break;
 8009684:	e00c      	b.n	80096a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3304      	adds	r3, #4
 800968a:	2201      	movs	r2, #1
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f91f 	bl	80098d2 <USBD_CtlSendData>
        break;
 8009694:	e004      	b.n	80096a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f8a9 	bl	80097f0 <USBD_CtlError>
        break;
 800969e:	bf00      	nop
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	3b01      	subs	r3, #1
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d81e      	bhi.n	80096fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	88db      	ldrh	r3, [r3, #6]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d004      	beq.n	80096d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f890 	bl	80097f0 <USBD_CtlError>
        break;
 80096d0:	e01a      	b.n	8009708 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d005      	beq.n	80096ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f043 0202 	orr.w	r2, r3, #2
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	330c      	adds	r3, #12
 80096f2:	2202      	movs	r2, #2
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f8eb 	bl	80098d2 <USBD_CtlSendData>
      break;
 80096fc:	e004      	b.n	8009708 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f875 	bl	80097f0 <USBD_CtlError>
      break;
 8009706:	bf00      	nop
  }
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	885b      	ldrh	r3, [r3, #2]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d106      	bne.n	8009730 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f92b 	bl	8009986 <USBD_CtlSendStatus>
  }
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	3b01      	subs	r3, #1
 800974c:	2b02      	cmp	r3, #2
 800974e:	d80b      	bhi.n	8009768 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	885b      	ldrh	r3, [r3, #2]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d10c      	bne.n	8009772 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f910 	bl	8009986 <USBD_CtlSendStatus>
      }
      break;
 8009766:	e004      	b.n	8009772 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f840 	bl	80097f0 <USBD_CtlError>
      break;
 8009770:	e000      	b.n	8009774 <USBD_ClrFeature+0x3c>
      break;
 8009772:	bf00      	nop
  }
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	781a      	ldrb	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3301      	adds	r3, #1
 8009796:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f7ff fa92 	bl	8008cd0 <SWAPBYTE>
 80097ac:	4603      	mov	r3, r0
 80097ae:	461a      	mov	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3301      	adds	r3, #1
 80097be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7ff fa85 	bl	8008cd0 <SWAPBYTE>
 80097c6:	4603      	mov	r3, r0
 80097c8:	461a      	mov	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3301      	adds	r3, #1
 80097d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3301      	adds	r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7ff fa78 	bl	8008cd0 <SWAPBYTE>
 80097e0:	4603      	mov	r3, r0
 80097e2:	461a      	mov	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	80da      	strh	r2, [r3, #6]
}
 80097e8:	bf00      	nop
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80097fa:	2180      	movs	r1, #128	; 0x80
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fc99 	bl	800a134 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009802:	2100      	movs	r1, #0
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fc95 	bl	800a134 <USBD_LL_StallEP>
}
 800980a:	bf00      	nop
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b086      	sub	sp, #24
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800981e:	2300      	movs	r3, #0
 8009820:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d036      	beq.n	8009896 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800982c:	6938      	ldr	r0, [r7, #16]
 800982e:	f000 f836 	bl	800989e <USBD_GetLen>
 8009832:	4603      	mov	r3, r0
 8009834:	3301      	adds	r3, #1
 8009836:	b29b      	uxth	r3, r3
 8009838:	005b      	lsls	r3, r3, #1
 800983a:	b29a      	uxth	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	4413      	add	r3, r2
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	7812      	ldrb	r2, [r2, #0]
 800984a:	701a      	strb	r2, [r3, #0]
  idx++;
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	3301      	adds	r3, #1
 8009850:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	4413      	add	r3, r2
 8009858:	2203      	movs	r2, #3
 800985a:	701a      	strb	r2, [r3, #0]
  idx++;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	3301      	adds	r3, #1
 8009860:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009862:	e013      	b.n	800988c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009864:	7dfb      	ldrb	r3, [r7, #23]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	4413      	add	r3, r2
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	7812      	ldrb	r2, [r2, #0]
 800986e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	3301      	adds	r3, #1
 8009874:	613b      	str	r3, [r7, #16]
    idx++;
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	3301      	adds	r3, #1
 800987a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	4413      	add	r3, r2
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
    idx++;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	3301      	adds	r3, #1
 800988a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e7      	bne.n	8009864 <USBD_GetString+0x52>
 8009894:	e000      	b.n	8009898 <USBD_GetString+0x86>
    return;
 8009896:	bf00      	nop
  }
}
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800989e:	b480      	push	{r7}
 80098a0:	b085      	sub	sp, #20
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098ae:	e005      	b.n	80098bc <USBD_GetLen+0x1e>
  {
    len++;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	3301      	adds	r3, #1
 80098b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	3301      	adds	r3, #1
 80098ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1f5      	bne.n	80098b0 <USBD_GetLen+0x12>
  }

  return len;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2202      	movs	r2, #2
 80098e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	2100      	movs	r1, #0
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 fca5 	bl	800a248 <USBD_LL_Transmit>

  return USBD_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	2100      	movs	r1, #0
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fc94 	bl	800a248 <USBD_LL_Transmit>

  return USBD_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2203      	movs	r2, #3
 800993a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	2100      	movs	r1, #0
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 fc98 	bl	800a28a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	2100      	movs	r1, #0
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 fc87 	bl	800a28a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b082      	sub	sp, #8
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2204      	movs	r2, #4
 8009992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009996:	2300      	movs	r3, #0
 8009998:	2200      	movs	r2, #0
 800999a:	2100      	movs	r1, #0
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fc53 	bl	800a248 <USBD_LL_Transmit>

  return USBD_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2205      	movs	r2, #5
 80099b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099bc:	2300      	movs	r3, #0
 80099be:	2200      	movs	r2, #0
 80099c0:	2100      	movs	r1, #0
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fc61 	bl	800a28a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80099d8:	2200      	movs	r2, #0
 80099da:	4912      	ldr	r1, [pc, #72]	; (8009a24 <MX_USB_Device_Init+0x50>)
 80099dc:	4812      	ldr	r0, [pc, #72]	; (8009a28 <MX_USB_Device_Init+0x54>)
 80099de:	f7fe fed9 	bl	8008794 <USBD_Init>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <MX_USB_Device_Init+0x18>
    Error_Handler();
 80099e8:	f7f7 fb00 	bl	8000fec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80099ec:	490f      	ldr	r1, [pc, #60]	; (8009a2c <MX_USB_Device_Init+0x58>)
 80099ee:	480e      	ldr	r0, [pc, #56]	; (8009a28 <MX_USB_Device_Init+0x54>)
 80099f0:	f7fe ff00 	bl	80087f4 <USBD_RegisterClass>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80099fa:	f7f7 faf7 	bl	8000fec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80099fe:	490c      	ldr	r1, [pc, #48]	; (8009a30 <MX_USB_Device_Init+0x5c>)
 8009a00:	4809      	ldr	r0, [pc, #36]	; (8009a28 <MX_USB_Device_Init+0x54>)
 8009a02:	f7fe fe21 	bl	8008648 <USBD_CDC_RegisterInterface>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009a0c:	f7f7 faee 	bl	8000fec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009a10:	4805      	ldr	r0, [pc, #20]	; (8009a28 <MX_USB_Device_Init+0x54>)
 8009a12:	f7fe ff16 	bl	8008842 <USBD_Start>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009a1c:	f7f7 fae6 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009a20:	bf00      	nop
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20000170 	.word	0x20000170
 8009a28:	20000498 	.word	0x20000498
 8009a2c:	20000058 	.word	0x20000058
 8009a30:	2000015c 	.word	0x2000015c

08009a34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a38:	2200      	movs	r2, #0
 8009a3a:	4905      	ldr	r1, [pc, #20]	; (8009a50 <CDC_Init_FS+0x1c>)
 8009a3c:	4805      	ldr	r0, [pc, #20]	; (8009a54 <CDC_Init_FS+0x20>)
 8009a3e:	f7fe fe18 	bl	8008672 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a42:	4905      	ldr	r1, [pc, #20]	; (8009a58 <CDC_Init_FS+0x24>)
 8009a44:	4803      	ldr	r0, [pc, #12]	; (8009a54 <CDC_Init_FS+0x20>)
 8009a46:	f7fe fe32 	bl	80086ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20000b50 	.word	0x20000b50
 8009a54:	20000498 	.word	0x20000498
 8009a58:	20000768 	.word	0x20000768

08009a5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a7c:	79fb      	ldrb	r3, [r7, #7]
 8009a7e:	2b23      	cmp	r3, #35	; 0x23
 8009a80:	d84a      	bhi.n	8009b18 <CDC_Control_FS+0xac>
 8009a82:	a201      	add	r2, pc, #4	; (adr r2, 8009a88 <CDC_Control_FS+0x1c>)
 8009a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a88:	08009b19 	.word	0x08009b19
 8009a8c:	08009b19 	.word	0x08009b19
 8009a90:	08009b19 	.word	0x08009b19
 8009a94:	08009b19 	.word	0x08009b19
 8009a98:	08009b19 	.word	0x08009b19
 8009a9c:	08009b19 	.word	0x08009b19
 8009aa0:	08009b19 	.word	0x08009b19
 8009aa4:	08009b19 	.word	0x08009b19
 8009aa8:	08009b19 	.word	0x08009b19
 8009aac:	08009b19 	.word	0x08009b19
 8009ab0:	08009b19 	.word	0x08009b19
 8009ab4:	08009b19 	.word	0x08009b19
 8009ab8:	08009b19 	.word	0x08009b19
 8009abc:	08009b19 	.word	0x08009b19
 8009ac0:	08009b19 	.word	0x08009b19
 8009ac4:	08009b19 	.word	0x08009b19
 8009ac8:	08009b19 	.word	0x08009b19
 8009acc:	08009b19 	.word	0x08009b19
 8009ad0:	08009b19 	.word	0x08009b19
 8009ad4:	08009b19 	.word	0x08009b19
 8009ad8:	08009b19 	.word	0x08009b19
 8009adc:	08009b19 	.word	0x08009b19
 8009ae0:	08009b19 	.word	0x08009b19
 8009ae4:	08009b19 	.word	0x08009b19
 8009ae8:	08009b19 	.word	0x08009b19
 8009aec:	08009b19 	.word	0x08009b19
 8009af0:	08009b19 	.word	0x08009b19
 8009af4:	08009b19 	.word	0x08009b19
 8009af8:	08009b19 	.word	0x08009b19
 8009afc:	08009b19 	.word	0x08009b19
 8009b00:	08009b19 	.word	0x08009b19
 8009b04:	08009b19 	.word	0x08009b19
 8009b08:	08009b19 	.word	0x08009b19
 8009b0c:	08009b19 	.word	0x08009b19
 8009b10:	08009b19 	.word	0x08009b19
 8009b14:	08009b19 	.word	0x08009b19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b18:	bf00      	nop
  }

  return (USBD_OK);
 8009b1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7f6 fb6f 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	4805      	ldr	r0, [pc, #20]	; (8009b54 <CDC_Receive_FS+0x2c>)
 8009b3e:	f7fe fdb6 	bl	80086ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b42:	4804      	ldr	r0, [pc, #16]	; (8009b54 <CDC_Receive_FS+0x2c>)
 8009b44:	f7fe fdfc 	bl	8008740 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000498 	.word	0x20000498

08009b58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b68:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <CDC_Transmit_FS+0x48>)
 8009b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e00b      	b.n	8009b96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b7e:	887b      	ldrh	r3, [r7, #2]
 8009b80:	461a      	mov	r2, r3
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	4806      	ldr	r0, [pc, #24]	; (8009ba0 <CDC_Transmit_FS+0x48>)
 8009b86:	f7fe fd74 	bl	8008672 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b8a:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <CDC_Transmit_FS+0x48>)
 8009b8c:	f7fe fda8 	bl	80086e0 <USBD_CDC_TransmitPacket>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20000498 	.word	0x20000498

08009ba4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
	...

08009bc8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	6039      	str	r1, [r7, #0]
 8009bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2212      	movs	r2, #18
 8009bd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009bda:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	20000190 	.word	0x20000190

08009bec <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	6039      	str	r1, [r7, #0]
 8009bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2204      	movs	r2, #4
 8009bfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bfe:	4b03      	ldr	r3, [pc, #12]	; (8009c0c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	200001a4 	.word	0x200001a4

08009c10 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	6039      	str	r1, [r7, #0]
 8009c1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4907      	ldr	r1, [pc, #28]	; (8009c44 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009c26:	4808      	ldr	r0, [pc, #32]	; (8009c48 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009c28:	f7ff fdf3 	bl	8009812 <USBD_GetString>
 8009c2c:	e004      	b.n	8009c38 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4904      	ldr	r1, [pc, #16]	; (8009c44 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009c32:	4805      	ldr	r0, [pc, #20]	; (8009c48 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009c34:	f7ff fded 	bl	8009812 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c38:	4b02      	ldr	r3, [pc, #8]	; (8009c44 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20000f38 	.word	0x20000f38
 8009c48:	0800a480 	.word	0x0800a480

08009c4c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	6039      	str	r1, [r7, #0]
 8009c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	4904      	ldr	r1, [pc, #16]	; (8009c6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009c5c:	4804      	ldr	r0, [pc, #16]	; (8009c70 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009c5e:	f7ff fdd8 	bl	8009812 <USBD_GetString>
  return USBD_StrDesc;
 8009c62:	4b02      	ldr	r3, [pc, #8]	; (8009c6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	20000f38 	.word	0x20000f38
 8009c70:	0800a498 	.word	0x0800a498

08009c74 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	6039      	str	r1, [r7, #0]
 8009c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	221a      	movs	r2, #26
 8009c84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c86:	f000 f843 	bl	8009d10 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009c8a:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	200001a8 	.word	0x200001a8

08009c98 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	6039      	str	r1, [r7, #0]
 8009ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d105      	bne.n	8009cb6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	4907      	ldr	r1, [pc, #28]	; (8009ccc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009cae:	4808      	ldr	r0, [pc, #32]	; (8009cd0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009cb0:	f7ff fdaf 	bl	8009812 <USBD_GetString>
 8009cb4:	e004      	b.n	8009cc0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	4904      	ldr	r1, [pc, #16]	; (8009ccc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009cba:	4805      	ldr	r0, [pc, #20]	; (8009cd0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009cbc:	f7ff fda9 	bl	8009812 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cc0:	4b02      	ldr	r3, [pc, #8]	; (8009ccc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000f38 	.word	0x20000f38
 8009cd0:	0800a4ac 	.word	0x0800a4ac

08009cd4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	6039      	str	r1, [r7, #0]
 8009cde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d105      	bne.n	8009cf2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4907      	ldr	r1, [pc, #28]	; (8009d08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009cea:	4808      	ldr	r0, [pc, #32]	; (8009d0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009cec:	f7ff fd91 	bl	8009812 <USBD_GetString>
 8009cf0:	e004      	b.n	8009cfc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	4904      	ldr	r1, [pc, #16]	; (8009d08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009cf6:	4805      	ldr	r0, [pc, #20]	; (8009d0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009cf8:	f7ff fd8b 	bl	8009812 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000f38 	.word	0x20000f38
 8009d0c:	0800a4b8 	.word	0x0800a4b8

08009d10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d16:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <Get_SerialNum+0x44>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d1c:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <Get_SerialNum+0x48>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d22:	4b0e      	ldr	r3, [pc, #56]	; (8009d5c <Get_SerialNum+0x4c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d009      	beq.n	8009d4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d36:	2208      	movs	r2, #8
 8009d38:	4909      	ldr	r1, [pc, #36]	; (8009d60 <Get_SerialNum+0x50>)
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 f814 	bl	8009d68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d40:	2204      	movs	r2, #4
 8009d42:	4908      	ldr	r1, [pc, #32]	; (8009d64 <Get_SerialNum+0x54>)
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f000 f80f 	bl	8009d68 <IntToUnicode>
  }
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	1fff7590 	.word	0x1fff7590
 8009d58:	1fff7594 	.word	0x1fff7594
 8009d5c:	1fff7598 	.word	0x1fff7598
 8009d60:	200001aa 	.word	0x200001aa
 8009d64:	200001ba 	.word	0x200001ba

08009d68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	4613      	mov	r3, r2
 8009d74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	75fb      	strb	r3, [r7, #23]
 8009d7e:	e027      	b.n	8009dd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	0f1b      	lsrs	r3, r3, #28
 8009d84:	2b09      	cmp	r3, #9
 8009d86:	d80b      	bhi.n	8009da0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	0f1b      	lsrs	r3, r3, #28
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	005b      	lsls	r3, r3, #1
 8009d92:	4619      	mov	r1, r3
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	440b      	add	r3, r1
 8009d98:	3230      	adds	r2, #48	; 0x30
 8009d9a:	b2d2      	uxtb	r2, r2
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	e00a      	b.n	8009db6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	0f1b      	lsrs	r3, r3, #28
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	4619      	mov	r1, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	440b      	add	r3, r1
 8009db0:	3237      	adds	r2, #55	; 0x37
 8009db2:	b2d2      	uxtb	r2, r2
 8009db4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	75fb      	strb	r3, [r7, #23]
 8009dd0:	7dfa      	ldrb	r2, [r7, #23]
 8009dd2:	79fb      	ldrb	r3, [r7, #7]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d3d3      	bcc.n	8009d80 <IntToUnicode+0x18>
  }
}
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
	...

08009de8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b094      	sub	sp, #80	; 0x50
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009df0:	f107 030c 	add.w	r3, r7, #12
 8009df4:	2244      	movs	r2, #68	; 0x44
 8009df6:	2100      	movs	r1, #0
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 fb2d 	bl	800a458 <memset>
  if(pcdHandle->Instance==USB)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a15      	ldr	r2, [pc, #84]	; (8009e58 <HAL_PCD_MspInit+0x70>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d122      	bne.n	8009e4e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009e12:	f107 030c 	add.w	r3, r7, #12
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fa f9b6 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009e22:	f7f7 f8e3 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e26:	4b0d      	ldr	r3, [pc, #52]	; (8009e5c <HAL_PCD_MspInit+0x74>)
 8009e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2a:	4a0c      	ldr	r2, [pc, #48]	; (8009e5c <HAL_PCD_MspInit+0x74>)
 8009e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e30:	6593      	str	r3, [r2, #88]	; 0x58
 8009e32:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <HAL_PCD_MspInit+0x74>)
 8009e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e3a:	60bb      	str	r3, [r7, #8]
 8009e3c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	2014      	movs	r0, #20
 8009e44:	f7f7 fce5 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009e48:	2014      	movs	r0, #20
 8009e4a:	f7f7 fcfc 	bl	8001846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e4e:	bf00      	nop
 8009e50:	3750      	adds	r7, #80	; 0x50
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	40005c00 	.word	0x40005c00
 8009e5c:	40021000 	.word	0x40021000

08009e60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f7fe fd2e 	bl	80088d8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009e7c:	bf00      	nop
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009e96:	78fa      	ldrb	r2, [r7, #3]
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	440b      	add	r3, r1
 8009ea4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	78fb      	ldrb	r3, [r7, #3]
 8009eac:	4619      	mov	r1, r3
 8009eae:	f7fe fd68 	bl	8008982 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009ecc:	78fa      	ldrb	r2, [r7, #3]
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	440b      	add	r3, r1
 8009eda:	333c      	adds	r3, #60	; 0x3c
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	f7fe fdb1 	bl	8008a48 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fec5 	bl	8008c8c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f12:	2301      	movs	r3, #1
 8009f14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d001      	beq.n	8009f22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f1e:	f7f7 f865 	bl	8000fec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f28:	7bfa      	ldrb	r2, [r7, #15]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fe fe6f 	bl	8008c10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe fe1b 	bl	8008b74 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fe6a 	bl	8008c30 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d005      	beq.n	8009f70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f64:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <HAL_PCD_SuspendCallback+0x30>)
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	4a03      	ldr	r2, [pc, #12]	; (8009f78 <HAL_PCD_SuspendCallback+0x30>)
 8009f6a:	f043 0306 	orr.w	r3, r3, #6
 8009f6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	e000ed00 	.word	0xe000ed00

08009f7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d007      	beq.n	8009f9c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f8c:	4b08      	ldr	r3, [pc, #32]	; (8009fb0 <HAL_PCD_ResumeCallback+0x34>)
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	4a07      	ldr	r2, [pc, #28]	; (8009fb0 <HAL_PCD_ResumeCallback+0x34>)
 8009f92:	f023 0306 	bic.w	r3, r3, #6
 8009f96:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009f98:	f000 f9fa 	bl	800a390 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe fe5a 	bl	8008c5c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	e000ed00 	.word	0xe000ed00

08009fb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009fbc:	4a2b      	ldr	r2, [pc, #172]	; (800a06c <USBD_LL_Init+0xb8>)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a29      	ldr	r2, [pc, #164]	; (800a06c <USBD_LL_Init+0xb8>)
 8009fc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009fcc:	4b27      	ldr	r3, [pc, #156]	; (800a06c <USBD_LL_Init+0xb8>)
 8009fce:	4a28      	ldr	r2, [pc, #160]	; (800a070 <USBD_LL_Init+0xbc>)
 8009fd0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fd2:	4b26      	ldr	r3, [pc, #152]	; (800a06c <USBD_LL_Init+0xb8>)
 8009fd4:	2208      	movs	r2, #8
 8009fd6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fd8:	4b24      	ldr	r3, [pc, #144]	; (800a06c <USBD_LL_Init+0xb8>)
 8009fda:	2202      	movs	r2, #2
 8009fdc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fde:	4b23      	ldr	r3, [pc, #140]	; (800a06c <USBD_LL_Init+0xb8>)
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009fe4:	4b21      	ldr	r3, [pc, #132]	; (800a06c <USBD_LL_Init+0xb8>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009fea:	4b20      	ldr	r3, [pc, #128]	; (800a06c <USBD_LL_Init+0xb8>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009ff0:	4b1e      	ldr	r3, [pc, #120]	; (800a06c <USBD_LL_Init+0xb8>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ff6:	4b1d      	ldr	r3, [pc, #116]	; (800a06c <USBD_LL_Init+0xb8>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ffc:	481b      	ldr	r0, [pc, #108]	; (800a06c <USBD_LL_Init+0xb8>)
 8009ffe:	f7f7 fdef 	bl	8001be0 <HAL_PCD_Init>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a008:	f7f6 fff0 	bl	8000fec <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a012:	2318      	movs	r3, #24
 800a014:	2200      	movs	r2, #0
 800a016:	2100      	movs	r1, #0
 800a018:	f7f9 faa8 	bl	800356c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a022:	2358      	movs	r3, #88	; 0x58
 800a024:	2200      	movs	r2, #0
 800a026:	2180      	movs	r1, #128	; 0x80
 800a028:	f7f9 faa0 	bl	800356c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a032:	23c0      	movs	r3, #192	; 0xc0
 800a034:	2200      	movs	r2, #0
 800a036:	2181      	movs	r1, #129	; 0x81
 800a038:	f7f9 fa98 	bl	800356c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a042:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a046:	2200      	movs	r2, #0
 800a048:	2101      	movs	r1, #1
 800a04a:	f7f9 fa8f 	bl	800356c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a054:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a058:	2200      	movs	r2, #0
 800a05a:	2182      	movs	r1, #130	; 0x82
 800a05c:	f7f9 fa86 	bl	800356c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20001138 	.word	0x20001138
 800a070:	40005c00 	.word	0x40005c00

0800a074 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7f7 fe8d 	bl	8001daa <HAL_PCD_Start>
 800a090:	4603      	mov	r3, r0
 800a092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	4618      	mov	r0, r3
 800a098:	f000 f980 	bl	800a39c <USBD_Get_USB_Status>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	4608      	mov	r0, r1
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	70fb      	strb	r3, [r7, #3]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70bb      	strb	r3, [r7, #2]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0d2:	78bb      	ldrb	r3, [r7, #2]
 800a0d4:	883a      	ldrh	r2, [r7, #0]
 800a0d6:	78f9      	ldrb	r1, [r7, #3]
 800a0d8:	f7f7 ffd5 	bl	8002086 <HAL_PCD_EP_Open>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 f95a 	bl	800a39c <USBD_Get_USB_Status>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b084      	sub	sp, #16
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	460b      	mov	r3, r1
 800a100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	4611      	mov	r1, r2
 800a114:	4618      	mov	r0, r3
 800a116:	f7f8 f81c 	bl	8002152 <HAL_PCD_EP_Close>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 f93b 	bl	800a39c <USBD_Get_USB_Status>
 800a126:	4603      	mov	r3, r0
 800a128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a14e:	78fa      	ldrb	r2, [r7, #3]
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f7f8 f8dd 	bl	8002312 <HAL_PCD_EP_SetStall>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f91c 	bl	800a39c <USBD_Get_USB_Status>
 800a164:	4603      	mov	r3, r0
 800a166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a168:	7bbb      	ldrb	r3, [r7, #14]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a18c:	78fa      	ldrb	r2, [r7, #3]
 800a18e:	4611      	mov	r1, r2
 800a190:	4618      	mov	r0, r3
 800a192:	f7f8 f910 	bl	80023b6 <HAL_PCD_EP_ClrStall>
 800a196:	4603      	mov	r3, r0
 800a198:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 f8fd 	bl	800a39c <USBD_Get_USB_Status>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	da0c      	bge.n	800a1e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d2:	68f9      	ldr	r1, [r7, #12]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	00db      	lsls	r3, r3, #3
 800a1de:	440b      	add	r3, r1
 800a1e0:	3302      	adds	r3, #2
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	e00b      	b.n	800a1fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1e6:	78fb      	ldrb	r3, [r7, #3]
 800a1e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1ec:	68f9      	ldr	r1, [r7, #12]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	00db      	lsls	r3, r3, #3
 800a1f6:	440b      	add	r3, r1
 800a1f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a1fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	460b      	mov	r3, r1
 800a214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a224:	78fa      	ldrb	r2, [r7, #3]
 800a226:	4611      	mov	r1, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	f7f7 ff07 	bl	800203c <HAL_PCD_SetAddress>
 800a22e:	4603      	mov	r3, r0
 800a230:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	4618      	mov	r0, r3
 800a236:	f000 f8b1 	bl	800a39c <USBD_Get_USB_Status>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a23e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	607a      	str	r2, [r7, #4]
 800a252:	603b      	str	r3, [r7, #0]
 800a254:	460b      	mov	r3, r1
 800a256:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a266:	7af9      	ldrb	r1, [r7, #11]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	f7f8 f80e 	bl	800228c <HAL_PCD_EP_Transmit>
 800a270:	4603      	mov	r3, r0
 800a272:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a274:	7dfb      	ldrb	r3, [r7, #23]
 800a276:	4618      	mov	r0, r3
 800a278:	f000 f890 	bl	800a39c <USBD_Get_USB_Status>
 800a27c:	4603      	mov	r3, r0
 800a27e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a280:	7dbb      	ldrb	r3, [r7, #22]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
 800a296:	460b      	mov	r3, r1
 800a298:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2a8:	7af9      	ldrb	r1, [r7, #11]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	f7f7 ff98 	bl	80021e2 <HAL_PCD_EP_Receive>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 f86f 	bl	800a39c <USBD_Get_USB_Status>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2de:	78fa      	ldrb	r2, [r7, #3]
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7f7 ffba 	bl	800225c <HAL_PCD_EP_GetRxCount>
 800a2e8:	4603      	mov	r3, r0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <HAL_PCDEx_LPM_Callback+0x18>
 800a306:	2b01      	cmp	r3, #1
 800a308:	d013      	beq.n	800a332 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a30a:	e023      	b.n	800a354 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d007      	beq.n	800a324 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a314:	f000 f83c 	bl	800a390 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a318:	4b10      	ldr	r3, [pc, #64]	; (800a35c <HAL_PCDEx_LPM_Callback+0x68>)
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	4a0f      	ldr	r2, [pc, #60]	; (800a35c <HAL_PCDEx_LPM_Callback+0x68>)
 800a31e:	f023 0306 	bic.w	r3, r3, #6
 800a322:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fc96 	bl	8008c5c <USBD_LL_Resume>
    break;
 800a330:	e010      	b.n	800a354 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fe fc79 	bl	8008c30 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d005      	beq.n	800a352 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a346:	4b05      	ldr	r3, [pc, #20]	; (800a35c <HAL_PCDEx_LPM_Callback+0x68>)
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	4a04      	ldr	r2, [pc, #16]	; (800a35c <HAL_PCDEx_LPM_Callback+0x68>)
 800a34c:	f043 0306 	orr.w	r3, r3, #6
 800a350:	6113      	str	r3, [r2, #16]
    break;
 800a352:	bf00      	nop
}
 800a354:	bf00      	nop
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	e000ed00 	.word	0xe000ed00

0800a360 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a368:	4b03      	ldr	r3, [pc, #12]	; (800a378 <USBD_static_malloc+0x18>)
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	2000142c 	.word	0x2000142c

0800a37c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]

}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a394:	f7f6 f986 	bl	80006a4 <SystemClock_Config>
}
 800a398:	bf00      	nop
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d817      	bhi.n	800a3e0 <USBD_Get_USB_Status+0x44>
 800a3b0:	a201      	add	r2, pc, #4	; (adr r2, 800a3b8 <USBD_Get_USB_Status+0x1c>)
 800a3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b6:	bf00      	nop
 800a3b8:	0800a3c9 	.word	0x0800a3c9
 800a3bc:	0800a3cf 	.word	0x0800a3cf
 800a3c0:	0800a3d5 	.word	0x0800a3d5
 800a3c4:	0800a3db 	.word	0x0800a3db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a3cc:	e00b      	b.n	800a3e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d2:	e008      	b.n	800a3e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d8:	e005      	b.n	800a3e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3de:	e002      	b.n	800a3e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e4:	bf00      	nop
  }
  return usb_status;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <__libc_init_array>:
 800a3f4:	b570      	push	{r4, r5, r6, lr}
 800a3f6:	4d0d      	ldr	r5, [pc, #52]	; (800a42c <__libc_init_array+0x38>)
 800a3f8:	4c0d      	ldr	r4, [pc, #52]	; (800a430 <__libc_init_array+0x3c>)
 800a3fa:	1b64      	subs	r4, r4, r5
 800a3fc:	10a4      	asrs	r4, r4, #2
 800a3fe:	2600      	movs	r6, #0
 800a400:	42a6      	cmp	r6, r4
 800a402:	d109      	bne.n	800a418 <__libc_init_array+0x24>
 800a404:	4d0b      	ldr	r5, [pc, #44]	; (800a434 <__libc_init_array+0x40>)
 800a406:	4c0c      	ldr	r4, [pc, #48]	; (800a438 <__libc_init_array+0x44>)
 800a408:	f000 f82e 	bl	800a468 <_init>
 800a40c:	1b64      	subs	r4, r4, r5
 800a40e:	10a4      	asrs	r4, r4, #2
 800a410:	2600      	movs	r6, #0
 800a412:	42a6      	cmp	r6, r4
 800a414:	d105      	bne.n	800a422 <__libc_init_array+0x2e>
 800a416:	bd70      	pop	{r4, r5, r6, pc}
 800a418:	f855 3b04 	ldr.w	r3, [r5], #4
 800a41c:	4798      	blx	r3
 800a41e:	3601      	adds	r6, #1
 800a420:	e7ee      	b.n	800a400 <__libc_init_array+0xc>
 800a422:	f855 3b04 	ldr.w	r3, [r5], #4
 800a426:	4798      	blx	r3
 800a428:	3601      	adds	r6, #1
 800a42a:	e7f2      	b.n	800a412 <__libc_init_array+0x1e>
 800a42c:	0800a4d8 	.word	0x0800a4d8
 800a430:	0800a4d8 	.word	0x0800a4d8
 800a434:	0800a4d8 	.word	0x0800a4d8
 800a438:	0800a4dc 	.word	0x0800a4dc

0800a43c <memcpy>:
 800a43c:	440a      	add	r2, r1
 800a43e:	4291      	cmp	r1, r2
 800a440:	f100 33ff 	add.w	r3, r0, #4294967295
 800a444:	d100      	bne.n	800a448 <memcpy+0xc>
 800a446:	4770      	bx	lr
 800a448:	b510      	push	{r4, lr}
 800a44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a44e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a452:	4291      	cmp	r1, r2
 800a454:	d1f9      	bne.n	800a44a <memcpy+0xe>
 800a456:	bd10      	pop	{r4, pc}

0800a458 <memset>:
 800a458:	4402      	add	r2, r0
 800a45a:	4603      	mov	r3, r0
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d100      	bne.n	800a462 <memset+0xa>
 800a460:	4770      	bx	lr
 800a462:	f803 1b01 	strb.w	r1, [r3], #1
 800a466:	e7f9      	b.n	800a45c <memset+0x4>

0800a468 <_init>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	bf00      	nop
 800a46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46e:	bc08      	pop	{r3}
 800a470:	469e      	mov	lr, r3
 800a472:	4770      	bx	lr

0800a474 <_fini>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	bf00      	nop
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr
